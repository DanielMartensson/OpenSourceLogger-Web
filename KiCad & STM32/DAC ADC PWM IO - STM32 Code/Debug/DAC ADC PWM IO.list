
DAC ADC PWM IO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069e8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006b70  08006b70  00016b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ba8  08006ba8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006ba8  08006ba8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ba8  08006ba8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ba8  08006ba8  00016ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bac  08006bac  00016bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006bb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000470  20000010  08006bc0  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000480  08006bc0  00020480  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013138  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002bb3  00000000  00000000  00033178  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013f0  00000000  00000000  00035d30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012b8  00000000  00000000  00037120  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cbf4  00000000  00000000  000383d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010a64  00000000  00000000  00054fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000aad67  00000000  00000000  00065a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00110797  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053fc  00000000  00000000  00110814  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006b58 	.word	0x08006b58

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08006b58 	.word	0x08006b58

080001c8 <erase>:

//Private variables
// sector start address
static uint32_t memory_address;

static void erase(){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 80001ce:	f002 fe53 	bl	8002e78 <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef pEraseInit;
	pEraseInit.NbPages = 1;
 80001d2:	2301      	movs	r3, #1
 80001d4:	60fb      	str	r3, [r7, #12]
	pEraseInit.PageAddress = memory_address;
 80001d6:	4b09      	ldr	r3, [pc, #36]	; (80001fc <erase+0x34>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	60bb      	str	r3, [r7, #8]
	pEraseInit.TypeErase = TYPEERASE_PAGES;
 80001dc:	2300      	movs	r3, #0
 80001de:	607b      	str	r3, [r7, #4]
	uint32_t PageError = 0;
 80001e0:	2300      	movs	r3, #0
 80001e2:	603b      	str	r3, [r7, #0]
	HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 80001e4:	463a      	mov	r2, r7
 80001e6:	1d3b      	adds	r3, r7, #4
 80001e8:	4611      	mov	r1, r2
 80001ea:	4618      	mov	r0, r3
 80001ec:	f002 ff08 	bl	8003000 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 80001f0:	f002 fe68 	bl	8002ec4 <HAL_FLASH_Lock>
}
 80001f4:	bf00      	nop
 80001f6:	3710      	adds	r7, #16
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	2000002c 	.word	0x2000002c

08000200 <FlashSetAddrs>:

// Set memory address
void FlashSetAddrs(uint32_t address) {
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
	memory_address = address;
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <FlashSetAddrs+0x1c>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	6013      	str	r3, [r2, #0]
}
 800020e:	bf00      	nop
 8000210:	370c      	adds	r7, #12
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	2000002c 	.word	0x2000002c

08000220 <FlashWriteN>:

// Write Flash
void FlashWriteN(uint32_t idx, void *wrBuf, uint32_t Nsize, DataTypeDef dataType) {
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b08d      	sub	sp, #52	; 0x34
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	607a      	str	r2, [r7, #4]
 800022c:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = memory_address + idx;
 800022e:	4b4e      	ldr	r3, [pc, #312]	; (8000368 <FlashWriteN+0x148>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	68fa      	ldr	r2, [r7, #12]
 8000234:	4413      	add	r3, r2
 8000236:	62fb      	str	r3, [r7, #44]	; 0x2c

	// Need to erase page first!
	erase();
 8000238:	f7ff ffc6 	bl	80001c8 <erase>
	// Converter
	Convert convert;
	uint32_t wrBuf2[1];

	//Unlock Flash
	HAL_FLASH_Unlock();
 800023c:	f002 fe1c 	bl	8002e78 <HAL_FLASH_Unlock>
	//Write to Flash
	switch (dataType) {
 8000240:	78fb      	ldrb	r3, [r7, #3]
 8000242:	2b03      	cmp	r3, #3
 8000244:	f200 8089 	bhi.w	800035a <FlashWriteN+0x13a>
 8000248:	a201      	add	r2, pc, #4	; (adr r2, 8000250 <FlashWriteN+0x30>)
 800024a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800024e:	bf00      	nop
 8000250:	08000261 	.word	0x08000261
 8000254:	08000295 	.word	0x08000295
 8000258:	080002cd 	.word	0x080002cd
 800025c:	08000303 	.word	0x08000303
	case DATA_TYPE_U64:
		for (uint32_t i = 0; i < Nsize; i++) {
 8000260:	2300      	movs	r3, #0
 8000262:	62bb      	str	r3, [r7, #40]	; 0x28
 8000264:	e011      	b.n	800028a <FlashWriteN+0x6a>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, flashAddress, ((uint64_t*) wrBuf)[i]);
 8000266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000268:	00db      	lsls	r3, r3, #3
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	4413      	add	r3, r2
 800026e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000272:	461a      	mov	r2, r3
 8000274:	4623      	mov	r3, r4
 8000276:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000278:	2003      	movs	r0, #3
 800027a:	f002 fd8d 	bl	8002d98 <HAL_FLASH_Program>
			flashAddress += 8;
 800027e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000280:	3308      	adds	r3, #8
 8000282:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (uint32_t i = 0; i < Nsize; i++) {
 8000284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000286:	3301      	adds	r3, #1
 8000288:	62bb      	str	r3, [r7, #40]	; 0x28
 800028a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	429a      	cmp	r2, r3
 8000290:	d3e9      	bcc.n	8000266 <FlashWriteN+0x46>
		}
		break;
 8000292:	e062      	b.n	800035a <FlashWriteN+0x13a>

	case DATA_TYPE_U16:
		for (uint32_t i = 0; i < Nsize; i++) {
 8000294:	2300      	movs	r3, #0
 8000296:	627b      	str	r3, [r7, #36]	; 0x24
 8000298:	e013      	b.n	80002c2 <FlashWriteN+0xa2>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, flashAddress, ((uint16_t*) wrBuf)[i]);
 800029a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800029c:	005b      	lsls	r3, r3, #1
 800029e:	68ba      	ldr	r2, [r7, #8]
 80002a0:	4413      	add	r3, r2
 80002a2:	881b      	ldrh	r3, [r3, #0]
 80002a4:	b29b      	uxth	r3, r3
 80002a6:	f04f 0400 	mov.w	r4, #0
 80002aa:	461a      	mov	r2, r3
 80002ac:	4623      	mov	r3, r4
 80002ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80002b0:	2001      	movs	r0, #1
 80002b2:	f002 fd71 	bl	8002d98 <HAL_FLASH_Program>
			flashAddress += 2;
 80002b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002b8:	3302      	adds	r3, #2
 80002ba:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (uint32_t i = 0; i < Nsize; i++) {
 80002bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002be:	3301      	adds	r3, #1
 80002c0:	627b      	str	r3, [r7, #36]	; 0x24
 80002c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	429a      	cmp	r2, r3
 80002c8:	d3e7      	bcc.n	800029a <FlashWriteN+0x7a>
		}
		break;
 80002ca:	e046      	b.n	800035a <FlashWriteN+0x13a>

	case DATA_TYPE_U32:
		for (uint32_t i = 0; i < Nsize; i++) {
 80002cc:	2300      	movs	r3, #0
 80002ce:	623b      	str	r3, [r7, #32]
 80002d0:	e012      	b.n	80002f8 <FlashWriteN+0xd8>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddress, ((uint32_t*) wrBuf)[i]);
 80002d2:	6a3b      	ldr	r3, [r7, #32]
 80002d4:	009b      	lsls	r3, r3, #2
 80002d6:	68ba      	ldr	r2, [r7, #8]
 80002d8:	4413      	add	r3, r2
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	f04f 0400 	mov.w	r4, #0
 80002e0:	461a      	mov	r2, r3
 80002e2:	4623      	mov	r3, r4
 80002e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80002e6:	2002      	movs	r0, #2
 80002e8:	f002 fd56 	bl	8002d98 <HAL_FLASH_Program>
			flashAddress += 4;
 80002ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002ee:	3304      	adds	r3, #4
 80002f0:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (uint32_t i = 0; i < Nsize; i++) {
 80002f2:	6a3b      	ldr	r3, [r7, #32]
 80002f4:	3301      	adds	r3, #1
 80002f6:	623b      	str	r3, [r7, #32]
 80002f8:	6a3a      	ldr	r2, [r7, #32]
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	429a      	cmp	r2, r3
 80002fe:	d3e8      	bcc.n	80002d2 <FlashWriteN+0xb2>
		}
		break;
 8000300:	e02b      	b.n	800035a <FlashWriteN+0x13a>

	case DATA_TYPE_FLOAT:
		for (uint32_t i = 0; i < Nsize; i++) {
 8000302:	2300      	movs	r3, #0
 8000304:	61fb      	str	r3, [r7, #28]
 8000306:	e023      	b.n	8000350 <FlashWriteN+0x130>
			// Convert float -> uint8_t
			convert.float_value = ((float*) wrBuf)[i];
 8000308:	69fb      	ldr	r3, [r7, #28]
 800030a:	009b      	lsls	r3, r3, #2
 800030c:	68ba      	ldr	r2, [r7, #8]
 800030e:	4413      	add	r3, r2
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	61bb      	str	r3, [r7, #24]
			// Turn it to uint32_t
			wrBuf2[0] = convert.uint8_values[0] << 24 | convert.uint8_values[1] << 16 | convert.uint8_values[2] << 8 || convert.uint8_values[3];
 8000314:	7e3b      	ldrb	r3, [r7, #24]
 8000316:	061a      	lsls	r2, r3, #24
 8000318:	7e7b      	ldrb	r3, [r7, #25]
 800031a:	041b      	lsls	r3, r3, #16
 800031c:	431a      	orrs	r2, r3
 800031e:	7ebb      	ldrb	r3, [r7, #26]
 8000320:	021b      	lsls	r3, r3, #8
 8000322:	4313      	orrs	r3, r2
 8000324:	2b00      	cmp	r3, #0
 8000326:	d102      	bne.n	800032e <FlashWriteN+0x10e>
 8000328:	7efb      	ldrb	r3, [r7, #27]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <FlashWriteN+0x112>
 800032e:	2301      	movs	r3, #1
 8000330:	e000      	b.n	8000334 <FlashWriteN+0x114>
 8000332:	2300      	movs	r3, #0
 8000334:	617b      	str	r3, [r7, #20]
			// Write the uint32_t byte
			FlashWriteN(idx + 4*i, wrBuf2, 1, DATA_TYPE_U32);
 8000336:	69fb      	ldr	r3, [r7, #28]
 8000338:	009a      	lsls	r2, r3, #2
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	18d0      	adds	r0, r2, r3
 800033e:	f107 0114 	add.w	r1, r7, #20
 8000342:	2302      	movs	r3, #2
 8000344:	2201      	movs	r2, #1
 8000346:	f7ff ff6b 	bl	8000220 <FlashWriteN>
		for (uint32_t i = 0; i < Nsize; i++) {
 800034a:	69fb      	ldr	r3, [r7, #28]
 800034c:	3301      	adds	r3, #1
 800034e:	61fb      	str	r3, [r7, #28]
 8000350:	69fa      	ldr	r2, [r7, #28]
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	429a      	cmp	r2, r3
 8000356:	d3d7      	bcc.n	8000308 <FlashWriteN+0xe8>
		}
		break;
 8000358:	bf00      	nop
	}
	//Lock the Flash space
	HAL_FLASH_Lock();
 800035a:	f002 fdb3 	bl	8002ec4 <HAL_FLASH_Lock>
}
 800035e:	bf00      	nop
 8000360:	3734      	adds	r7, #52	; 0x34
 8000362:	46bd      	mov	sp, r7
 8000364:	bd90      	pop	{r4, r7, pc}
 8000366:	bf00      	nop
 8000368:	2000002c 	.word	0x2000002c

0800036c <FlashReadN>:
//4. Read Flash
void FlashReadN(uint32_t idx, void *rdBuf, uint32_t Nsize, DataTypeDef dataType) {
 800036c:	b590      	push	{r4, r7, lr}
 800036e:	b08d      	sub	sp, #52	; 0x34
 8000370:	af00      	add	r7, sp, #0
 8000372:	60f8      	str	r0, [r7, #12]
 8000374:	60b9      	str	r1, [r7, #8]
 8000376:	607a      	str	r2, [r7, #4]
 8000378:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = memory_address + idx;
 800037a:	4b41      	ldr	r3, [pc, #260]	; (8000480 <FlashReadN+0x114>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	68fa      	ldr	r2, [r7, #12]
 8000380:	4413      	add	r3, r2
 8000382:	62fb      	str	r3, [r7, #44]	; 0x2c

	// Converter
	Convert convert;
	uint32_t rdBuf2[1];

	switch (dataType) {
 8000384:	78fb      	ldrb	r3, [r7, #3]
 8000386:	2b03      	cmp	r3, #3
 8000388:	d875      	bhi.n	8000476 <FlashReadN+0x10a>
 800038a:	a201      	add	r2, pc, #4	; (adr r2, 8000390 <FlashReadN+0x24>)
 800038c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000390:	080003a1 	.word	0x080003a1
 8000394:	080003cf 	.word	0x080003cf
 8000398:	080003f9 	.word	0x080003f9
 800039c:	08000423 	.word	0x08000423
	case DATA_TYPE_U64:
		for (uint32_t i = 0; i < Nsize; i++) {
 80003a0:	2300      	movs	r3, #0
 80003a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80003a4:	e00e      	b.n	80003c4 <FlashReadN+0x58>
			*((uint64_t*) rdBuf + i) = *(uint64_t*) flashAddress;
 80003a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80003aa:	00d2      	lsls	r2, r2, #3
 80003ac:	68b9      	ldr	r1, [r7, #8]
 80003ae:	440a      	add	r2, r1
 80003b0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80003b4:	e9c2 3400 	strd	r3, r4, [r2]
			flashAddress += 8;
 80003b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003ba:	3308      	adds	r3, #8
 80003bc:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (uint32_t i = 0; i < Nsize; i++) {
 80003be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003c0:	3301      	adds	r3, #1
 80003c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80003c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	429a      	cmp	r2, r3
 80003ca:	d3ec      	bcc.n	80003a6 <FlashReadN+0x3a>
		}
		break;
 80003cc:	e053      	b.n	8000476 <FlashReadN+0x10a>

	case DATA_TYPE_U16:
		for (uint32_t i = 0; i < Nsize; i++) {
 80003ce:	2300      	movs	r3, #0
 80003d0:	627b      	str	r3, [r7, #36]	; 0x24
 80003d2:	e00c      	b.n	80003ee <FlashReadN+0x82>
			*((uint16_t*) rdBuf + i) = *(uint16_t*) flashAddress;
 80003d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80003d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003d8:	005b      	lsls	r3, r3, #1
 80003da:	68b9      	ldr	r1, [r7, #8]
 80003dc:	440b      	add	r3, r1
 80003de:	8812      	ldrh	r2, [r2, #0]
 80003e0:	801a      	strh	r2, [r3, #0]
			flashAddress += 2;
 80003e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003e4:	3302      	adds	r3, #2
 80003e6:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (uint32_t i = 0; i < Nsize; i++) {
 80003e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003ea:	3301      	adds	r3, #1
 80003ec:	627b      	str	r3, [r7, #36]	; 0x24
 80003ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	429a      	cmp	r2, r3
 80003f4:	d3ee      	bcc.n	80003d4 <FlashReadN+0x68>
		}
		break;
 80003f6:	e03e      	b.n	8000476 <FlashReadN+0x10a>

	case DATA_TYPE_U32:
		for (uint32_t i = 0; i < Nsize; i++) {
 80003f8:	2300      	movs	r3, #0
 80003fa:	623b      	str	r3, [r7, #32]
 80003fc:	e00c      	b.n	8000418 <FlashReadN+0xac>
			*((uint32_t*) rdBuf + i) = *(uint32_t*) flashAddress;
 80003fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000400:	6a3b      	ldr	r3, [r7, #32]
 8000402:	009b      	lsls	r3, r3, #2
 8000404:	68b9      	ldr	r1, [r7, #8]
 8000406:	440b      	add	r3, r1
 8000408:	6812      	ldr	r2, [r2, #0]
 800040a:	601a      	str	r2, [r3, #0]
			flashAddress += 4;
 800040c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800040e:	3304      	adds	r3, #4
 8000410:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (uint32_t i = 0; i < Nsize; i++) {
 8000412:	6a3b      	ldr	r3, [r7, #32]
 8000414:	3301      	adds	r3, #1
 8000416:	623b      	str	r3, [r7, #32]
 8000418:	6a3a      	ldr	r2, [r7, #32]
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	429a      	cmp	r2, r3
 800041e:	d3ee      	bcc.n	80003fe <FlashReadN+0x92>
		}
		break;
 8000420:	e029      	b.n	8000476 <FlashReadN+0x10a>

	case DATA_TYPE_FLOAT:
		for (uint32_t i = 0; i < Nsize; i++) {
 8000422:	2300      	movs	r3, #0
 8000424:	61fb      	str	r3, [r7, #28]
 8000426:	e021      	b.n	800046c <FlashReadN+0x100>
			// Read the uint32_t byte
			FlashReadN(idx + 4 * i, rdBuf2, 1, DATA_TYPE_U32);
 8000428:	69fb      	ldr	r3, [r7, #28]
 800042a:	009a      	lsls	r2, r3, #2
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	18d0      	adds	r0, r2, r3
 8000430:	f107 0114 	add.w	r1, r7, #20
 8000434:	2302      	movs	r3, #2
 8000436:	2201      	movs	r2, #1
 8000438:	f7ff ff98 	bl	800036c <FlashReadN>
			// Convert uint32_t -> float
			convert.uint8_values[0] = rdBuf2[0] >> 24;
 800043c:	697b      	ldr	r3, [r7, #20]
 800043e:	0e1b      	lsrs	r3, r3, #24
 8000440:	b2db      	uxtb	r3, r3
 8000442:	763b      	strb	r3, [r7, #24]
			convert.uint8_values[1] = rdBuf2[1] >> 16;
 8000444:	69bb      	ldr	r3, [r7, #24]
 8000446:	0c1b      	lsrs	r3, r3, #16
 8000448:	b2db      	uxtb	r3, r3
 800044a:	767b      	strb	r3, [r7, #25]
			convert.uint8_values[2] = rdBuf2[2] >> 8;
 800044c:	69fb      	ldr	r3, [r7, #28]
 800044e:	0a1b      	lsrs	r3, r3, #8
 8000450:	b2db      	uxtb	r3, r3
 8000452:	76bb      	strb	r3, [r7, #26]
			convert.uint8_values[3] = rdBuf2[3];
 8000454:	6a3b      	ldr	r3, [r7, #32]
 8000456:	b2db      	uxtb	r3, r3
 8000458:	76fb      	strb	r3, [r7, #27]
			*((float*) rdBuf + i) = convert.float_value;
 800045a:	69fb      	ldr	r3, [r7, #28]
 800045c:	009b      	lsls	r3, r3, #2
 800045e:	68ba      	ldr	r2, [r7, #8]
 8000460:	4413      	add	r3, r2
 8000462:	69ba      	ldr	r2, [r7, #24]
 8000464:	601a      	str	r2, [r3, #0]
		for (uint32_t i = 0; i < Nsize; i++) {
 8000466:	69fb      	ldr	r3, [r7, #28]
 8000468:	3301      	adds	r3, #1
 800046a:	61fb      	str	r3, [r7, #28]
 800046c:	69fa      	ldr	r2, [r7, #28]
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	429a      	cmp	r2, r3
 8000472:	d3d9      	bcc.n	8000428 <FlashReadN+0xbc>
		}
		break;
 8000474:	bf00      	nop
	}
}
 8000476:	bf00      	nop
 8000478:	3734      	adds	r7, #52	; 0x34
 800047a:	46bd      	mov	sp, r7
 800047c:	bd90      	pop	{r4, r7, pc}
 800047e:	bf00      	nop
 8000480:	2000002c 	.word	0x2000002c

08000484 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800048a:	f001 fcf1 	bl	8001e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800048e:	f000 f911 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000492:	f000 fe71 	bl	8001178 <MX_GPIO_Init>
  MX_DMA_Init();
 8000496:	f000 fe49 	bl	800112c <MX_DMA_Init>
  MX_ADC1_Init();
 800049a:	f000 f969 	bl	8000770 <MX_ADC1_Init>
  MX_DAC1_Init();
 800049e:	f000 f9cf 	bl	8000840 <MX_DAC1_Init>
  MX_DAC2_Init();
 80004a2:	f000 fa03 	bl	80008ac <MX_DAC2_Init>
  MX_SDADC1_Init();
 80004a6:	f000 fa2b 	bl	8000900 <MX_SDADC1_Init>
  MX_SDADC3_Init();
 80004aa:	f000 fadd 	bl	8000a68 <MX_SDADC3_Init>
  MX_TIM2_Init();
 80004ae:	f000 fb79 	bl	8000ba4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80004b2:	f000 fbed 	bl	8000c90 <MX_TIM3_Init>
  MX_TIM4_Init();
 80004b6:	f000 fc6d 	bl	8000d94 <MX_TIM4_Init>
  MX_TIM5_Init();
 80004ba:	f000 fcf7 	bl	8000eac <MX_TIM5_Init>
  MX_USART1_UART_Init();
 80004be:	f000 fe05 	bl	80010cc <MX_USART1_UART_Init>
  MX_TIM19_Init();
 80004c2:	f000 fdb5 	bl	8001030 <MX_TIM19_Init>
  MX_TIM6_Init();
 80004c6:	f000 fd7d 	bl	8000fc4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

	// DMA UART
	uint8_t RX_DATA_element_size = sizeof(RX_DATA);
 80004ca:	2319      	movs	r3, #25
 80004cc:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Receive_DMA(&huart1, RX_DATA, RX_DATA_element_size);
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	b29b      	uxth	r3, r3
 80004d2:	461a      	mov	r2, r3
 80004d4:	4962      	ldr	r1, [pc, #392]	; (8000660 <main+0x1dc>)
 80004d6:	4863      	ldr	r0, [pc, #396]	; (8000664 <main+0x1e0>)
 80004d8:	f005 fe7e 	bl	80061d8 <HAL_UART_Receive_DMA>

	// TIM Trig
	HAL_TIM_Base_Start(&htim6); // For DAC
 80004dc:	4862      	ldr	r0, [pc, #392]	; (8000668 <main+0x1e4>)
 80004de:	f004 ff79 	bl	80053d4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim19); // For ADC
 80004e2:	4862      	ldr	r0, [pc, #392]	; (800066c <main+0x1e8>)
 80004e4:	f004 ff76 	bl	80053d4 <HAL_TIM_Base_Start>

	// DMA ADC
	uint8_t ADC_element_size = sizeof(ADC_VALUES) / sizeof(ADC_VALUES[0]);
 80004e8:	2304      	movs	r3, #4
 80004ea:	71bb      	strb	r3, [r7, #6]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC_VALUES, ADC_element_size);
 80004ec:	79bb      	ldrb	r3, [r7, #6]
 80004ee:	461a      	mov	r2, r3
 80004f0:	495f      	ldr	r1, [pc, #380]	; (8000670 <main+0x1ec>)
 80004f2:	4860      	ldr	r0, [pc, #384]	; (8000674 <main+0x1f0>)
 80004f4:	f001 fe3a 	bl	800216c <HAL_ADC_Start_DMA>

	// IT SD ADC
	HAL_SDADC_Start_IT(&hsdadc1);
 80004f8:	485f      	ldr	r0, [pc, #380]	; (8000678 <main+0x1f4>)
 80004fa:	f004 fce2 	bl	8004ec2 <HAL_SDADC_Start_IT>
	HAL_SDADC_Start_IT(&hsdadc3);
 80004fe:	485f      	ldr	r0, [pc, #380]	; (800067c <main+0x1f8>)
 8000500:	f004 fcdf 	bl	8004ec2 <HAL_SDADC_Start_IT>

	// DAC
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 8000504:	2100      	movs	r1, #0
 8000506:	485e      	ldr	r0, [pc, #376]	; (8000680 <main+0x1fc>)
 8000508:	f002 f9fa 	bl	8002900 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 800050c:	2110      	movs	r1, #16
 800050e:	485c      	ldr	r0, [pc, #368]	; (8000680 <main+0x1fc>)
 8000510:	f002 f9f6 	bl	8002900 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac2, DAC1_CHANNEL_1);
 8000514:	2100      	movs	r1, #0
 8000516:	485b      	ldr	r0, [pc, #364]	; (8000684 <main+0x200>)
 8000518:	f002 f9f2 	bl	8002900 <HAL_DAC_Start>

	// PWM
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800051c:	2100      	movs	r1, #0
 800051e:	485a      	ldr	r0, [pc, #360]	; (8000688 <main+0x204>)
 8000520:	f005 f812 	bl	8005548 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000524:	2100      	movs	r1, #0
 8000526:	4859      	ldr	r0, [pc, #356]	; (800068c <main+0x208>)
 8000528:	f005 f80e 	bl	8005548 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800052c:	2104      	movs	r1, #4
 800052e:	4857      	ldr	r0, [pc, #348]	; (800068c <main+0x208>)
 8000530:	f005 f80a 	bl	8005548 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000534:	2100      	movs	r1, #0
 8000536:	4856      	ldr	r0, [pc, #344]	; (8000690 <main+0x20c>)
 8000538:	f005 f806 	bl	8005548 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800053c:	2104      	movs	r1, #4
 800053e:	4854      	ldr	r0, [pc, #336]	; (8000690 <main+0x20c>)
 8000540:	f005 f802 	bl	8005548 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000544:	210c      	movs	r1, #12
 8000546:	4852      	ldr	r0, [pc, #328]	; (8000690 <main+0x20c>)
 8000548:	f004 fffe 	bl	8005548 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 800054c:	2100      	movs	r1, #0
 800054e:	4851      	ldr	r0, [pc, #324]	; (8000694 <main+0x210>)
 8000550:	f004 fffa 	bl	8005548 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8000554:	2104      	movs	r1, #4
 8000556:	484f      	ldr	r0, [pc, #316]	; (8000694 <main+0x210>)
 8000558:	f004 fff6 	bl	8005548 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 800055c:	2108      	movs	r1, #8
 800055e:	484d      	ldr	r0, [pc, #308]	; (8000694 <main+0x210>)
 8000560:	f004 fff2 	bl	8005548 <HAL_TIM_PWM_Start>

	// Set the PWM timers
	FlashSetAddrs(0x0803F800);
 8000564:	484c      	ldr	r0, [pc, #304]	; (8000698 <main+0x214>)
 8000566:	f7ff fe4b 	bl	8000200 <FlashSetAddrs>
	read_PWM_TIM_prescalers_from_memory();
 800056a:	f001 f81b 	bl	80015a4 <read_PWM_TIM_prescalers_from_memory>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		// TIM 2
		htim2.Instance->CCR1 = PWM_PERIOD[4]; // P4
 800056e:	4b4b      	ldr	r3, [pc, #300]	; (800069c <main+0x218>)
 8000570:	891a      	ldrh	r2, [r3, #8]
 8000572:	4b45      	ldr	r3, [pc, #276]	; (8000688 <main+0x204>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	635a      	str	r2, [r3, #52]	; 0x34
		// TIM 3
		htim3.Instance->CCR1 = PWM_PERIOD[5]; // P5
 8000578:	4b48      	ldr	r3, [pc, #288]	; (800069c <main+0x218>)
 800057a:	895a      	ldrh	r2, [r3, #10]
 800057c:	4b43      	ldr	r3, [pc, #268]	; (800068c <main+0x208>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	635a      	str	r2, [r3, #52]	; 0x34
		htim3.Instance->CCR2 = PWM_PERIOD[6]; // P6
 8000582:	4b46      	ldr	r3, [pc, #280]	; (800069c <main+0x218>)
 8000584:	899a      	ldrh	r2, [r3, #12]
 8000586:	4b41      	ldr	r3, [pc, #260]	; (800068c <main+0x208>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	639a      	str	r2, [r3, #56]	; 0x38
		// TIM 4
		htim4.Instance->CCR1 = PWM_PERIOD[7]; // P7
 800058c:	4b43      	ldr	r3, [pc, #268]	; (800069c <main+0x218>)
 800058e:	89da      	ldrh	r2, [r3, #14]
 8000590:	4b3f      	ldr	r3, [pc, #252]	; (8000690 <main+0x20c>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	635a      	str	r2, [r3, #52]	; 0x34
		htim4.Instance->CCR2 = PWM_PERIOD[8]; // P8
 8000596:	4b41      	ldr	r3, [pc, #260]	; (800069c <main+0x218>)
 8000598:	8a1a      	ldrh	r2, [r3, #16]
 800059a:	4b3d      	ldr	r3, [pc, #244]	; (8000690 <main+0x20c>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	639a      	str	r2, [r3, #56]	; 0x38
		htim4.Instance->CCR4 = PWM_PERIOD[3]; // P3
 80005a0:	4b3e      	ldr	r3, [pc, #248]	; (800069c <main+0x218>)
 80005a2:	88da      	ldrh	r2, [r3, #6]
 80005a4:	4b3a      	ldr	r3, [pc, #232]	; (8000690 <main+0x20c>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	641a      	str	r2, [r3, #64]	; 0x40
		// TIM 5
		htim5.Instance->CCR1 = PWM_PERIOD[0]; // P0
 80005aa:	4b3c      	ldr	r3, [pc, #240]	; (800069c <main+0x218>)
 80005ac:	881a      	ldrh	r2, [r3, #0]
 80005ae:	4b39      	ldr	r3, [pc, #228]	; (8000694 <main+0x210>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	635a      	str	r2, [r3, #52]	; 0x34
		htim5.Instance->CCR2 = PWM_PERIOD[1]; // P1
 80005b4:	4b39      	ldr	r3, [pc, #228]	; (800069c <main+0x218>)
 80005b6:	885a      	ldrh	r2, [r3, #2]
 80005b8:	4b36      	ldr	r3, [pc, #216]	; (8000694 <main+0x210>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	639a      	str	r2, [r3, #56]	; 0x38
		htim5.Instance->CCR3 = PWM_PERIOD[2]; // P2
 80005be:	4b37      	ldr	r3, [pc, #220]	; (800069c <main+0x218>)
 80005c0:	889a      	ldrh	r2, [r3, #4]
 80005c2:	4b34      	ldr	r3, [pc, #208]	; (8000694 <main+0x210>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	63da      	str	r2, [r3, #60]	; 0x3c
		// DAC 1
		HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUTPUT[2]); // D2
 80005c8:	4b35      	ldr	r3, [pc, #212]	; (80006a0 <main+0x21c>)
 80005ca:	889b      	ldrh	r3, [r3, #4]
 80005cc:	2200      	movs	r2, #0
 80005ce:	2100      	movs	r1, #0
 80005d0:	482b      	ldr	r0, [pc, #172]	; (8000680 <main+0x1fc>)
 80005d2:	f002 f970 	bl	80028b6 <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, DAC_OUTPUT[1]); // D1
 80005d6:	4b32      	ldr	r3, [pc, #200]	; (80006a0 <main+0x21c>)
 80005d8:	885b      	ldrh	r3, [r3, #2]
 80005da:	2200      	movs	r2, #0
 80005dc:	2110      	movs	r1, #16
 80005de:	4828      	ldr	r0, [pc, #160]	; (8000680 <main+0x1fc>)
 80005e0:	f002 f969 	bl	80028b6 <HAL_DAC_SetValue>
		// DAC 2
		HAL_DAC_SetValue(&hdac2, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUTPUT[0]); // D0
 80005e4:	4b2e      	ldr	r3, [pc, #184]	; (80006a0 <main+0x21c>)
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	2200      	movs	r2, #0
 80005ea:	2100      	movs	r1, #0
 80005ec:	4825      	ldr	r0, [pc, #148]	; (8000684 <main+0x200>)
 80005ee:	f002 f962 	bl	80028b6 <HAL_DAC_SetValue>
		// DI
		DI_VALUES[0] = HAL_GPIO_ReadPin(INPUT_0_GPIO_Port, INPUT_0_Pin); // I0
 80005f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005f6:	482b      	ldr	r0, [pc, #172]	; (80006a4 <main+0x220>)
 80005f8:	f002 ff20 	bl	800343c <HAL_GPIO_ReadPin>
 80005fc:	4603      	mov	r3, r0
 80005fe:	b29a      	uxth	r2, r3
 8000600:	4b29      	ldr	r3, [pc, #164]	; (80006a8 <main+0x224>)
 8000602:	801a      	strh	r2, [r3, #0]
		DI_VALUES[1] = HAL_GPIO_ReadPin(INPUT_1_GPIO_Port, INPUT_1_Pin); // I1
 8000604:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000608:	4826      	ldr	r0, [pc, #152]	; (80006a4 <main+0x220>)
 800060a:	f002 ff17 	bl	800343c <HAL_GPIO_ReadPin>
 800060e:	4603      	mov	r3, r0
 8000610:	b29a      	uxth	r2, r3
 8000612:	4b25      	ldr	r3, [pc, #148]	; (80006a8 <main+0x224>)
 8000614:	805a      	strh	r2, [r3, #2]
		DI_VALUES[2] = HAL_GPIO_ReadPin(INPUT_2_GPIO_Port, INPUT_2_Pin); // I2
 8000616:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800061a:	4822      	ldr	r0, [pc, #136]	; (80006a4 <main+0x220>)
 800061c:	f002 ff0e 	bl	800343c <HAL_GPIO_ReadPin>
 8000620:	4603      	mov	r3, r0
 8000622:	b29a      	uxth	r2, r3
 8000624:	4b20      	ldr	r3, [pc, #128]	; (80006a8 <main+0x224>)
 8000626:	809a      	strh	r2, [r3, #4]
		DI_VALUES[3] = HAL_GPIO_ReadPin(INPUT_3_GPIO_Port, INPUT_3_Pin); // I3
 8000628:	f44f 7100 	mov.w	r1, #512	; 0x200
 800062c:	481f      	ldr	r0, [pc, #124]	; (80006ac <main+0x228>)
 800062e:	f002 ff05 	bl	800343c <HAL_GPIO_ReadPin>
 8000632:	4603      	mov	r3, r0
 8000634:	b29a      	uxth	r2, r3
 8000636:	4b1c      	ldr	r3, [pc, #112]	; (80006a8 <main+0x224>)
 8000638:	80da      	strh	r2, [r3, #6]
		DI_VALUES[4] = HAL_GPIO_ReadPin(INPUT_4_GPIO_Port, INPUT_4_Pin); // I4
 800063a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800063e:	481b      	ldr	r0, [pc, #108]	; (80006ac <main+0x228>)
 8000640:	f002 fefc 	bl	800343c <HAL_GPIO_ReadPin>
 8000644:	4603      	mov	r3, r0
 8000646:	b29a      	uxth	r2, r3
 8000648:	4b17      	ldr	r3, [pc, #92]	; (80006a8 <main+0x224>)
 800064a:	811a      	strh	r2, [r3, #8]
		DI_VALUES[5] = HAL_GPIO_ReadPin(INPUT_5_GPIO_Port, INPUT_5_Pin); // I5
 800064c:	2180      	movs	r1, #128	; 0x80
 800064e:	4818      	ldr	r0, [pc, #96]	; (80006b0 <main+0x22c>)
 8000650:	f002 fef4 	bl	800343c <HAL_GPIO_ReadPin>
 8000654:	4603      	mov	r3, r0
 8000656:	b29a      	uxth	r2, r3
 8000658:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <main+0x224>)
 800065a:	815a      	strh	r2, [r3, #10]
		htim2.Instance->CCR1 = PWM_PERIOD[4]; // P4
 800065c:	e787      	b.n	800056e <main+0xea>
 800065e:	bf00      	nop
 8000660:	20000030 	.word	0x20000030
 8000664:	20000274 	.word	0x20000274
 8000668:	20000380 	.word	0x20000380
 800066c:	2000011c 	.word	0x2000011c
 8000670:	20000080 	.word	0x20000080
 8000674:	20000200 	.word	0x20000200
 8000678:	200002f8 	.word	0x200002f8
 800067c:	20000418 	.word	0x20000418
 8000680:	20000108 	.word	0x20000108
 8000684:	200000a8 	.word	0x200000a8
 8000688:	200003cc 	.word	0x200003cc
 800068c:	200001b4 	.word	0x200001b4
 8000690:	200000bc 	.word	0x200000bc
 8000694:	20000168 	.word	0x20000168
 8000698:	0803f800 	.word	0x0803f800
 800069c:	20000064 	.word	0x20000064
 80006a0:	20000078 	.word	0x20000078
 80006a4:	48000800 	.word	0x48000800
 80006a8:	20000094 	.word	0x20000094
 80006ac:	48000400 	.word	0x48000400
 80006b0:	48001400 	.word	0x48001400

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b09a      	sub	sp, #104	; 0x68
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006be:	2228      	movs	r2, #40	; 0x28
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f006 fa40 	bl	8006b48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006d8:	463b      	mov	r3, r7
 80006da:	222c      	movs	r2, #44	; 0x2c
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f006 fa32 	bl	8006b48 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e4:	2301      	movs	r3, #1
 80006e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006ee:	2300      	movs	r3, #0
 80006f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006f6:	4618      	mov	r0, r3
 80006f8:	f002 fed8 	bl	80034ac <HAL_RCC_OscConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0x52>
  {
    Error_Handler();
 8000702:	f000 ffc3 	bl	800168c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000706:	230f      	movs	r3, #15
 8000708:	62fb      	str	r3, [r7, #44]	; 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800070a:	2301      	movs	r3, #1
 800070c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8000712:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000716:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800071c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f003 fdca 	bl	80042bc <HAL_RCC_ClockConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800072e:	f000 ffad 	bl	800168c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC1
 8000732:	f640 0381 	movw	r3, #2177	; 0x881
 8000736:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SDADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000738:	2300      	movs	r3, #0
 800073a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.SdadcClockSelection = RCC_SDADCSYSCLK_DIV4;
 800073c:	f04f 4308 	mov.w	r3, #2281701376	; 0x88000000
 8000740:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PCLK2_DIV2;
 8000742:	2300      	movs	r3, #0
 8000744:	61fb      	str	r3, [r7, #28]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000746:	463b      	mov	r3, r7
 8000748:	4618      	mov	r0, r3
 800074a:	f003 ffef 	bl	800472c <HAL_RCCEx_PeriphCLKConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000754:	f000 ff9a 	bl	800168c <Error_Handler>
  }
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG1);
 8000758:	f44f 7000 	mov.w	r0, #512	; 0x200
 800075c:	f002 fe86 	bl	800346c <HAL_PWREx_EnableSDADC>
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG3);
 8000760:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000764:	f002 fe82 	bl	800346c <HAL_PWREx_EnableSDADC>
}
 8000768:	bf00      	nop
 800076a:	3768      	adds	r7, #104	; 0x68
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000780:	4b2d      	ldr	r3, [pc, #180]	; (8000838 <MX_ADC1_Init+0xc8>)
 8000782:	4a2e      	ldr	r2, [pc, #184]	; (800083c <MX_ADC1_Init+0xcc>)
 8000784:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000786:	4b2c      	ldr	r3, [pc, #176]	; (8000838 <MX_ADC1_Init+0xc8>)
 8000788:	f44f 7280 	mov.w	r2, #256	; 0x100
 800078c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800078e:	4b2a      	ldr	r3, [pc, #168]	; (8000838 <MX_ADC1_Init+0xc8>)
 8000790:	2201      	movs	r2, #1
 8000792:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000794:	4b28      	ldr	r3, [pc, #160]	; (8000838 <MX_ADC1_Init+0xc8>)
 8000796:	2200      	movs	r2, #0
 8000798:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T19_TRGO;
 800079a:	4b27      	ldr	r3, [pc, #156]	; (8000838 <MX_ADC1_Init+0xc8>)
 800079c:	2200      	movs	r2, #0
 800079e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007a0:	4b25      	ldr	r3, [pc, #148]	; (8000838 <MX_ADC1_Init+0xc8>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 80007a6:	4b24      	ldr	r3, [pc, #144]	; (8000838 <MX_ADC1_Init+0xc8>)
 80007a8:	2204      	movs	r2, #4
 80007aa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ac:	4822      	ldr	r0, [pc, #136]	; (8000838 <MX_ADC1_Init+0xc8>)
 80007ae:	f001 fc05 	bl	8001fbc <HAL_ADC_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80007b8:	f000 ff68 	bl	800168c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007bc:	2300      	movs	r3, #0
 80007be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007c0:	2301      	movs	r3, #1
 80007c2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80007c4:	2307      	movs	r3, #7
 80007c6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	4619      	mov	r1, r3
 80007cc:	481a      	ldr	r0, [pc, #104]	; (8000838 <MX_ADC1_Init+0xc8>)
 80007ce:	f001 fd5d 	bl	800228c <HAL_ADC_ConfigChannel>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80007d8:	f000 ff58 	bl	800168c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007dc:	2301      	movs	r3, #1
 80007de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007e0:	2302      	movs	r3, #2
 80007e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	4619      	mov	r1, r3
 80007e8:	4813      	ldr	r0, [pc, #76]	; (8000838 <MX_ADC1_Init+0xc8>)
 80007ea:	f001 fd4f 	bl	800228c <HAL_ADC_ConfigChannel>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80007f4:	f000 ff4a 	bl	800168c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80007f8:	2302      	movs	r3, #2
 80007fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80007fc:	2303      	movs	r3, #3
 80007fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	4619      	mov	r1, r3
 8000804:	480c      	ldr	r0, [pc, #48]	; (8000838 <MX_ADC1_Init+0xc8>)
 8000806:	f001 fd41 	bl	800228c <HAL_ADC_ConfigChannel>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 8000810:	f000 ff3c 	bl	800168c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000814:	2303      	movs	r3, #3
 8000816:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000818:	2304      	movs	r3, #4
 800081a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	4619      	mov	r1, r3
 8000820:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_ADC1_Init+0xc8>)
 8000822:	f001 fd33 	bl	800228c <HAL_ADC_ConfigChannel>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 800082c:	f000 ff2e 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000830:	bf00      	nop
 8000832:	3710      	adds	r7, #16
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000200 	.word	0x20000200
 800083c:	40012400 	.word	0x40012400

08000840 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000850:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <MX_DAC1_Init+0x64>)
 8000852:	4a15      	ldr	r2, [pc, #84]	; (80008a8 <MX_DAC1_Init+0x68>)
 8000854:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000856:	4813      	ldr	r0, [pc, #76]	; (80008a4 <MX_DAC1_Init+0x64>)
 8000858:	f002 f80b 	bl	8002872 <HAL_DAC_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8000862:	f000 ff13 	bl	800168c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000866:	2304      	movs	r3, #4
 8000868:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800086a:	2300      	movs	r3, #0
 800086c:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	2200      	movs	r2, #0
 8000872:	4619      	mov	r1, r3
 8000874:	480b      	ldr	r0, [pc, #44]	; (80008a4 <MX_DAC1_Init+0x64>)
 8000876:	f002 f88e 	bl	8002996 <HAL_DAC_ConfigChannel>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8000880:	f000 ff04 	bl	800168c <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2210      	movs	r2, #16
 8000888:	4619      	mov	r1, r3
 800088a:	4806      	ldr	r0, [pc, #24]	; (80008a4 <MX_DAC1_Init+0x64>)
 800088c:	f002 f883 	bl	8002996 <HAL_DAC_ConfigChannel>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_DAC1_Init+0x5a>
  {
    Error_Handler();
 8000896:	f000 fef9 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000108 	.word	0x20000108
 80008a8:	40007400 	.word	0x40007400

080008ac <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC2_Init 1 */

  /* USER CODE END DAC2_Init 1 */
  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 80008bc:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_DAC2_Init+0x4c>)
 80008be:	4a0f      	ldr	r2, [pc, #60]	; (80008fc <MX_DAC2_Init+0x50>)
 80008c0:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80008c2:	480d      	ldr	r0, [pc, #52]	; (80008f8 <MX_DAC2_Init+0x4c>)
 80008c4:	f001 ffd5 	bl	8002872 <HAL_DAC_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_DAC2_Init+0x26>
  {
    Error_Handler();
 80008ce:	f000 fedd 	bl	800168c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80008d2:	2304      	movs	r3, #4
 80008d4:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80008d6:	2300      	movs	r3, #0
 80008d8:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	2200      	movs	r2, #0
 80008de:	4619      	mov	r1, r3
 80008e0:	4805      	ldr	r0, [pc, #20]	; (80008f8 <MX_DAC2_Init+0x4c>)
 80008e2:	f002 f858 	bl	8002996 <HAL_DAC_ConfigChannel>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_DAC2_Init+0x44>
  {
    Error_Handler();
 80008ec:	f000 fece 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	3710      	adds	r7, #16
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	200000a8 	.word	0x200000a8
 80008fc:	40009800 	.word	0x40009800

08000900 <MX_SDADC1_Init>:
  * @brief SDADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDADC1_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SDADC1_Init 0 */

  /* USER CODE END SDADC1_Init 0 */

  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 8000906:	463b      	mov	r3, r7
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]

  /* USER CODE END SDADC1_Init 1 */
  /** Configure the SDADC low power mode, fast conversion mode,
  slow clock mode and SDADC1 reference voltage
  */
  hsdadc1.Instance = SDADC1;
 8000912:	4b4f      	ldr	r3, [pc, #316]	; (8000a50 <MX_SDADC1_Init+0x150>)
 8000914:	4a4f      	ldr	r2, [pc, #316]	; (8000a54 <MX_SDADC1_Init+0x154>)
 8000916:	601a      	str	r2, [r3, #0]
  hsdadc1.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 8000918:	4b4d      	ldr	r3, [pc, #308]	; (8000a50 <MX_SDADC1_Init+0x150>)
 800091a:	2200      	movs	r2, #0
 800091c:	605a      	str	r2, [r3, #4]
  hsdadc1.Init.FastConversionMode = SDADC_FAST_CONV_DISABLE;
 800091e:	4b4c      	ldr	r3, [pc, #304]	; (8000a50 <MX_SDADC1_Init+0x150>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  hsdadc1.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 8000924:	4b4a      	ldr	r3, [pc, #296]	; (8000a50 <MX_SDADC1_Init+0x150>)
 8000926:	2200      	movs	r2, #0
 8000928:	60da      	str	r2, [r3, #12]
  hsdadc1.Init.ReferenceVoltage = SDADC_VREF_VDDA;
 800092a:	4b49      	ldr	r3, [pc, #292]	; (8000a50 <MX_SDADC1_Init+0x150>)
 800092c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000930:	611a      	str	r2, [r3, #16]
  hsdadc1.InjectedTrigger = SDADC_SOFTWARE_TRIGGER;
 8000932:	4b47      	ldr	r3, [pc, #284]	; (8000a50 <MX_SDADC1_Init+0x150>)
 8000934:	2200      	movs	r2, #0
 8000936:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SDADC_Init(&hsdadc1) != HAL_OK)
 8000938:	4845      	ldr	r0, [pc, #276]	; (8000a50 <MX_SDADC1_Init+0x150>)
 800093a:	f004 f86b 	bl	8004a14 <HAL_SDADC_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_SDADC1_Init+0x48>
  {
    Error_Handler();
 8000944:	f000 fea2 	bl	800168c <Error_Handler>
  }
  /** Configure the Injected Mode
  */
  if (HAL_SDADC_SelectInjectedDelay(&hsdadc1, SDADC_INJECTED_DELAY) != HAL_OK)
 8000948:	2140      	movs	r1, #64	; 0x40
 800094a:	4841      	ldr	r0, [pc, #260]	; (8000a50 <MX_SDADC1_Init+0x150>)
 800094c:	f004 f9de 	bl	8004d0c <HAL_SDADC_SelectInjectedDelay>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_SDADC1_Init+0x5a>
  {
    Error_Handler();
 8000956:	f000 fe99 	bl	800168c <Error_Handler>
  }
  if (HAL_SDADC_SelectInjectedTrigger(&hsdadc1, SDADC_SOFTWARE_TRIGGER) != HAL_OK)
 800095a:	2100      	movs	r1, #0
 800095c:	483c      	ldr	r0, [pc, #240]	; (8000a50 <MX_SDADC1_Init+0x150>)
 800095e:	f004 f9a5 	bl	8004cac <HAL_SDADC_SelectInjectedTrigger>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_SDADC1_Init+0x6c>
  {
    Error_Handler();
 8000968:	f000 fe90 	bl	800168c <Error_Handler>
  }
  if (HAL_SDADC_InjectedConfigChannel(&hsdadc1, SDADC_CHANNEL_4|SDADC_CHANNEL_8
 800096c:	2201      	movs	r2, #1
 800096e:	493a      	ldr	r1, [pc, #232]	; (8000a58 <MX_SDADC1_Init+0x158>)
 8000970:	4837      	ldr	r0, [pc, #220]	; (8000a50 <MX_SDADC1_Init+0x150>)
 8000972:	f004 f95f 	bl	8004c34 <HAL_SDADC_InjectedConfigChannel>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_SDADC1_Init+0x80>
                              |SDADC_CHANNEL_6, SDADC_CONTINUOUS_CONV_ON) != HAL_OK)
  {
    Error_Handler();
 800097c:	f000 fe86 	bl	800168c <Error_Handler>
  }
  /** Set parameters for SDADC configuration 0 Register
  */
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_ZERO_REFERENCE;
 8000980:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8000984:	603b      	str	r3, [r7, #0]
  ConfParamStruct.Gain = SDADC_GAIN_1;
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
  ConfParamStruct.CommonMode = SDADC_COMMON_MODE_VSSA;
 800098a:	2300      	movs	r3, #0
 800098c:	60bb      	str	r3, [r7, #8]
  ConfParamStruct.Offset = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc1, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 8000992:	463b      	mov	r3, r7
 8000994:	461a      	mov	r2, r3
 8000996:	2100      	movs	r1, #0
 8000998:	482d      	ldr	r0, [pc, #180]	; (8000a50 <MX_SDADC1_Init+0x150>)
 800099a:	f004 f8bf 	bl	8004b1c <HAL_SDADC_PrepareChannelConfig>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_SDADC1_Init+0xa8>
  {
    Error_Handler();
 80009a4:	f000 fe72 	bl	800168c <Error_Handler>
  }
  /** Set parameters for SDADC configuration 1 Register
  */
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_DIFF;
 80009a8:	2300      	movs	r3, #0
 80009aa:	603b      	str	r3, [r7, #0]
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc1, SDADC_CONF_INDEX_1, &ConfParamStruct) != HAL_OK)
 80009ac:	463b      	mov	r3, r7
 80009ae:	461a      	mov	r2, r3
 80009b0:	2101      	movs	r1, #1
 80009b2:	4827      	ldr	r0, [pc, #156]	; (8000a50 <MX_SDADC1_Init+0x150>)
 80009b4:	f004 f8b2 	bl	8004b1c <HAL_SDADC_PrepareChannelConfig>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_SDADC1_Init+0xc2>
  {
    Error_Handler();
 80009be:	f000 fe65 	bl	800168c <Error_Handler>
  }
  /** Configure the Injected Channel
  */
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_4, SDADC_CONF_INDEX_0) != HAL_OK)
 80009c2:	2200      	movs	r2, #0
 80009c4:	4925      	ldr	r1, [pc, #148]	; (8000a5c <MX_SDADC1_Init+0x15c>)
 80009c6:	4822      	ldr	r0, [pc, #136]	; (8000a50 <MX_SDADC1_Init+0x150>)
 80009c8:	f004 f8e4 	bl	8004b94 <HAL_SDADC_AssociateChannelConfig>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_SDADC1_Init+0xd6>
  {
    Error_Handler();
 80009d2:	f000 fe5b 	bl	800168c <Error_Handler>
  }
  /** Configure the Injected Channel
  */
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_8, SDADC_CONF_INDEX_1) != HAL_OK)
 80009d6:	2201      	movs	r2, #1
 80009d8:	4921      	ldr	r1, [pc, #132]	; (8000a60 <MX_SDADC1_Init+0x160>)
 80009da:	481d      	ldr	r0, [pc, #116]	; (8000a50 <MX_SDADC1_Init+0x150>)
 80009dc:	f004 f8da 	bl	8004b94 <HAL_SDADC_AssociateChannelConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_SDADC1_Init+0xea>
  {
    Error_Handler();
 80009e6:	f000 fe51 	bl	800168c <Error_Handler>
  }
  /** Configure the Injected Channel
  */
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_6, SDADC_CONF_INDEX_1) != HAL_OK)
 80009ea:	2201      	movs	r2, #1
 80009ec:	491d      	ldr	r1, [pc, #116]	; (8000a64 <MX_SDADC1_Init+0x164>)
 80009ee:	4818      	ldr	r0, [pc, #96]	; (8000a50 <MX_SDADC1_Init+0x150>)
 80009f0:	f004 f8d0 	bl	8004b94 <HAL_SDADC_AssociateChannelConfig>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_SDADC1_Init+0xfe>
  {
    Error_Handler();
 80009fa:	f000 fe47 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN SDADC1_Init 2 */

	// Multi mode for SDADC1 and SDADC3
	if (HAL_SDADC_InjectedMultiModeConfigChannel(&hsdadc1, SDADC_MULTIMODE_SDADC1_SDADC3) != HAL_OK)
 80009fe:	2101      	movs	r1, #1
 8000a00:	4813      	ldr	r0, [pc, #76]	; (8000a50 <MX_SDADC1_Init+0x150>)
 8000a02:	f004 f9b7 	bl	8004d74 <HAL_SDADC_InjectedMultiModeConfigChannel>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_SDADC1_Init+0x110>
	{
		Error_Handler();
 8000a0c:	f000 fe3e 	bl	800168c <Error_Handler>
	}

	// Calibration
	if (HAL_SDADC_CalibrationStart(&hsdadc1, SDADC_CALIBRATION_SEQ_1) != HAL_OK) {
 8000a10:	2100      	movs	r1, #0
 8000a12:	480f      	ldr	r0, [pc, #60]	; (8000a50 <MX_SDADC1_Init+0x150>)
 8000a14:	f004 f9dc 	bl	8004dd0 <HAL_SDADC_CalibrationStart>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_SDADC1_Init+0x122>
		Error_Handler();
 8000a1e:	f000 fe35 	bl	800168c <Error_Handler>
	}

	// Pool for the end of calibration
	if (HAL_SDADC_PollForCalibEvent(&hsdadc1, HAL_MAX_DELAY) != HAL_OK) {
 8000a22:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a26:	480a      	ldr	r0, [pc, #40]	; (8000a50 <MX_SDADC1_Init+0x150>)
 8000a28:	f004 fa12 	bl	8004e50 <HAL_SDADC_PollForCalibEvent>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_SDADC1_Init+0x136>
		Error_Handler();
 8000a32:	f000 fe2b 	bl	800168c <Error_Handler>
	}

	// Start interrupt mode
	if (HAL_SDADC_InjectedStart_IT(&hsdadc1) != HAL_OK) {
 8000a36:	4806      	ldr	r0, [pc, #24]	; (8000a50 <MX_SDADC1_Init+0x150>)
 8000a38:	f004 fa66 	bl	8004f08 <HAL_SDADC_InjectedStart_IT>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_SDADC1_Init+0x146>
		Error_Handler();
 8000a42:	f000 fe23 	bl	800168c <Error_Handler>
	}
  /* USER CODE END SDADC1_Init 2 */

}
 8000a46:	bf00      	nop
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	200002f8 	.word	0x200002f8
 8000a54:	40016000 	.word	0x40016000
 8000a58:	000e0150 	.word	0x000e0150
 8000a5c:	00040010 	.word	0x00040010
 8000a60:	00080100 	.word	0x00080100
 8000a64:	00060040 	.word	0x00060040

08000a68 <MX_SDADC3_Init>:
  * @brief SDADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDADC3_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SDADC3_Init 0 */

  /* USER CODE END SDADC3_Init 0 */

  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 8000a6e:	463b      	mov	r3, r7
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]

  /* USER CODE END SDADC3_Init 1 */
  /** Configure the SDADC low power mode, fast conversion mode,
  slow clock mode and SDADC1 reference voltage
  */
  hsdadc3.Instance = SDADC3;
 8000a7a:	4b45      	ldr	r3, [pc, #276]	; (8000b90 <MX_SDADC3_Init+0x128>)
 8000a7c:	4a45      	ldr	r2, [pc, #276]	; (8000b94 <MX_SDADC3_Init+0x12c>)
 8000a7e:	601a      	str	r2, [r3, #0]
  hsdadc3.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 8000a80:	4b43      	ldr	r3, [pc, #268]	; (8000b90 <MX_SDADC3_Init+0x128>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	605a      	str	r2, [r3, #4]
  hsdadc3.Init.FastConversionMode = SDADC_FAST_CONV_DISABLE;
 8000a86:	4b42      	ldr	r3, [pc, #264]	; (8000b90 <MX_SDADC3_Init+0x128>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  hsdadc3.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 8000a8c:	4b40      	ldr	r3, [pc, #256]	; (8000b90 <MX_SDADC3_Init+0x128>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	60da      	str	r2, [r3, #12]
  hsdadc3.Init.ReferenceVoltage = SDADC_VREF_VDDA;
 8000a92:	4b3f      	ldr	r3, [pc, #252]	; (8000b90 <MX_SDADC3_Init+0x128>)
 8000a94:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a98:	611a      	str	r2, [r3, #16]
  hsdadc3.InjectedTrigger = SDADC_SOFTWARE_TRIGGER;
 8000a9a:	4b3d      	ldr	r3, [pc, #244]	; (8000b90 <MX_SDADC3_Init+0x128>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SDADC_Init(&hsdadc3) != HAL_OK)
 8000aa0:	483b      	ldr	r0, [pc, #236]	; (8000b90 <MX_SDADC3_Init+0x128>)
 8000aa2:	f003 ffb7 	bl	8004a14 <HAL_SDADC_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_SDADC3_Init+0x48>
  {
    Error_Handler();
 8000aac:	f000 fdee 	bl	800168c <Error_Handler>
  }
  /** Configure the Injected Mode
  */
  if (HAL_SDADC_SelectInjectedDelay(&hsdadc3, SDADC_INJECTED_DELAY) != HAL_OK)
 8000ab0:	2140      	movs	r1, #64	; 0x40
 8000ab2:	4837      	ldr	r0, [pc, #220]	; (8000b90 <MX_SDADC3_Init+0x128>)
 8000ab4:	f004 f92a 	bl	8004d0c <HAL_SDADC_SelectInjectedDelay>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_SDADC3_Init+0x5a>
  {
    Error_Handler();
 8000abe:	f000 fde5 	bl	800168c <Error_Handler>
  }
  if (HAL_SDADC_SelectInjectedTrigger(&hsdadc3, SDADC_SOFTWARE_TRIGGER) != HAL_OK)
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4832      	ldr	r0, [pc, #200]	; (8000b90 <MX_SDADC3_Init+0x128>)
 8000ac6:	f004 f8f1 	bl	8004cac <HAL_SDADC_SelectInjectedTrigger>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_SDADC3_Init+0x6c>
  {
    Error_Handler();
 8000ad0:	f000 fddc 	bl	800168c <Error_Handler>
  }
  if (HAL_SDADC_InjectedConfigChannel(&hsdadc3, SDADC_CHANNEL_6|SDADC_CHANNEL_8, SDADC_CONTINUOUS_CONV_ON) != HAL_OK)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	4930      	ldr	r1, [pc, #192]	; (8000b98 <MX_SDADC3_Init+0x130>)
 8000ad8:	482d      	ldr	r0, [pc, #180]	; (8000b90 <MX_SDADC3_Init+0x128>)
 8000ada:	f004 f8ab 	bl	8004c34 <HAL_SDADC_InjectedConfigChannel>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_SDADC3_Init+0x80>
  {
    Error_Handler();
 8000ae4:	f000 fdd2 	bl	800168c <Error_Handler>
  }
  /** Set parameters for SDADC configuration 0 Register
  */
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_ZERO_REFERENCE;
 8000ae8:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8000aec:	603b      	str	r3, [r7, #0]
  ConfParamStruct.Gain = SDADC_GAIN_1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
  ConfParamStruct.CommonMode = SDADC_COMMON_MODE_VSSA;
 8000af2:	2300      	movs	r3, #0
 8000af4:	60bb      	str	r3, [r7, #8]
  ConfParamStruct.Offset = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc3, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 8000afa:	463b      	mov	r3, r7
 8000afc:	461a      	mov	r2, r3
 8000afe:	2100      	movs	r1, #0
 8000b00:	4823      	ldr	r0, [pc, #140]	; (8000b90 <MX_SDADC3_Init+0x128>)
 8000b02:	f004 f80b 	bl	8004b1c <HAL_SDADC_PrepareChannelConfig>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_SDADC3_Init+0xa8>
  {
    Error_Handler();
 8000b0c:	f000 fdbe 	bl	800168c <Error_Handler>
  }
  /** Set parameters for SDADC configuration 1 Register
  */
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_DIFF;
 8000b10:	2300      	movs	r3, #0
 8000b12:	603b      	str	r3, [r7, #0]
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc3, SDADC_CONF_INDEX_1, &ConfParamStruct) != HAL_OK)
 8000b14:	463b      	mov	r3, r7
 8000b16:	461a      	mov	r2, r3
 8000b18:	2101      	movs	r1, #1
 8000b1a:	481d      	ldr	r0, [pc, #116]	; (8000b90 <MX_SDADC3_Init+0x128>)
 8000b1c:	f003 fffe 	bl	8004b1c <HAL_SDADC_PrepareChannelConfig>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_SDADC3_Init+0xc2>
  {
    Error_Handler();
 8000b26:	f000 fdb1 	bl	800168c <Error_Handler>
  }
  /** Configure the Injected Channel
  */
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc3, SDADC_CHANNEL_6, SDADC_CONF_INDEX_0) != HAL_OK)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	491b      	ldr	r1, [pc, #108]	; (8000b9c <MX_SDADC3_Init+0x134>)
 8000b2e:	4818      	ldr	r0, [pc, #96]	; (8000b90 <MX_SDADC3_Init+0x128>)
 8000b30:	f004 f830 	bl	8004b94 <HAL_SDADC_AssociateChannelConfig>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_SDADC3_Init+0xd6>
  {
    Error_Handler();
 8000b3a:	f000 fda7 	bl	800168c <Error_Handler>
  }
  /** Configure the Injected Channel
  */
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc3, SDADC_CHANNEL_8, SDADC_CONF_INDEX_1) != HAL_OK)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	4917      	ldr	r1, [pc, #92]	; (8000ba0 <MX_SDADC3_Init+0x138>)
 8000b42:	4813      	ldr	r0, [pc, #76]	; (8000b90 <MX_SDADC3_Init+0x128>)
 8000b44:	f004 f826 	bl	8004b94 <HAL_SDADC_AssociateChannelConfig>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_SDADC3_Init+0xea>
  {
    Error_Handler();
 8000b4e:	f000 fd9d 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN SDADC3_Init 2 */

    // Calibration
	if (HAL_SDADC_CalibrationStart(&hsdadc3, SDADC_CALIBRATION_SEQ_1) != HAL_OK) {
 8000b52:	2100      	movs	r1, #0
 8000b54:	480e      	ldr	r0, [pc, #56]	; (8000b90 <MX_SDADC3_Init+0x128>)
 8000b56:	f004 f93b 	bl	8004dd0 <HAL_SDADC_CalibrationStart>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_SDADC3_Init+0xfc>
		Error_Handler();
 8000b60:	f000 fd94 	bl	800168c <Error_Handler>
	}

	// Pool for the end of calibration
	if (HAL_SDADC_PollForCalibEvent(&hsdadc3, HAL_MAX_DELAY) != HAL_OK) {
 8000b64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b68:	4809      	ldr	r0, [pc, #36]	; (8000b90 <MX_SDADC3_Init+0x128>)
 8000b6a:	f004 f971 	bl	8004e50 <HAL_SDADC_PollForCalibEvent>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_SDADC3_Init+0x110>
		Error_Handler();
 8000b74:	f000 fd8a 	bl	800168c <Error_Handler>
	}

	// Start interrupt mode
	if (HAL_SDADC_InjectedStart_IT(&hsdadc3) != HAL_OK) {
 8000b78:	4805      	ldr	r0, [pc, #20]	; (8000b90 <MX_SDADC3_Init+0x128>)
 8000b7a:	f004 f9c5 	bl	8004f08 <HAL_SDADC_InjectedStart_IT>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_SDADC3_Init+0x120>
		Error_Handler();
 8000b84:	f000 fd82 	bl	800168c <Error_Handler>
	}
  /* USER CODE END SDADC3_Init 2 */

}
 8000b88:	bf00      	nop
 8000b8a:	3710      	adds	r7, #16
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000418 	.word	0x20000418
 8000b94:	40016800 	.word	0x40016800
 8000b98:	000e0140 	.word	0x000e0140
 8000b9c:	00060040 	.word	0x00060040
 8000ba0:	00080100 	.word	0x00080100

08000ba4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08e      	sub	sp, #56	; 0x38
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000baa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb8:	f107 0320 	add.w	r3, r7, #32
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
 8000bd0:	615a      	str	r2, [r3, #20]
 8000bd2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bd4:	4b2d      	ldr	r3, [pc, #180]	; (8000c8c <MX_TIM2_Init+0xe8>)
 8000bd6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bda:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000bdc:	4b2b      	ldr	r3, [pc, #172]	; (8000c8c <MX_TIM2_Init+0xe8>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be2:	4b2a      	ldr	r3, [pc, #168]	; (8000c8c <MX_TIM2_Init+0xe8>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4095;
 8000be8:	4b28      	ldr	r3, [pc, #160]	; (8000c8c <MX_TIM2_Init+0xe8>)
 8000bea:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000bee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf0:	4b26      	ldr	r3, [pc, #152]	; (8000c8c <MX_TIM2_Init+0xe8>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bf6:	4b25      	ldr	r3, [pc, #148]	; (8000c8c <MX_TIM2_Init+0xe8>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bfc:	4823      	ldr	r0, [pc, #140]	; (8000c8c <MX_TIM2_Init+0xe8>)
 8000bfe:	f004 fb99 	bl	8005334 <HAL_TIM_Base_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000c08:	f000 fd40 	bl	800168c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c10:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c16:	4619      	mov	r1, r3
 8000c18:	481c      	ldr	r0, [pc, #112]	; (8000c8c <MX_TIM2_Init+0xe8>)
 8000c1a:	f004 fe1d 	bl	8005858 <HAL_TIM_ConfigClockSource>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000c24:	f000 fd32 	bl	800168c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c28:	4818      	ldr	r0, [pc, #96]	; (8000c8c <MX_TIM2_Init+0xe8>)
 8000c2a:	f004 fc33 	bl	8005494 <HAL_TIM_PWM_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000c34:	f000 fd2a 	bl	800168c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c40:	f107 0320 	add.w	r3, r7, #32
 8000c44:	4619      	mov	r1, r3
 8000c46:	4811      	ldr	r0, [pc, #68]	; (8000c8c <MX_TIM2_Init+0xe8>)
 8000c48:	f005 f970 	bl	8005f2c <HAL_TIMEx_MasterConfigSynchronization>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000c52:	f000 fd1b 	bl	800168c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c56:	2360      	movs	r3, #96	; 0x60
 8000c58:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	2200      	movs	r2, #0
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4807      	ldr	r0, [pc, #28]	; (8000c8c <MX_TIM2_Init+0xe8>)
 8000c6e:	f004 fd35 	bl	80056dc <HAL_TIM_PWM_ConfigChannel>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000c78:	f000 fd08 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c7c:	4803      	ldr	r0, [pc, #12]	; (8000c8c <MX_TIM2_Init+0xe8>)
 8000c7e:	f000 ff37 	bl	8001af0 <HAL_TIM_MspPostInit>

}
 8000c82:	bf00      	nop
 8000c84:	3738      	adds	r7, #56	; 0x38
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200003cc 	.word	0x200003cc

08000c90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08e      	sub	sp, #56	; 0x38
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca4:	f107 0320 	add.w	r3, r7, #32
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
 8000cbc:	615a      	str	r2, [r3, #20]
 8000cbe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cc0:	4b32      	ldr	r3, [pc, #200]	; (8000d8c <MX_TIM3_Init+0xfc>)
 8000cc2:	4a33      	ldr	r2, [pc, #204]	; (8000d90 <MX_TIM3_Init+0x100>)
 8000cc4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000cc6:	4b31      	ldr	r3, [pc, #196]	; (8000d8c <MX_TIM3_Init+0xfc>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ccc:	4b2f      	ldr	r3, [pc, #188]	; (8000d8c <MX_TIM3_Init+0xfc>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4095;
 8000cd2:	4b2e      	ldr	r3, [pc, #184]	; (8000d8c <MX_TIM3_Init+0xfc>)
 8000cd4:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000cd8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cda:	4b2c      	ldr	r3, [pc, #176]	; (8000d8c <MX_TIM3_Init+0xfc>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce0:	4b2a      	ldr	r3, [pc, #168]	; (8000d8c <MX_TIM3_Init+0xfc>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ce6:	4829      	ldr	r0, [pc, #164]	; (8000d8c <MX_TIM3_Init+0xfc>)
 8000ce8:	f004 fb24 	bl	8005334 <HAL_TIM_Base_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000cf2:	f000 fccb 	bl	800168c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cfc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d00:	4619      	mov	r1, r3
 8000d02:	4822      	ldr	r0, [pc, #136]	; (8000d8c <MX_TIM3_Init+0xfc>)
 8000d04:	f004 fda8 	bl	8005858 <HAL_TIM_ConfigClockSource>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000d0e:	f000 fcbd 	bl	800168c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d12:	481e      	ldr	r0, [pc, #120]	; (8000d8c <MX_TIM3_Init+0xfc>)
 8000d14:	f004 fbbe 	bl	8005494 <HAL_TIM_PWM_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000d1e:	f000 fcb5 	bl	800168c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d22:	2300      	movs	r3, #0
 8000d24:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d2a:	f107 0320 	add.w	r3, r7, #32
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4816      	ldr	r0, [pc, #88]	; (8000d8c <MX_TIM3_Init+0xfc>)
 8000d32:	f005 f8fb 	bl	8005f2c <HAL_TIMEx_MasterConfigSynchronization>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000d3c:	f000 fca6 	bl	800168c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d40:	2360      	movs	r3, #96	; 0x60
 8000d42:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	2200      	movs	r2, #0
 8000d54:	4619      	mov	r1, r3
 8000d56:	480d      	ldr	r0, [pc, #52]	; (8000d8c <MX_TIM3_Init+0xfc>)
 8000d58:	f004 fcc0 	bl	80056dc <HAL_TIM_PWM_ConfigChannel>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000d62:	f000 fc93 	bl	800168c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	2204      	movs	r2, #4
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4807      	ldr	r0, [pc, #28]	; (8000d8c <MX_TIM3_Init+0xfc>)
 8000d6e:	f004 fcb5 	bl	80056dc <HAL_TIM_PWM_ConfigChannel>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000d78:	f000 fc88 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d7c:	4803      	ldr	r0, [pc, #12]	; (8000d8c <MX_TIM3_Init+0xfc>)
 8000d7e:	f000 feb7 	bl	8001af0 <HAL_TIM_MspPostInit>

}
 8000d82:	bf00      	nop
 8000d84:	3738      	adds	r7, #56	; 0x38
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	200001b4 	.word	0x200001b4
 8000d90:	40000400 	.word	0x40000400

08000d94 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08e      	sub	sp, #56	; 0x38
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da8:	f107 0320 	add.w	r3, r7, #32
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
 8000dc0:	615a      	str	r2, [r3, #20]
 8000dc2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000dc4:	4b37      	ldr	r3, [pc, #220]	; (8000ea4 <MX_TIM4_Init+0x110>)
 8000dc6:	4a38      	ldr	r2, [pc, #224]	; (8000ea8 <MX_TIM4_Init+0x114>)
 8000dc8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000dca:	4b36      	ldr	r3, [pc, #216]	; (8000ea4 <MX_TIM4_Init+0x110>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd0:	4b34      	ldr	r3, [pc, #208]	; (8000ea4 <MX_TIM4_Init+0x110>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4095;
 8000dd6:	4b33      	ldr	r3, [pc, #204]	; (8000ea4 <MX_TIM4_Init+0x110>)
 8000dd8:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000ddc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dde:	4b31      	ldr	r3, [pc, #196]	; (8000ea4 <MX_TIM4_Init+0x110>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de4:	4b2f      	ldr	r3, [pc, #188]	; (8000ea4 <MX_TIM4_Init+0x110>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000dea:	482e      	ldr	r0, [pc, #184]	; (8000ea4 <MX_TIM4_Init+0x110>)
 8000dec:	f004 faa2 	bl	8005334 <HAL_TIM_Base_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000df6:	f000 fc49 	bl	800168c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e04:	4619      	mov	r1, r3
 8000e06:	4827      	ldr	r0, [pc, #156]	; (8000ea4 <MX_TIM4_Init+0x110>)
 8000e08:	f004 fd26 	bl	8005858 <HAL_TIM_ConfigClockSource>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000e12:	f000 fc3b 	bl	800168c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e16:	4823      	ldr	r0, [pc, #140]	; (8000ea4 <MX_TIM4_Init+0x110>)
 8000e18:	f004 fb3c 	bl	8005494 <HAL_TIM_PWM_Init>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000e22:	f000 fc33 	bl	800168c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e26:	2300      	movs	r3, #0
 8000e28:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e2e:	f107 0320 	add.w	r3, r7, #32
 8000e32:	4619      	mov	r1, r3
 8000e34:	481b      	ldr	r0, [pc, #108]	; (8000ea4 <MX_TIM4_Init+0x110>)
 8000e36:	f005 f879 	bl	8005f2c <HAL_TIMEx_MasterConfigSynchronization>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000e40:	f000 fc24 	bl	800168c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e44:	2360      	movs	r3, #96	; 0x60
 8000e46:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	2200      	movs	r2, #0
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4812      	ldr	r0, [pc, #72]	; (8000ea4 <MX_TIM4_Init+0x110>)
 8000e5c:	f004 fc3e 	bl	80056dc <HAL_TIM_PWM_ConfigChannel>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000e66:	f000 fc11 	bl	800168c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	2204      	movs	r2, #4
 8000e6e:	4619      	mov	r1, r3
 8000e70:	480c      	ldr	r0, [pc, #48]	; (8000ea4 <MX_TIM4_Init+0x110>)
 8000e72:	f004 fc33 	bl	80056dc <HAL_TIM_PWM_ConfigChannel>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000e7c:	f000 fc06 	bl	800168c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	220c      	movs	r2, #12
 8000e84:	4619      	mov	r1, r3
 8000e86:	4807      	ldr	r0, [pc, #28]	; (8000ea4 <MX_TIM4_Init+0x110>)
 8000e88:	f004 fc28 	bl	80056dc <HAL_TIM_PWM_ConfigChannel>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8000e92:	f000 fbfb 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000e96:	4803      	ldr	r0, [pc, #12]	; (8000ea4 <MX_TIM4_Init+0x110>)
 8000e98:	f000 fe2a 	bl	8001af0 <HAL_TIM_MspPostInit>

}
 8000e9c:	bf00      	nop
 8000e9e:	3738      	adds	r7, #56	; 0x38
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	200000bc 	.word	0x200000bc
 8000ea8:	40000800 	.word	0x40000800

08000eac <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08e      	sub	sp, #56	; 0x38
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec0:	f107 0320 	add.w	r3, r7, #32
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
 8000ed8:	615a      	str	r2, [r3, #20]
 8000eda:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000edc:	4b37      	ldr	r3, [pc, #220]	; (8000fbc <MX_TIM5_Init+0x110>)
 8000ede:	4a38      	ldr	r2, [pc, #224]	; (8000fc0 <MX_TIM5_Init+0x114>)
 8000ee0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000ee2:	4b36      	ldr	r3, [pc, #216]	; (8000fbc <MX_TIM5_Init+0x110>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee8:	4b34      	ldr	r3, [pc, #208]	; (8000fbc <MX_TIM5_Init+0x110>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4095;
 8000eee:	4b33      	ldr	r3, [pc, #204]	; (8000fbc <MX_TIM5_Init+0x110>)
 8000ef0:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000ef4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef6:	4b31      	ldr	r3, [pc, #196]	; (8000fbc <MX_TIM5_Init+0x110>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000efc:	4b2f      	ldr	r3, [pc, #188]	; (8000fbc <MX_TIM5_Init+0x110>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000f02:	482e      	ldr	r0, [pc, #184]	; (8000fbc <MX_TIM5_Init+0x110>)
 8000f04:	f004 fa16 	bl	8005334 <HAL_TIM_Base_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8000f0e:	f000 fbbd 	bl	800168c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f16:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000f18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4827      	ldr	r0, [pc, #156]	; (8000fbc <MX_TIM5_Init+0x110>)
 8000f20:	f004 fc9a 	bl	8005858 <HAL_TIM_ConfigClockSource>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8000f2a:	f000 fbaf 	bl	800168c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000f2e:	4823      	ldr	r0, [pc, #140]	; (8000fbc <MX_TIM5_Init+0x110>)
 8000f30:	f004 fab0 	bl	8005494 <HAL_TIM_PWM_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8000f3a:	f000 fba7 	bl	800168c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f42:	2300      	movs	r3, #0
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f46:	f107 0320 	add.w	r3, r7, #32
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	481b      	ldr	r0, [pc, #108]	; (8000fbc <MX_TIM5_Init+0x110>)
 8000f4e:	f004 ffed 	bl	8005f2c <HAL_TIMEx_MasterConfigSynchronization>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8000f58:	f000 fb98 	bl	800168c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f5c:	2360      	movs	r3, #96	; 0x60
 8000f5e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f64:	2300      	movs	r3, #0
 8000f66:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	2200      	movs	r2, #0
 8000f70:	4619      	mov	r1, r3
 8000f72:	4812      	ldr	r0, [pc, #72]	; (8000fbc <MX_TIM5_Init+0x110>)
 8000f74:	f004 fbb2 	bl	80056dc <HAL_TIM_PWM_ConfigChannel>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8000f7e:	f000 fb85 	bl	800168c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	2204      	movs	r2, #4
 8000f86:	4619      	mov	r1, r3
 8000f88:	480c      	ldr	r0, [pc, #48]	; (8000fbc <MX_TIM5_Init+0x110>)
 8000f8a:	f004 fba7 	bl	80056dc <HAL_TIM_PWM_ConfigChannel>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 8000f94:	f000 fb7a 	bl	800168c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	2208      	movs	r2, #8
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4807      	ldr	r0, [pc, #28]	; (8000fbc <MX_TIM5_Init+0x110>)
 8000fa0:	f004 fb9c 	bl	80056dc <HAL_TIM_PWM_ConfigChannel>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_TIM5_Init+0x102>
  {
    Error_Handler();
 8000faa:	f000 fb6f 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000fae:	4803      	ldr	r0, [pc, #12]	; (8000fbc <MX_TIM5_Init+0x110>)
 8000fb0:	f000 fd9e 	bl	8001af0 <HAL_TIM_MspPostInit>

}
 8000fb4:	bf00      	nop
 8000fb6:	3738      	adds	r7, #56	; 0x38
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000168 	.word	0x20000168
 8000fc0:	40000c00 	.word	0x40000c00

08000fc4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fca:	463b      	mov	r3, r7
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000fd2:	4b15      	ldr	r3, [pc, #84]	; (8001028 <MX_TIM6_Init+0x64>)
 8000fd4:	4a15      	ldr	r2, [pc, #84]	; (800102c <MX_TIM6_Init+0x68>)
 8000fd6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000fd8:	4b13      	ldr	r3, [pc, #76]	; (8001028 <MX_TIM6_Init+0x64>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fde:	4b12      	ldr	r3, [pc, #72]	; (8001028 <MX_TIM6_Init+0x64>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000fe4:	4b10      	ldr	r3, [pc, #64]	; (8001028 <MX_TIM6_Init+0x64>)
 8000fe6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fea:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fec:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <MX_TIM6_Init+0x64>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ff2:	480d      	ldr	r0, [pc, #52]	; (8001028 <MX_TIM6_Init+0x64>)
 8000ff4:	f004 f99e 	bl	8005334 <HAL_TIM_Base_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000ffe:	f000 fb45 	bl	800168c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001002:	2320      	movs	r3, #32
 8001004:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001006:	2300      	movs	r3, #0
 8001008:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800100a:	463b      	mov	r3, r7
 800100c:	4619      	mov	r1, r3
 800100e:	4806      	ldr	r0, [pc, #24]	; (8001028 <MX_TIM6_Init+0x64>)
 8001010:	f004 ff8c 	bl	8005f2c <HAL_TIMEx_MasterConfigSynchronization>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800101a:	f000 fb37 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000380 	.word	0x20000380
 800102c:	40001000 	.word	0x40001000

08001030 <MX_TIM19_Init>:
  * @brief TIM19 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM19_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM19_Init 0 */

  /* USER CODE END TIM19_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001036:	f107 0308 	add.w	r3, r7, #8
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001044:	463b      	mov	r3, r7
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM19_Init 1 */

  /* USER CODE END TIM19_Init 1 */
  htim19.Instance = TIM19;
 800104c:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <MX_TIM19_Init+0x94>)
 800104e:	4a1e      	ldr	r2, [pc, #120]	; (80010c8 <MX_TIM19_Init+0x98>)
 8001050:	601a      	str	r2, [r3, #0]
  htim19.Init.Prescaler = 0;
 8001052:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <MX_TIM19_Init+0x94>)
 8001054:	2200      	movs	r2, #0
 8001056:	605a      	str	r2, [r3, #4]
  htim19.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001058:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <MX_TIM19_Init+0x94>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  htim19.Init.Period = 65535;
 800105e:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <MX_TIM19_Init+0x94>)
 8001060:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001064:	60da      	str	r2, [r3, #12]
  htim19.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001066:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <MX_TIM19_Init+0x94>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  htim19.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800106c:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <MX_TIM19_Init+0x94>)
 800106e:	2200      	movs	r2, #0
 8001070:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim19) != HAL_OK)
 8001072:	4814      	ldr	r0, [pc, #80]	; (80010c4 <MX_TIM19_Init+0x94>)
 8001074:	f004 f95e 	bl	8005334 <HAL_TIM_Base_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM19_Init+0x52>
  {
    Error_Handler();
 800107e:	f000 fb05 	bl	800168c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001086:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim19, &sClockSourceConfig) != HAL_OK)
 8001088:	f107 0308 	add.w	r3, r7, #8
 800108c:	4619      	mov	r1, r3
 800108e:	480d      	ldr	r0, [pc, #52]	; (80010c4 <MX_TIM19_Init+0x94>)
 8001090:	f004 fbe2 	bl	8005858 <HAL_TIM_ConfigClockSource>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_TIM19_Init+0x6e>
  {
    Error_Handler();
 800109a:	f000 faf7 	bl	800168c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800109e:	2320      	movs	r3, #32
 80010a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a2:	2300      	movs	r3, #0
 80010a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim19, &sMasterConfig) != HAL_OK)
 80010a6:	463b      	mov	r3, r7
 80010a8:	4619      	mov	r1, r3
 80010aa:	4806      	ldr	r0, [pc, #24]	; (80010c4 <MX_TIM19_Init+0x94>)
 80010ac:	f004 ff3e 	bl	8005f2c <HAL_TIMEx_MasterConfigSynchronization>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM19_Init+0x8a>
  {
    Error_Handler();
 80010b6:	f000 fae9 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN TIM19_Init 2 */

  /* USER CODE END TIM19_Init 2 */

}
 80010ba:	bf00      	nop
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	2000011c 	.word	0x2000011c
 80010c8:	40015c00 	.word	0x40015c00

080010cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <MX_USART1_UART_Init+0x58>)
 80010d2:	4a15      	ldr	r2, [pc, #84]	; (8001128 <MX_USART1_UART_Init+0x5c>)
 80010d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80010d6:	4b13      	ldr	r3, [pc, #76]	; (8001124 <MX_USART1_UART_Init+0x58>)
 80010d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80010dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <MX_USART1_UART_Init+0x58>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <MX_USART1_UART_Init+0x58>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <MX_USART1_UART_Init+0x58>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <MX_USART1_UART_Init+0x58>)
 80010f2:	220c      	movs	r2, #12
 80010f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010f6:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <MX_USART1_UART_Init+0x58>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010fc:	4b09      	ldr	r3, [pc, #36]	; (8001124 <MX_USART1_UART_Init+0x58>)
 80010fe:	2200      	movs	r2, #0
 8001100:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001102:	4b08      	ldr	r3, [pc, #32]	; (8001124 <MX_USART1_UART_Init+0x58>)
 8001104:	2200      	movs	r2, #0
 8001106:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <MX_USART1_UART_Init+0x58>)
 800110a:	2200      	movs	r2, #0
 800110c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800110e:	4805      	ldr	r0, [pc, #20]	; (8001124 <MX_USART1_UART_Init+0x58>)
 8001110:	f004 ff80 	bl	8006014 <HAL_UART_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800111a:	f000 fab7 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000274 	.word	0x20000274
 8001128:	40013800 	.word	0x40013800

0800112c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <MX_DMA_Init+0x48>)
 8001134:	695b      	ldr	r3, [r3, #20]
 8001136:	4a0f      	ldr	r2, [pc, #60]	; (8001174 <MX_DMA_Init+0x48>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6153      	str	r3, [r2, #20]
 800113e:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <MX_DMA_Init+0x48>)
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	2100      	movs	r1, #0
 800114e:	200b      	movs	r0, #11
 8001150:	f001 fb59 	bl	8002806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001154:	200b      	movs	r0, #11
 8001156:	f001 fb72 	bl	800283e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800115a:	2200      	movs	r2, #0
 800115c:	2100      	movs	r1, #0
 800115e:	200f      	movs	r0, #15
 8001160:	f001 fb51 	bl	8002806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001164:	200f      	movs	r0, #15
 8001166:	f001 fb6a 	bl	800283e <HAL_NVIC_EnableIRQ>

}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40021000 	.word	0x40021000

08001178 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08c      	sub	sp, #48	; 0x30
 800117c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117e:	f107 031c 	add.w	r3, r7, #28
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]
 800118c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800118e:	4b39      	ldr	r3, [pc, #228]	; (8001274 <MX_GPIO_Init+0xfc>)
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	4a38      	ldr	r2, [pc, #224]	; (8001274 <MX_GPIO_Init+0xfc>)
 8001194:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001198:	6153      	str	r3, [r2, #20]
 800119a:	4b36      	ldr	r3, [pc, #216]	; (8001274 <MX_GPIO_Init+0xfc>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011a2:	61bb      	str	r3, [r7, #24]
 80011a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011a6:	4b33      	ldr	r3, [pc, #204]	; (8001274 <MX_GPIO_Init+0xfc>)
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	4a32      	ldr	r2, [pc, #200]	; (8001274 <MX_GPIO_Init+0xfc>)
 80011ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011b0:	6153      	str	r3, [r2, #20]
 80011b2:	4b30      	ldr	r3, [pc, #192]	; (8001274 <MX_GPIO_Init+0xfc>)
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011be:	4b2d      	ldr	r3, [pc, #180]	; (8001274 <MX_GPIO_Init+0xfc>)
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	4a2c      	ldr	r2, [pc, #176]	; (8001274 <MX_GPIO_Init+0xfc>)
 80011c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c8:	6153      	str	r3, [r2, #20]
 80011ca:	4b2a      	ldr	r3, [pc, #168]	; (8001274 <MX_GPIO_Init+0xfc>)
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d6:	4b27      	ldr	r3, [pc, #156]	; (8001274 <MX_GPIO_Init+0xfc>)
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	4a26      	ldr	r2, [pc, #152]	; (8001274 <MX_GPIO_Init+0xfc>)
 80011dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011e0:	6153      	str	r3, [r2, #20]
 80011e2:	4b24      	ldr	r3, [pc, #144]	; (8001274 <MX_GPIO_Init+0xfc>)
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011ee:	4b21      	ldr	r3, [pc, #132]	; (8001274 <MX_GPIO_Init+0xfc>)
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	4a20      	ldr	r2, [pc, #128]	; (8001274 <MX_GPIO_Init+0xfc>)
 80011f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011f8:	6153      	str	r3, [r2, #20]
 80011fa:	4b1e      	ldr	r3, [pc, #120]	; (8001274 <MX_GPIO_Init+0xfc>)
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001206:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <MX_GPIO_Init+0xfc>)
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	4a1a      	ldr	r2, [pc, #104]	; (8001274 <MX_GPIO_Init+0xfc>)
 800120c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001210:	6153      	str	r3, [r2, #20]
 8001212:	4b18      	ldr	r3, [pc, #96]	; (8001274 <MX_GPIO_Init+0xfc>)
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : INPUT_2_Pin INPUT_1_Pin INPUT_0_Pin */
  GPIO_InitStruct.Pin = INPUT_2_Pin|INPUT_1_Pin|INPUT_0_Pin;
 800121e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001222:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001224:	2300      	movs	r3, #0
 8001226:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001228:	2302      	movs	r3, #2
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122c:	f107 031c 	add.w	r3, r7, #28
 8001230:	4619      	mov	r1, r3
 8001232:	4811      	ldr	r0, [pc, #68]	; (8001278 <MX_GPIO_Init+0x100>)
 8001234:	f001 ff88 	bl	8003148 <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_5_Pin */
  GPIO_InitStruct.Pin = INPUT_5_Pin;
 8001238:	2380      	movs	r3, #128	; 0x80
 800123a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800123c:	2300      	movs	r3, #0
 800123e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001240:	2302      	movs	r3, #2
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(INPUT_5_GPIO_Port, &GPIO_InitStruct);
 8001244:	f107 031c 	add.w	r3, r7, #28
 8001248:	4619      	mov	r1, r3
 800124a:	480c      	ldr	r0, [pc, #48]	; (800127c <MX_GPIO_Init+0x104>)
 800124c:	f001 ff7c 	bl	8003148 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT_4_Pin INPUT_3_Pin */
  GPIO_InitStruct.Pin = INPUT_4_Pin|INPUT_3_Pin;
 8001250:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800125a:	2302      	movs	r3, #2
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125e:	f107 031c 	add.w	r3, r7, #28
 8001262:	4619      	mov	r1, r3
 8001264:	4806      	ldr	r0, [pc, #24]	; (8001280 <MX_GPIO_Init+0x108>)
 8001266:	f001 ff6f 	bl	8003148 <HAL_GPIO_Init>

}
 800126a:	bf00      	nop
 800126c:	3730      	adds	r7, #48	; 0x30
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40021000 	.word	0x40021000
 8001278:	48000800 	.word	0x48000800
 800127c:	48001400 	.word	0x48001400
 8001280:	48000400 	.word	0x48000400

08001284 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// When we got a complete RX message - This function runs
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_UART_RxCpltCallback can be implemented in the user file.
	 */

	uint8_t choice = RX_DATA[0];
 800128c:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <HAL_UART_RxCpltCallback+0x3c>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	73fb      	strb	r3, [r7, #15]
	switch (choice) {
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	2b31      	cmp	r3, #49	; 0x31
 8001296:	d006      	beq.n	80012a6 <HAL_UART_RxCpltCallback+0x22>
 8001298:	2b32      	cmp	r3, #50	; 0x32
 800129a:	d007      	beq.n	80012ac <HAL_UART_RxCpltCallback+0x28>
 800129c:	2b30      	cmp	r3, #48	; 0x30
 800129e:	d108      	bne.n	80012b2 <HAL_UART_RxCpltCallback+0x2e>
	case 48: // Ask if is ready
		is_ready();
 80012a0:	f000 f844 	bl	800132c <is_ready>
		break;
 80012a4:	e008      	b.n	80012b8 <HAL_UART_RxCpltCallback+0x34>
	case 49: // Set PWM and DAC periods and also send measurements back
		read_PWM_DAC_periods_send_measurement_back();
 80012a6:	f000 f871 	bl	800138c <read_PWM_DAC_periods_send_measurement_back>
		break;
 80012aa:	e005      	b.n	80012b8 <HAL_UART_RxCpltCallback+0x34>
	case 50: // Set Timers prescalers to memory and send status OK back
		write_PWM_TIM_prescalers_to_memory();
 80012ac:	f000 f9a8 	bl	8001600 <write_PWM_TIM_prescalers_to_memory>
		break;
 80012b0:	e002      	b.n	80012b8 <HAL_UART_RxCpltCallback+0x34>
	default: // Answer back that this uC is not ready
		is_not_ready();
 80012b2:	f000 f853 	bl	800135c <is_not_ready>
		break;
 80012b6:	bf00      	nop
	}
}
 80012b8:	bf00      	nop
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000030 	.word	0x20000030

080012c4 <HAL_SDADC_InjectedConvCpltCallback>:

// When we got a measurement
void HAL_SDADC_InjectedConvCpltCallback(SDADC_HandleTypeDef *hsdadc){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	// CHANNEL will be 4, 6, 8 but randomly
	// SD_ADC for SDADC1 = [SDADC1_IN4, 0, SDADC1_IN6, SDADC3_IN6, SDADC1_IN8, SDADC3_IN8];
	if(hsdadc->Instance == SDADC1){
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a12      	ldr	r2, [pc, #72]	; (800131c <HAL_SDADC_InjectedConvCpltCallback+0x58>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d10c      	bne.n	80012f0 <HAL_SDADC_InjectedConvCpltCallback+0x2c>
		SD_ADC[CHANNEL - 4] = HAL_SDADC_InjectedGetValue(hsdadc, &CHANNEL);
 80012d6:	4912      	ldr	r1, [pc, #72]	; (8001320 <HAL_SDADC_InjectedConvCpltCallback+0x5c>)
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f003 fe38 	bl	8004f4e <HAL_SDADC_InjectedGetValue>
 80012de:	4602      	mov	r2, r0
 80012e0:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <HAL_SDADC_InjectedConvCpltCallback+0x5c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	3b04      	subs	r3, #4
 80012e6:	b291      	uxth	r1, r2
 80012e8:	4a0e      	ldr	r2, [pc, #56]	; (8001324 <HAL_SDADC_InjectedConvCpltCallback+0x60>)
 80012ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}else if(hsdadc->Instance == SDADC3){
		SD_ADC[CHANNEL - 4 + 1] = HAL_SDADC_InjectedGetValue(hsdadc, &CHANNEL);
	}
}
 80012ee:	e010      	b.n	8001312 <HAL_SDADC_InjectedConvCpltCallback+0x4e>
	}else if(hsdadc->Instance == SDADC3){
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a0c      	ldr	r2, [pc, #48]	; (8001328 <HAL_SDADC_InjectedConvCpltCallback+0x64>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d10b      	bne.n	8001312 <HAL_SDADC_InjectedConvCpltCallback+0x4e>
		SD_ADC[CHANNEL - 4 + 1] = HAL_SDADC_InjectedGetValue(hsdadc, &CHANNEL);
 80012fa:	4909      	ldr	r1, [pc, #36]	; (8001320 <HAL_SDADC_InjectedConvCpltCallback+0x5c>)
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f003 fe26 	bl	8004f4e <HAL_SDADC_InjectedGetValue>
 8001302:	4602      	mov	r2, r0
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HAL_SDADC_InjectedConvCpltCallback+0x5c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	3b03      	subs	r3, #3
 800130a:	b291      	uxth	r1, r2
 800130c:	4a05      	ldr	r2, [pc, #20]	; (8001324 <HAL_SDADC_InjectedConvCpltCallback+0x60>)
 800130e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40016000 	.word	0x40016000
 8001320:	20000000 	.word	0x20000000
 8001324:	20000088 	.word	0x20000088
 8001328:	40016800 	.word	0x40016800

0800132c <is_ready>:

// Send back that it's true at first element
void is_ready(){
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
	uint8_t TX_DATA_element_size = sizeof(TX_DATA) / sizeof(TX_DATA[0]);
 8001332:	2318      	movs	r3, #24
 8001334:	71fb      	strb	r3, [r7, #7]
	TX_DATA[0] = 1;
 8001336:	4b07      	ldr	r3, [pc, #28]	; (8001354 <is_ready+0x28>)
 8001338:	2201      	movs	r2, #1
 800133a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, TX_DATA, TX_DATA_element_size, 10);
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	b29a      	uxth	r2, r3
 8001340:	230a      	movs	r3, #10
 8001342:	4904      	ldr	r1, [pc, #16]	; (8001354 <is_ready+0x28>)
 8001344:	4804      	ldr	r0, [pc, #16]	; (8001358 <is_ready+0x2c>)
 8001346:	f004 feb3 	bl	80060b0 <HAL_UART_Transmit>
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	2000004c 	.word	0x2000004c
 8001358:	20000274 	.word	0x20000274

0800135c <is_not_ready>:

// Send back that it's false at first element
void is_not_ready(){
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
	uint8_t TX_DATA_element_size = sizeof(TX_DATA) / sizeof(TX_DATA[0]);
 8001362:	2318      	movs	r3, #24
 8001364:	71fb      	strb	r3, [r7, #7]
	TX_DATA[0] = 0;
 8001366:	4b07      	ldr	r3, [pc, #28]	; (8001384 <is_not_ready+0x28>)
 8001368:	2200      	movs	r2, #0
 800136a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, TX_DATA, TX_DATA_element_size, 10);
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	b29a      	uxth	r2, r3
 8001370:	230a      	movs	r3, #10
 8001372:	4904      	ldr	r1, [pc, #16]	; (8001384 <is_not_ready+0x28>)
 8001374:	4804      	ldr	r0, [pc, #16]	; (8001388 <is_not_ready+0x2c>)
 8001376:	f004 fe9b 	bl	80060b0 <HAL_UART_Transmit>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	2000004c 	.word	0x2000004c
 8001388:	20000274 	.word	0x20000274

0800138c <read_PWM_DAC_periods_send_measurement_back>:

void read_PWM_DAC_periods_send_measurement_back() {
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
	// Get the PWM and DAC values
	uint8_t PWM_element_size = sizeof(PWM_PERIOD) / sizeof(PWM_PERIOD[0]);
 8001392:	2309      	movs	r3, #9
 8001394:	75fb      	strb	r3, [r7, #23]
	uint8_t DAC_element_size = sizeof(DAC_OUTPUT) / sizeof(DAC_OUTPUT[0]);
 8001396:	2303      	movs	r3, #3
 8001398:	75bb      	strb	r3, [r7, #22]
	fill_uint16_array(RX_DATA, PWM_PERIOD, 1, PWM_element_size); // 1 because the first element is the choice above
 800139a:	7dfb      	ldrb	r3, [r7, #23]
 800139c:	2201      	movs	r2, #1
 800139e:	492c      	ldr	r1, [pc, #176]	; (8001450 <read_PWM_DAC_periods_send_measurement_back+0xc4>)
 80013a0:	482c      	ldr	r0, [pc, #176]	; (8001454 <read_PWM_DAC_periods_send_measurement_back+0xc8>)
 80013a2:	f000 f865 	bl	8001470 <fill_uint16_array>
	fill_uint16_array(RX_DATA, DAC_OUTPUT, PWM_element_size * 2 + 1, DAC_element_size);
 80013a6:	7dfb      	ldrb	r3, [r7, #23]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	3301      	adds	r3, #1
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	7dbb      	ldrb	r3, [r7, #22]
 80013b2:	4929      	ldr	r1, [pc, #164]	; (8001458 <read_PWM_DAC_periods_send_measurement_back+0xcc>)
 80013b4:	4827      	ldr	r0, [pc, #156]	; (8001454 <read_PWM_DAC_periods_send_measurement_back+0xc8>)
 80013b6:	f000 f85b 	bl	8001470 <fill_uint16_array>

	// Copy over
	uint16_t SD_ADC_VALUES[2] = {SD_ADC[0], SD_ADC[3]};
 80013ba:	4b28      	ldr	r3, [pc, #160]	; (800145c <read_PWM_DAC_periods_send_measurement_back+0xd0>)
 80013bc:	881b      	ldrh	r3, [r3, #0]
 80013be:	81bb      	strh	r3, [r7, #12]
 80013c0:	4b26      	ldr	r3, [pc, #152]	; (800145c <read_PWM_DAC_periods_send_measurement_back+0xd0>)
 80013c2:	88db      	ldrh	r3, [r3, #6]
 80013c4:	81fb      	strh	r3, [r7, #14]
	uint16_t D_SD_ADC_VALUES[3] = {SD_ADC[2], SD_ADC[4], SD_ADC[5]}; // SD_ADC[1] = empty
 80013c6:	4b25      	ldr	r3, [pc, #148]	; (800145c <read_PWM_DAC_periods_send_measurement_back+0xd0>)
 80013c8:	889b      	ldrh	r3, [r3, #4]
 80013ca:	80bb      	strh	r3, [r7, #4]
 80013cc:	4b23      	ldr	r3, [pc, #140]	; (800145c <read_PWM_DAC_periods_send_measurement_back+0xd0>)
 80013ce:	891b      	ldrh	r3, [r3, #8]
 80013d0:	80fb      	strh	r3, [r7, #6]
 80013d2:	4b22      	ldr	r3, [pc, #136]	; (800145c <read_PWM_DAC_periods_send_measurement_back+0xd0>)
 80013d4:	895b      	ldrh	r3, [r3, #10]
 80013d6:	813b      	strh	r3, [r7, #8]

	// Send the ADC, SDADC, DSDADC and DI values
	uint8_t ADC_element_size = sizeof(ADC_VALUES) / sizeof(ADC_VALUES[0]);
 80013d8:	2304      	movs	r3, #4
 80013da:	757b      	strb	r3, [r7, #21]
	uint8_t SD_ADC_element_size = sizeof(SD_ADC_VALUES) / sizeof(SD_ADC_VALUES[0]);
 80013dc:	2302      	movs	r3, #2
 80013de:	753b      	strb	r3, [r7, #20]
	uint8_t D_SD_ADC_element_size = sizeof(D_SD_ADC_VALUES) / sizeof(D_SD_ADC_VALUES[0]);
 80013e0:	2303      	movs	r3, #3
 80013e2:	74fb      	strb	r3, [r7, #19]
	uint8_t DI_element_size = sizeof(DI_VALUES) / sizeof(DI_VALUES[0]);
 80013e4:	2306      	movs	r3, #6
 80013e6:	74bb      	strb	r3, [r7, #18]
	uint8_t TX_DATA_element_size = sizeof(TX_DATA) / sizeof(TX_DATA[0]);
 80013e8:	2318      	movs	r3, #24
 80013ea:	747b      	strb	r3, [r7, #17]
	fill_TX_DATA_16(TX_DATA, ADC_VALUES, 0, ADC_element_size);
 80013ec:	7d7b      	ldrb	r3, [r7, #21]
 80013ee:	2200      	movs	r2, #0
 80013f0:	491b      	ldr	r1, [pc, #108]	; (8001460 <read_PWM_DAC_periods_send_measurement_back+0xd4>)
 80013f2:	481c      	ldr	r0, [pc, #112]	; (8001464 <read_PWM_DAC_periods_send_measurement_back+0xd8>)
 80013f4:	f000 f873 	bl	80014de <fill_TX_DATA_16>
	fill_TX_DATA_16(TX_DATA, SD_ADC_VALUES, ADC_element_size * 2, SD_ADC_element_size);
 80013f8:	7d7b      	ldrb	r3, [r7, #21]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	7d3b      	ldrb	r3, [r7, #20]
 8001400:	f107 010c 	add.w	r1, r7, #12
 8001404:	4817      	ldr	r0, [pc, #92]	; (8001464 <read_PWM_DAC_periods_send_measurement_back+0xd8>)
 8001406:	f000 f86a 	bl	80014de <fill_TX_DATA_16>
	fill_TX_DATA_16(TX_DATA, D_SD_ADC_VALUES, (ADC_element_size + SD_ADC_element_size) * 2, D_SD_ADC_element_size);
 800140a:	7d7a      	ldrb	r2, [r7, #21]
 800140c:	7d3b      	ldrb	r3, [r7, #20]
 800140e:	4413      	add	r3, r2
 8001410:	b2db      	uxtb	r3, r3
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	b2da      	uxtb	r2, r3
 8001416:	7cfb      	ldrb	r3, [r7, #19]
 8001418:	1d39      	adds	r1, r7, #4
 800141a:	4812      	ldr	r0, [pc, #72]	; (8001464 <read_PWM_DAC_periods_send_measurement_back+0xd8>)
 800141c:	f000 f85f 	bl	80014de <fill_TX_DATA_16>
	fill_TX_DATA_8(TX_DATA, DI_VALUES, (ADC_element_size + SD_ADC_element_size + D_SD_ADC_element_size) * 2, DI_element_size);
 8001420:	7d7a      	ldrb	r2, [r7, #21]
 8001422:	7d3b      	ldrb	r3, [r7, #20]
 8001424:	441a      	add	r2, r3
 8001426:	7cfb      	ldrb	r3, [r7, #19]
 8001428:	4413      	add	r3, r2
 800142a:	b2db      	uxtb	r3, r3
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	b2da      	uxtb	r2, r3
 8001430:	7cbb      	ldrb	r3, [r7, #18]
 8001432:	490d      	ldr	r1, [pc, #52]	; (8001468 <read_PWM_DAC_periods_send_measurement_back+0xdc>)
 8001434:	480b      	ldr	r0, [pc, #44]	; (8001464 <read_PWM_DAC_periods_send_measurement_back+0xd8>)
 8001436:	f000 f88c 	bl	8001552 <fill_TX_DATA_8>
	HAL_UART_Transmit(&huart1, TX_DATA, TX_DATA_element_size, 10);
 800143a:	7c7b      	ldrb	r3, [r7, #17]
 800143c:	b29a      	uxth	r2, r3
 800143e:	230a      	movs	r3, #10
 8001440:	4908      	ldr	r1, [pc, #32]	; (8001464 <read_PWM_DAC_periods_send_measurement_back+0xd8>)
 8001442:	480a      	ldr	r0, [pc, #40]	; (800146c <read_PWM_DAC_periods_send_measurement_back+0xe0>)
 8001444:	f004 fe34 	bl	80060b0 <HAL_UART_Transmit>
}
 8001448:	bf00      	nop
 800144a:	3718      	adds	r7, #24
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20000064 	.word	0x20000064
 8001454:	20000030 	.word	0x20000030
 8001458:	20000078 	.word	0x20000078
 800145c:	20000088 	.word	0x20000088
 8001460:	20000080 	.word	0x20000080
 8001464:	2000004c 	.word	0x2000004c
 8001468:	20000094 	.word	0x20000094
 800146c:	20000274 	.word	0x20000274

08001470 <fill_uint16_array>:

void fill_uint16_array(uint8_t array8[], uint16_t array16[],
		uint8_t elements_that_has_been_written, uint8_t size) {
 8001470:	b480      	push	{r7}
 8001472:	b087      	sub	sp, #28
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	4611      	mov	r1, r2
 800147c:	461a      	mov	r2, r3
 800147e:	460b      	mov	r3, r1
 8001480:	71fb      	strb	r3, [r7, #7]
 8001482:	4613      	mov	r3, r2
 8001484:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < size; i++) {
 8001486:	2300      	movs	r3, #0
 8001488:	75fb      	strb	r3, [r7, #23]
 800148a:	e01e      	b.n	80014ca <fill_uint16_array+0x5a>
		array16[i] = (array8[i + i + elements_that_has_been_written] << 8) | (array8[i + i + 1 + elements_that_has_been_written] & 0xFF);
 800148c:	7dfb      	ldrb	r3, [r7, #23]
 800148e:	005a      	lsls	r2, r3, #1
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	4413      	add	r3, r2
 8001494:	461a      	mov	r2, r3
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	4413      	add	r3, r2
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	021b      	lsls	r3, r3, #8
 800149e:	b21a      	sxth	r2, r3
 80014a0:	7dfb      	ldrb	r3, [r7, #23]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	1c59      	adds	r1, r3, #1
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	440b      	add	r3, r1
 80014aa:	4619      	mov	r1, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	440b      	add	r3, r1
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	b21b      	sxth	r3, r3
 80014b4:	4313      	orrs	r3, r2
 80014b6:	b219      	sxth	r1, r3
 80014b8:	7dfb      	ldrb	r3, [r7, #23]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	68ba      	ldr	r2, [r7, #8]
 80014be:	4413      	add	r3, r2
 80014c0:	b28a      	uxth	r2, r1
 80014c2:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < size; i++) {
 80014c4:	7dfb      	ldrb	r3, [r7, #23]
 80014c6:	3301      	adds	r3, #1
 80014c8:	75fb      	strb	r3, [r7, #23]
 80014ca:	7dfa      	ldrb	r2, [r7, #23]
 80014cc:	79bb      	ldrb	r3, [r7, #6]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d3dc      	bcc.n	800148c <fill_uint16_array+0x1c>
	}
}
 80014d2:	bf00      	nop
 80014d4:	371c      	adds	r7, #28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <fill_TX_DATA_16>:

void fill_TX_DATA_16(uint8_t array8[], uint16_t array16[],
		uint8_t elements_that_has_been_written, uint8_t size) {
 80014de:	b480      	push	{r7}
 80014e0:	b087      	sub	sp, #28
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	60f8      	str	r0, [r7, #12]
 80014e6:	60b9      	str	r1, [r7, #8]
 80014e8:	4611      	mov	r1, r2
 80014ea:	461a      	mov	r2, r3
 80014ec:	460b      	mov	r3, r1
 80014ee:	71fb      	strb	r3, [r7, #7]
 80014f0:	4613      	mov	r3, r2
 80014f2:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < size; i++) {
 80014f4:	2300      	movs	r3, #0
 80014f6:	75fb      	strb	r3, [r7, #23]
 80014f8:	e021      	b.n	800153e <fill_TX_DATA_16+0x60>
		array8[i + i + elements_that_has_been_written] = array16[i] >> 8;
 80014fa:	7dfb      	ldrb	r3, [r7, #23]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	68ba      	ldr	r2, [r7, #8]
 8001500:	4413      	add	r3, r2
 8001502:	881b      	ldrh	r3, [r3, #0]
 8001504:	0a1b      	lsrs	r3, r3, #8
 8001506:	b299      	uxth	r1, r3
 8001508:	7dfb      	ldrb	r3, [r7, #23]
 800150a:	005a      	lsls	r2, r3, #1
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	4413      	add	r3, r2
 8001510:	461a      	mov	r2, r3
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	4413      	add	r3, r2
 8001516:	b2ca      	uxtb	r2, r1
 8001518:	701a      	strb	r2, [r3, #0]
		array8[i + i + 1 + elements_that_has_been_written] = array16[i];
 800151a:	7dfb      	ldrb	r3, [r7, #23]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	4413      	add	r3, r2
 8001522:	8819      	ldrh	r1, [r3, #0]
 8001524:	7dfb      	ldrb	r3, [r7, #23]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	1c5a      	adds	r2, r3, #1
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	4413      	add	r3, r2
 800152e:	461a      	mov	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4413      	add	r3, r2
 8001534:	b2ca      	uxtb	r2, r1
 8001536:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < size; i++) {
 8001538:	7dfb      	ldrb	r3, [r7, #23]
 800153a:	3301      	adds	r3, #1
 800153c:	75fb      	strb	r3, [r7, #23]
 800153e:	7dfa      	ldrb	r2, [r7, #23]
 8001540:	79bb      	ldrb	r3, [r7, #6]
 8001542:	429a      	cmp	r2, r3
 8001544:	d3d9      	bcc.n	80014fa <fill_TX_DATA_16+0x1c>
	}
}
 8001546:	bf00      	nop
 8001548:	371c      	adds	r7, #28
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <fill_TX_DATA_8>:

void fill_TX_DATA_8(uint8_t array8[], uint16_t array16[],
		uint8_t elements_that_has_been_written, uint8_t size) {
 8001552:	b480      	push	{r7}
 8001554:	b087      	sub	sp, #28
 8001556:	af00      	add	r7, sp, #0
 8001558:	60f8      	str	r0, [r7, #12]
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	4611      	mov	r1, r2
 800155e:	461a      	mov	r2, r3
 8001560:	460b      	mov	r3, r1
 8001562:	71fb      	strb	r3, [r7, #7]
 8001564:	4613      	mov	r3, r2
 8001566:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < size; i++) {
 8001568:	2300      	movs	r3, #0
 800156a:	75fb      	strb	r3, [r7, #23]
 800156c:	e00f      	b.n	800158e <fill_TX_DATA_8+0x3c>
		array8[i + elements_that_has_been_written] = array16[i];
 800156e:	7dfb      	ldrb	r3, [r7, #23]
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	4413      	add	r3, r2
 8001576:	8819      	ldrh	r1, [r3, #0]
 8001578:	7dfa      	ldrb	r2, [r7, #23]
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	4413      	add	r3, r2
 800157e:	461a      	mov	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4413      	add	r3, r2
 8001584:	b2ca      	uxtb	r2, r1
 8001586:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < size; i++) {
 8001588:	7dfb      	ldrb	r3, [r7, #23]
 800158a:	3301      	adds	r3, #1
 800158c:	75fb      	strb	r3, [r7, #23]
 800158e:	7dfa      	ldrb	r2, [r7, #23]
 8001590:	79bb      	ldrb	r3, [r7, #6]
 8001592:	429a      	cmp	r2, r3
 8001594:	d3eb      	bcc.n	800156e <fill_TX_DATA_8+0x1c>
	}
}
 8001596:	bf00      	nop
 8001598:	371c      	adds	r7, #28
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
	...

080015a4 <read_PWM_TIM_prescalers_from_memory>:

void read_PWM_TIM_prescalers_from_memory() {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
	uint32_t Nsize = sizeof(TIM_PRESCALES) / sizeof(TIM_PRESCALES[0]);
 80015aa:	2304      	movs	r3, #4
 80015ac:	607b      	str	r3, [r7, #4]
	FlashReadN(0, TIM_PRESCALES, Nsize, DATA_TYPE_U16);
 80015ae:	2301      	movs	r3, #1
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	490e      	ldr	r1, [pc, #56]	; (80015ec <read_PWM_TIM_prescalers_from_memory+0x48>)
 80015b4:	2000      	movs	r0, #0
 80015b6:	f7fe fed9 	bl	800036c <FlashReadN>
	htim2.Instance->PSC = TIM_PRESCALES[0];
 80015ba:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <read_PWM_TIM_prescalers_from_memory+0x48>)
 80015bc:	881a      	ldrh	r2, [r3, #0]
 80015be:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <read_PWM_TIM_prescalers_from_memory+0x4c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	629a      	str	r2, [r3, #40]	; 0x28
	htim3.Instance->PSC = TIM_PRESCALES[1];
 80015c4:	4b09      	ldr	r3, [pc, #36]	; (80015ec <read_PWM_TIM_prescalers_from_memory+0x48>)
 80015c6:	885a      	ldrh	r2, [r3, #2]
 80015c8:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <read_PWM_TIM_prescalers_from_memory+0x50>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	629a      	str	r2, [r3, #40]	; 0x28
	htim4.Instance->PSC = TIM_PRESCALES[2];
 80015ce:	4b07      	ldr	r3, [pc, #28]	; (80015ec <read_PWM_TIM_prescalers_from_memory+0x48>)
 80015d0:	889a      	ldrh	r2, [r3, #4]
 80015d2:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <read_PWM_TIM_prescalers_from_memory+0x54>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	629a      	str	r2, [r3, #40]	; 0x28
	htim5.Instance->PSC = TIM_PRESCALES[3];
 80015d8:	4b04      	ldr	r3, [pc, #16]	; (80015ec <read_PWM_TIM_prescalers_from_memory+0x48>)
 80015da:	88da      	ldrh	r2, [r3, #6]
 80015dc:	4b07      	ldr	r3, [pc, #28]	; (80015fc <read_PWM_TIM_prescalers_from_memory+0x58>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200000a0 	.word	0x200000a0
 80015f0:	200003cc 	.word	0x200003cc
 80015f4:	200001b4 	.word	0x200001b4
 80015f8:	200000bc 	.word	0x200000bc
 80015fc:	20000168 	.word	0x20000168

08001600 <write_PWM_TIM_prescalers_to_memory>:

void write_PWM_TIM_prescalers_to_memory() {
 8001600:	b5b0      	push	{r4, r5, r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	466b      	mov	r3, sp
 8001608:	461d      	mov	r5, r3
	uint32_t Nsize = sizeof(TIM_PRESCALES) / sizeof(TIM_PRESCALES[0]);
 800160a:	2304      	movs	r3, #4
 800160c:	60fb      	str	r3, [r7, #12]
	uint16_t wrBuf[Nsize];
 800160e:	68f8      	ldr	r0, [r7, #12]
 8001610:	4603      	mov	r3, r0
 8001612:	3b01      	subs	r3, #1
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	4601      	mov	r1, r0
 8001618:	f04f 0200 	mov.w	r2, #0
 800161c:	f04f 0300 	mov.w	r3, #0
 8001620:	f04f 0400 	mov.w	r4, #0
 8001624:	0114      	lsls	r4, r2, #4
 8001626:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 800162a:	010b      	lsls	r3, r1, #4
 800162c:	4601      	mov	r1, r0
 800162e:	f04f 0200 	mov.w	r2, #0
 8001632:	f04f 0300 	mov.w	r3, #0
 8001636:	f04f 0400 	mov.w	r4, #0
 800163a:	0114      	lsls	r4, r2, #4
 800163c:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8001640:	010b      	lsls	r3, r1, #4
 8001642:	0043      	lsls	r3, r0, #1
 8001644:	3301      	adds	r3, #1
 8001646:	3307      	adds	r3, #7
 8001648:	08db      	lsrs	r3, r3, #3
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	ebad 0d03 	sub.w	sp, sp, r3
 8001650:	466b      	mov	r3, sp
 8001652:	3301      	adds	r3, #1
 8001654:	085b      	lsrs	r3, r3, #1
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	607b      	str	r3, [r7, #4]
	fill_uint16_array(RX_DATA, wrBuf, 1, Nsize); // 1 because choice is first element
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2201      	movs	r2, #1
 8001662:	4809      	ldr	r0, [pc, #36]	; (8001688 <write_PWM_TIM_prescalers_to_memory+0x88>)
 8001664:	f7ff ff04 	bl	8001470 <fill_uint16_array>
	FlashWriteN(0, wrBuf, Nsize, DATA_TYPE_U16);
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	2301      	movs	r3, #1
 800166c:	68fa      	ldr	r2, [r7, #12]
 800166e:	2000      	movs	r0, #0
 8001670:	f7fe fdd6 	bl	8000220 <FlashWriteN>
	read_PWM_TIM_prescalers_from_memory();
 8001674:	f7ff ff96 	bl	80015a4 <read_PWM_TIM_prescalers_from_memory>
	is_ready();
 8001678:	f7ff fe58 	bl	800132c <is_ready>
 800167c:	46ad      	mov	sp, r5
}
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bdb0      	pop	{r4, r5, r7, pc}
 8001686:	bf00      	nop
 8001688:	20000030 	.word	0x20000030

0800168c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001690:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001692:	e7fe      	b.n	8001692 <Error_Handler+0x6>

08001694 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169a:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <HAL_MspInit+0x44>)
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	4a0e      	ldr	r2, [pc, #56]	; (80016d8 <HAL_MspInit+0x44>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6193      	str	r3, [r2, #24]
 80016a6:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <HAL_MspInit+0x44>)
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b2:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <HAL_MspInit+0x44>)
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	4a08      	ldr	r2, [pc, #32]	; (80016d8 <HAL_MspInit+0x44>)
 80016b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016bc:	61d3      	str	r3, [r2, #28]
 80016be:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <HAL_MspInit+0x44>)
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c6:	603b      	str	r3, [r7, #0]
 80016c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	40021000 	.word	0x40021000

080016dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08a      	sub	sp, #40	; 0x28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a29      	ldr	r2, [pc, #164]	; (80017a0 <HAL_ADC_MspInit+0xc4>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d14c      	bne.n	8001798 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016fe:	4b29      	ldr	r3, [pc, #164]	; (80017a4 <HAL_ADC_MspInit+0xc8>)
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	4a28      	ldr	r2, [pc, #160]	; (80017a4 <HAL_ADC_MspInit+0xc8>)
 8001704:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001708:	6193      	str	r3, [r2, #24]
 800170a:	4b26      	ldr	r3, [pc, #152]	; (80017a4 <HAL_ADC_MspInit+0xc8>)
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001716:	4b23      	ldr	r3, [pc, #140]	; (80017a4 <HAL_ADC_MspInit+0xc8>)
 8001718:	695b      	ldr	r3, [r3, #20]
 800171a:	4a22      	ldr	r2, [pc, #136]	; (80017a4 <HAL_ADC_MspInit+0xc8>)
 800171c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001720:	6153      	str	r3, [r2, #20]
 8001722:	4b20      	ldr	r3, [pc, #128]	; (80017a4 <HAL_ADC_MspInit+0xc8>)
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800172e:	230f      	movs	r3, #15
 8001730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001732:	2303      	movs	r3, #3
 8001734:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173a:	f107 0314 	add.w	r3, r7, #20
 800173e:	4619      	mov	r1, r3
 8001740:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001744:	f001 fd00 	bl	8003148 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001748:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <HAL_ADC_MspInit+0xcc>)
 800174a:	4a18      	ldr	r2, [pc, #96]	; (80017ac <HAL_ADC_MspInit+0xd0>)
 800174c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800174e:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <HAL_ADC_MspInit+0xcc>)
 8001750:	2200      	movs	r2, #0
 8001752:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001754:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <HAL_ADC_MspInit+0xcc>)
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800175a:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <HAL_ADC_MspInit+0xcc>)
 800175c:	2280      	movs	r2, #128	; 0x80
 800175e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <HAL_ADC_MspInit+0xcc>)
 8001762:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001766:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001768:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <HAL_ADC_MspInit+0xcc>)
 800176a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800176e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001770:	4b0d      	ldr	r3, [pc, #52]	; (80017a8 <HAL_ADC_MspInit+0xcc>)
 8001772:	2220      	movs	r2, #32
 8001774:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001776:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <HAL_ADC_MspInit+0xcc>)
 8001778:	2200      	movs	r2, #0
 800177a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800177c:	480a      	ldr	r0, [pc, #40]	; (80017a8 <HAL_ADC_MspInit+0xcc>)
 800177e:	f001 f957 	bl	8002a30 <HAL_DMA_Init>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8001788:	f7ff ff80 	bl	800168c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a06      	ldr	r2, [pc, #24]	; (80017a8 <HAL_ADC_MspInit+0xcc>)
 8001790:	621a      	str	r2, [r3, #32]
 8001792:	4a05      	ldr	r2, [pc, #20]	; (80017a8 <HAL_ADC_MspInit+0xcc>)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001798:	bf00      	nop
 800179a:	3728      	adds	r7, #40	; 0x28
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40012400 	.word	0x40012400
 80017a4:	40021000 	.word	0x40021000
 80017a8:	2000033c 	.word	0x2000033c
 80017ac:	40020008 	.word	0x40020008

080017b0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08c      	sub	sp, #48	; 0x30
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	f107 031c 	add.w	r3, r7, #28
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a2b      	ldr	r2, [pc, #172]	; (800187c <HAL_DAC_MspInit+0xcc>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d125      	bne.n	800181e <HAL_DAC_MspInit+0x6e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80017d2:	4b2b      	ldr	r3, [pc, #172]	; (8001880 <HAL_DAC_MspInit+0xd0>)
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	4a2a      	ldr	r2, [pc, #168]	; (8001880 <HAL_DAC_MspInit+0xd0>)
 80017d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80017dc:	61d3      	str	r3, [r2, #28]
 80017de:	4b28      	ldr	r3, [pc, #160]	; (8001880 <HAL_DAC_MspInit+0xd0>)
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80017e6:	61bb      	str	r3, [r7, #24]
 80017e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ea:	4b25      	ldr	r3, [pc, #148]	; (8001880 <HAL_DAC_MspInit+0xd0>)
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	4a24      	ldr	r2, [pc, #144]	; (8001880 <HAL_DAC_MspInit+0xd0>)
 80017f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f4:	6153      	str	r3, [r2, #20]
 80017f6:	4b22      	ldr	r3, [pc, #136]	; (8001880 <HAL_DAC_MspInit+0xd0>)
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001802:	2330      	movs	r3, #48	; 0x30
 8001804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001806:	2303      	movs	r3, #3
 8001808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180e:	f107 031c 	add.w	r3, r7, #28
 8001812:	4619      	mov	r1, r3
 8001814:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001818:	f001 fc96 	bl	8003148 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
 800181c:	e029      	b.n	8001872 <HAL_DAC_MspInit+0xc2>
  else if(hdac->Instance==DAC2)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a18      	ldr	r2, [pc, #96]	; (8001884 <HAL_DAC_MspInit+0xd4>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d124      	bne.n	8001872 <HAL_DAC_MspInit+0xc2>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8001828:	4b15      	ldr	r3, [pc, #84]	; (8001880 <HAL_DAC_MspInit+0xd0>)
 800182a:	69db      	ldr	r3, [r3, #28]
 800182c:	4a14      	ldr	r2, [pc, #80]	; (8001880 <HAL_DAC_MspInit+0xd0>)
 800182e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001832:	61d3      	str	r3, [r2, #28]
 8001834:	4b12      	ldr	r3, [pc, #72]	; (8001880 <HAL_DAC_MspInit+0xd0>)
 8001836:	69db      	ldr	r3, [r3, #28]
 8001838:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800183c:	613b      	str	r3, [r7, #16]
 800183e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001840:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <HAL_DAC_MspInit+0xd0>)
 8001842:	695b      	ldr	r3, [r3, #20]
 8001844:	4a0e      	ldr	r2, [pc, #56]	; (8001880 <HAL_DAC_MspInit+0xd0>)
 8001846:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800184a:	6153      	str	r3, [r2, #20]
 800184c:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <HAL_DAC_MspInit+0xd0>)
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001858:	2340      	movs	r3, #64	; 0x40
 800185a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800185c:	2303      	movs	r3, #3
 800185e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001864:	f107 031c 	add.w	r3, r7, #28
 8001868:	4619      	mov	r1, r3
 800186a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800186e:	f001 fc6b 	bl	8003148 <HAL_GPIO_Init>
}
 8001872:	bf00      	nop
 8001874:	3730      	adds	r7, #48	; 0x30
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40007400 	.word	0x40007400
 8001880:	40021000 	.word	0x40021000
 8001884:	40009800 	.word	0x40009800

08001888 <HAL_SDADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hsdadc: SDADC handle pointer
* @retval None
*/
void HAL_SDADC_MspInit(SDADC_HandleTypeDef* hsdadc)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08e      	sub	sp, #56	; 0x38
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001890:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
  if(hsdadc->Instance==SDADC1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a4b      	ldr	r2, [pc, #300]	; (80019d4 <HAL_SDADC_MspInit+0x14c>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d145      	bne.n	8001936 <HAL_SDADC_MspInit+0xae>
  {
  /* USER CODE BEGIN SDADC1_MspInit 0 */

  /* USER CODE END SDADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDADC1_CLK_ENABLE();
 80018aa:	4b4b      	ldr	r3, [pc, #300]	; (80019d8 <HAL_SDADC_MspInit+0x150>)
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	4a4a      	ldr	r2, [pc, #296]	; (80019d8 <HAL_SDADC_MspInit+0x150>)
 80018b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018b4:	6193      	str	r3, [r2, #24]
 80018b6:	4b48      	ldr	r3, [pc, #288]	; (80019d8 <HAL_SDADC_MspInit+0x150>)
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018be:	623b      	str	r3, [r7, #32]
 80018c0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c2:	4b45      	ldr	r3, [pc, #276]	; (80019d8 <HAL_SDADC_MspInit+0x150>)
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	4a44      	ldr	r2, [pc, #272]	; (80019d8 <HAL_SDADC_MspInit+0x150>)
 80018c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018cc:	6153      	str	r3, [r2, #20]
 80018ce:	4b42      	ldr	r3, [pc, #264]	; (80019d8 <HAL_SDADC_MspInit+0x150>)
 80018d0:	695b      	ldr	r3, [r3, #20]
 80018d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018d6:	61fb      	str	r3, [r7, #28]
 80018d8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018da:	4b3f      	ldr	r3, [pc, #252]	; (80019d8 <HAL_SDADC_MspInit+0x150>)
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	4a3e      	ldr	r2, [pc, #248]	; (80019d8 <HAL_SDADC_MspInit+0x150>)
 80018e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018e4:	6153      	str	r3, [r2, #20]
 80018e6:	4b3c      	ldr	r3, [pc, #240]	; (80019d8 <HAL_SDADC_MspInit+0x150>)
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ee:	61bb      	str	r3, [r7, #24]
 80018f0:	69bb      	ldr	r3, [r7, #24]
    PB1     ------> SDADC1_AIN6M
    PB2     ------> SDADC1_AIN4P
    PE8     ------> SDADC1_AIN8P
    PE9     ------> SDADC1_AIN8M
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80018f2:	2307      	movs	r3, #7
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018f6:	2303      	movs	r3, #3
 80018f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001902:	4619      	mov	r1, r3
 8001904:	4835      	ldr	r0, [pc, #212]	; (80019dc <HAL_SDADC_MspInit+0x154>)
 8001906:	f001 fc1f 	bl	8003148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800190a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800190e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001910:	2303      	movs	r3, #3
 8001912:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800191c:	4619      	mov	r1, r3
 800191e:	4830      	ldr	r0, [pc, #192]	; (80019e0 <HAL_SDADC_MspInit+0x158>)
 8001920:	f001 fc12 	bl	8003148 <HAL_GPIO_Init>

    /* SDADC1 interrupt Init */
    HAL_NVIC_SetPriority(SDADC1_IRQn, 0, 0);
 8001924:	2200      	movs	r2, #0
 8001926:	2100      	movs	r1, #0
 8001928:	203d      	movs	r0, #61	; 0x3d
 800192a:	f000 ff6c 	bl	8002806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDADC1_IRQn);
 800192e:	203d      	movs	r0, #61	; 0x3d
 8001930:	f000 ff85 	bl	800283e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDADC3_MspInit 1 */

  /* USER CODE END SDADC3_MspInit 1 */
  }

}
 8001934:	e04a      	b.n	80019cc <HAL_SDADC_MspInit+0x144>
  else if(hsdadc->Instance==SDADC3)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a2a      	ldr	r2, [pc, #168]	; (80019e4 <HAL_SDADC_MspInit+0x15c>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d145      	bne.n	80019cc <HAL_SDADC_MspInit+0x144>
    __HAL_RCC_SDADC3_CLK_ENABLE();
 8001940:	4b25      	ldr	r3, [pc, #148]	; (80019d8 <HAL_SDADC_MspInit+0x150>)
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	4a24      	ldr	r2, [pc, #144]	; (80019d8 <HAL_SDADC_MspInit+0x150>)
 8001946:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800194a:	6193      	str	r3, [r2, #24]
 800194c:	4b22      	ldr	r3, [pc, #136]	; (80019d8 <HAL_SDADC_MspInit+0x150>)
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001958:	4b1f      	ldr	r3, [pc, #124]	; (80019d8 <HAL_SDADC_MspInit+0x150>)
 800195a:	695b      	ldr	r3, [r3, #20]
 800195c:	4a1e      	ldr	r2, [pc, #120]	; (80019d8 <HAL_SDADC_MspInit+0x150>)
 800195e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001962:	6153      	str	r3, [r2, #20]
 8001964:	4b1c      	ldr	r3, [pc, #112]	; (80019d8 <HAL_SDADC_MspInit+0x150>)
 8001966:	695b      	ldr	r3, [r3, #20]
 8001968:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001970:	4b19      	ldr	r3, [pc, #100]	; (80019d8 <HAL_SDADC_MspInit+0x150>)
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	4a18      	ldr	r2, [pc, #96]	; (80019d8 <HAL_SDADC_MspInit+0x150>)
 8001976:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800197a:	6153      	str	r3, [r2, #20]
 800197c:	4b16      	ldr	r3, [pc, #88]	; (80019d8 <HAL_SDADC_MspInit+0x150>)
 800197e:	695b      	ldr	r3, [r3, #20]
 8001980:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001988:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800198e:	2303      	movs	r3, #3
 8001990:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800199a:	4619      	mov	r1, r3
 800199c:	480f      	ldr	r0, [pc, #60]	; (80019dc <HAL_SDADC_MspInit+0x154>)
 800199e:	f001 fbd3 	bl	8003148 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80019a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019a8:	2303      	movs	r3, #3
 80019aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b4:	4619      	mov	r1, r3
 80019b6:	480c      	ldr	r0, [pc, #48]	; (80019e8 <HAL_SDADC_MspInit+0x160>)
 80019b8:	f001 fbc6 	bl	8003148 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDADC3_IRQn, 0, 0);
 80019bc:	2200      	movs	r2, #0
 80019be:	2100      	movs	r1, #0
 80019c0:	203f      	movs	r0, #63	; 0x3f
 80019c2:	f000 ff20 	bl	8002806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDADC3_IRQn);
 80019c6:	203f      	movs	r0, #63	; 0x3f
 80019c8:	f000 ff39 	bl	800283e <HAL_NVIC_EnableIRQ>
}
 80019cc:	bf00      	nop
 80019ce:	3738      	adds	r7, #56	; 0x38
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40016000 	.word	0x40016000
 80019d8:	40021000 	.word	0x40021000
 80019dc:	48000400 	.word	0x48000400
 80019e0:	48001000 	.word	0x48001000
 80019e4:	40016800 	.word	0x40016800
 80019e8:	48000c00 	.word	0x48000c00

080019ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b089      	sub	sp, #36	; 0x24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019fc:	d10c      	bne.n	8001a18 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019fe:	4b36      	ldr	r3, [pc, #216]	; (8001ad8 <HAL_TIM_Base_MspInit+0xec>)
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	4a35      	ldr	r2, [pc, #212]	; (8001ad8 <HAL_TIM_Base_MspInit+0xec>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	61d3      	str	r3, [r2, #28]
 8001a0a:	4b33      	ldr	r3, [pc, #204]	; (8001ad8 <HAL_TIM_Base_MspInit+0xec>)
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	61fb      	str	r3, [r7, #28]
 8001a14:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM19_MspInit 1 */

  /* USER CODE END TIM19_MspInit 1 */
  }

}
 8001a16:	e058      	b.n	8001aca <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a2f      	ldr	r2, [pc, #188]	; (8001adc <HAL_TIM_Base_MspInit+0xf0>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d10c      	bne.n	8001a3c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a22:	4b2d      	ldr	r3, [pc, #180]	; (8001ad8 <HAL_TIM_Base_MspInit+0xec>)
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	4a2c      	ldr	r2, [pc, #176]	; (8001ad8 <HAL_TIM_Base_MspInit+0xec>)
 8001a28:	f043 0302 	orr.w	r3, r3, #2
 8001a2c:	61d3      	str	r3, [r2, #28]
 8001a2e:	4b2a      	ldr	r3, [pc, #168]	; (8001ad8 <HAL_TIM_Base_MspInit+0xec>)
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	61bb      	str	r3, [r7, #24]
 8001a38:	69bb      	ldr	r3, [r7, #24]
}
 8001a3a:	e046      	b.n	8001aca <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM4)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a27      	ldr	r2, [pc, #156]	; (8001ae0 <HAL_TIM_Base_MspInit+0xf4>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d10c      	bne.n	8001a60 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a46:	4b24      	ldr	r3, [pc, #144]	; (8001ad8 <HAL_TIM_Base_MspInit+0xec>)
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	4a23      	ldr	r2, [pc, #140]	; (8001ad8 <HAL_TIM_Base_MspInit+0xec>)
 8001a4c:	f043 0304 	orr.w	r3, r3, #4
 8001a50:	61d3      	str	r3, [r2, #28]
 8001a52:	4b21      	ldr	r3, [pc, #132]	; (8001ad8 <HAL_TIM_Base_MspInit+0xec>)
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	f003 0304 	and.w	r3, r3, #4
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	697b      	ldr	r3, [r7, #20]
}
 8001a5e:	e034      	b.n	8001aca <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM5)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a1f      	ldr	r2, [pc, #124]	; (8001ae4 <HAL_TIM_Base_MspInit+0xf8>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d10c      	bne.n	8001a84 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a6a:	4b1b      	ldr	r3, [pc, #108]	; (8001ad8 <HAL_TIM_Base_MspInit+0xec>)
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	4a1a      	ldr	r2, [pc, #104]	; (8001ad8 <HAL_TIM_Base_MspInit+0xec>)
 8001a70:	f043 0308 	orr.w	r3, r3, #8
 8001a74:	61d3      	str	r3, [r2, #28]
 8001a76:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <HAL_TIM_Base_MspInit+0xec>)
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	613b      	str	r3, [r7, #16]
 8001a80:	693b      	ldr	r3, [r7, #16]
}
 8001a82:	e022      	b.n	8001aca <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM6)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a17      	ldr	r2, [pc, #92]	; (8001ae8 <HAL_TIM_Base_MspInit+0xfc>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d10c      	bne.n	8001aa8 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a8e:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <HAL_TIM_Base_MspInit+0xec>)
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	4a11      	ldr	r2, [pc, #68]	; (8001ad8 <HAL_TIM_Base_MspInit+0xec>)
 8001a94:	f043 0310 	orr.w	r3, r3, #16
 8001a98:	61d3      	str	r3, [r2, #28]
 8001a9a:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <HAL_TIM_Base_MspInit+0xec>)
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	f003 0310 	and.w	r3, r3, #16
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
}
 8001aa6:	e010      	b.n	8001aca <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM19)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a0f      	ldr	r2, [pc, #60]	; (8001aec <HAL_TIM_Base_MspInit+0x100>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d10b      	bne.n	8001aca <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM19_CLK_ENABLE();
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <HAL_TIM_Base_MspInit+0xec>)
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	4a08      	ldr	r2, [pc, #32]	; (8001ad8 <HAL_TIM_Base_MspInit+0xec>)
 8001ab8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001abc:	6193      	str	r3, [r2, #24]
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <HAL_TIM_Base_MspInit+0xec>)
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ac6:	60bb      	str	r3, [r7, #8]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
}
 8001aca:	bf00      	nop
 8001acc:	3724      	adds	r7, #36	; 0x24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	40000400 	.word	0x40000400
 8001ae0:	40000800 	.word	0x40000800
 8001ae4:	40000c00 	.word	0x40000c00
 8001ae8:	40001000 	.word	0x40001000
 8001aec:	40015c00 	.word	0x40015c00

08001af0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08c      	sub	sp, #48	; 0x30
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af8:	f107 031c 	add.w	r3, r7, #28
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]
 8001b06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b10:	d11e      	bne.n	8001b50 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b12:	4b53      	ldr	r3, [pc, #332]	; (8001c60 <HAL_TIM_MspPostInit+0x170>)
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	4a52      	ldr	r2, [pc, #328]	; (8001c60 <HAL_TIM_MspPostInit+0x170>)
 8001b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b1c:	6153      	str	r3, [r2, #20]
 8001b1e:	4b50      	ldr	r3, [pc, #320]	; (8001c60 <HAL_TIM_MspPostInit+0x170>)
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	61bb      	str	r3, [r7, #24]
 8001b28:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b30:	2302      	movs	r3, #2
 8001b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b40:	f107 031c 	add.w	r3, r7, #28
 8001b44:	4619      	mov	r1, r3
 8001b46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b4a:	f001 fafd 	bl	8003148 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001b4e:	e082      	b.n	8001c56 <HAL_TIM_MspPostInit+0x166>
  else if(htim->Instance==TIM3)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a43      	ldr	r2, [pc, #268]	; (8001c64 <HAL_TIM_MspPostInit+0x174>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d11c      	bne.n	8001b94 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5a:	4b41      	ldr	r3, [pc, #260]	; (8001c60 <HAL_TIM_MspPostInit+0x170>)
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	4a40      	ldr	r2, [pc, #256]	; (8001c60 <HAL_TIM_MspPostInit+0x170>)
 8001b60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b64:	6153      	str	r3, [r2, #20]
 8001b66:	4b3e      	ldr	r3, [pc, #248]	; (8001c60 <HAL_TIM_MspPostInit+0x170>)
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001b72:	2330      	movs	r3, #48	; 0x30
 8001b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b76:	2302      	movs	r3, #2
 8001b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b82:	2302      	movs	r3, #2
 8001b84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b86:	f107 031c 	add.w	r3, r7, #28
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4836      	ldr	r0, [pc, #216]	; (8001c68 <HAL_TIM_MspPostInit+0x178>)
 8001b8e:	f001 fadb 	bl	8003148 <HAL_GPIO_Init>
}
 8001b92:	e060      	b.n	8001c56 <HAL_TIM_MspPostInit+0x166>
  else if(htim->Instance==TIM4)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a34      	ldr	r2, [pc, #208]	; (8001c6c <HAL_TIM_MspPostInit+0x17c>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d138      	bne.n	8001c10 <HAL_TIM_MspPostInit+0x120>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b9e:	4b30      	ldr	r3, [pc, #192]	; (8001c60 <HAL_TIM_MspPostInit+0x170>)
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	4a2f      	ldr	r2, [pc, #188]	; (8001c60 <HAL_TIM_MspPostInit+0x170>)
 8001ba4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ba8:	6153      	str	r3, [r2, #20]
 8001baa:	4b2d      	ldr	r3, [pc, #180]	; (8001c60 <HAL_TIM_MspPostInit+0x170>)
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bb2:	613b      	str	r3, [r7, #16]
 8001bb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb6:	4b2a      	ldr	r3, [pc, #168]	; (8001c60 <HAL_TIM_MspPostInit+0x170>)
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	4a29      	ldr	r2, [pc, #164]	; (8001c60 <HAL_TIM_MspPostInit+0x170>)
 8001bbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bc0:	6153      	str	r3, [r2, #20]
 8001bc2:	4b27      	ldr	r3, [pc, #156]	; (8001c60 <HAL_TIM_MspPostInit+0x170>)
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001bce:	2340      	movs	r3, #64	; 0x40
 8001bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001bde:	2302      	movs	r3, #2
 8001be0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001be2:	f107 031c 	add.w	r3, r7, #28
 8001be6:	4619      	mov	r1, r3
 8001be8:	4821      	ldr	r0, [pc, #132]	; (8001c70 <HAL_TIM_MspPostInit+0x180>)
 8001bea:	f001 faad 	bl	8003148 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bee:	23c0      	movs	r3, #192	; 0xc0
 8001bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c02:	f107 031c 	add.w	r3, r7, #28
 8001c06:	4619      	mov	r1, r3
 8001c08:	4817      	ldr	r0, [pc, #92]	; (8001c68 <HAL_TIM_MspPostInit+0x178>)
 8001c0a:	f001 fa9d 	bl	8003148 <HAL_GPIO_Init>
}
 8001c0e:	e022      	b.n	8001c56 <HAL_TIM_MspPostInit+0x166>
  else if(htim->Instance==TIM5)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a17      	ldr	r2, [pc, #92]	; (8001c74 <HAL_TIM_MspPostInit+0x184>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d11d      	bne.n	8001c56 <HAL_TIM_MspPostInit+0x166>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1a:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <HAL_TIM_MspPostInit+0x170>)
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	4a10      	ldr	r2, [pc, #64]	; (8001c60 <HAL_TIM_MspPostInit+0x170>)
 8001c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c24:	6153      	str	r3, [r2, #20]
 8001c26:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <HAL_TIM_MspPostInit+0x170>)
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	60bb      	str	r3, [r7, #8]
 8001c30:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001c32:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c40:	2300      	movs	r3, #0
 8001c42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001c44:	2302      	movs	r3, #2
 8001c46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c48:	f107 031c 	add.w	r3, r7, #28
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c52:	f001 fa79 	bl	8003148 <HAL_GPIO_Init>
}
 8001c56:	bf00      	nop
 8001c58:	3730      	adds	r7, #48	; 0x30
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40021000 	.word	0x40021000
 8001c64:	40000400 	.word	0x40000400
 8001c68:	48000400 	.word	0x48000400
 8001c6c:	40000800 	.word	0x40000800
 8001c70:	48001400 	.word	0x48001400
 8001c74:	40000c00 	.word	0x40000c00

08001c78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08a      	sub	sp, #40	; 0x28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c80:	f107 0314 	add.w	r3, r7, #20
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a2b      	ldr	r2, [pc, #172]	; (8001d44 <HAL_UART_MspInit+0xcc>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d14f      	bne.n	8001d3a <HAL_UART_MspInit+0xc2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c9a:	4b2b      	ldr	r3, [pc, #172]	; (8001d48 <HAL_UART_MspInit+0xd0>)
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	4a2a      	ldr	r2, [pc, #168]	; (8001d48 <HAL_UART_MspInit+0xd0>)
 8001ca0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca4:	6193      	str	r3, [r2, #24]
 8001ca6:	4b28      	ldr	r3, [pc, #160]	; (8001d48 <HAL_UART_MspInit+0xd0>)
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cae:	613b      	str	r3, [r7, #16]
 8001cb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb2:	4b25      	ldr	r3, [pc, #148]	; (8001d48 <HAL_UART_MspInit+0xd0>)
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	4a24      	ldr	r2, [pc, #144]	; (8001d48 <HAL_UART_MspInit+0xd0>)
 8001cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cbc:	6153      	str	r3, [r2, #20]
 8001cbe:	4b22      	ldr	r3, [pc, #136]	; (8001d48 <HAL_UART_MspInit+0xd0>)
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001cca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cdc:	2307      	movs	r3, #7
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce0:	f107 0314 	add.w	r3, r7, #20
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cea:	f001 fa2d 	bl	8003148 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001cee:	4b17      	ldr	r3, [pc, #92]	; (8001d4c <HAL_UART_MspInit+0xd4>)
 8001cf0:	4a17      	ldr	r2, [pc, #92]	; (8001d50 <HAL_UART_MspInit+0xd8>)
 8001cf2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cf4:	4b15      	ldr	r3, [pc, #84]	; (8001d4c <HAL_UART_MspInit+0xd4>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cfa:	4b14      	ldr	r3, [pc, #80]	; (8001d4c <HAL_UART_MspInit+0xd4>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d00:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <HAL_UART_MspInit+0xd4>)
 8001d02:	2280      	movs	r2, #128	; 0x80
 8001d04:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d06:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <HAL_UART_MspInit+0xd4>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d0c:	4b0f      	ldr	r3, [pc, #60]	; (8001d4c <HAL_UART_MspInit+0xd4>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001d12:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <HAL_UART_MspInit+0xd4>)
 8001d14:	2220      	movs	r2, #32
 8001d16:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d18:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <HAL_UART_MspInit+0xd4>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001d1e:	480b      	ldr	r0, [pc, #44]	; (8001d4c <HAL_UART_MspInit+0xd4>)
 8001d20:	f000 fe86 	bl	8002a30 <HAL_DMA_Init>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8001d2a:	f7ff fcaf 	bl	800168c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a06      	ldr	r2, [pc, #24]	; (8001d4c <HAL_UART_MspInit+0xd4>)
 8001d32:	671a      	str	r2, [r3, #112]	; 0x70
 8001d34:	4a05      	ldr	r2, [pc, #20]	; (8001d4c <HAL_UART_MspInit+0xd4>)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d3a:	bf00      	nop
 8001d3c:	3728      	adds	r7, #40	; 0x28
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40013800 	.word	0x40013800
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	20000230 	.word	0x20000230
 8001d50:	40020058 	.word	0x40020058

08001d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d58:	e7fe      	b.n	8001d58 <NMI_Handler+0x4>

08001d5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d5e:	e7fe      	b.n	8001d5e <HardFault_Handler+0x4>

08001d60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d64:	e7fe      	b.n	8001d64 <MemManage_Handler+0x4>

08001d66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d66:	b480      	push	{r7}
 8001d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d6a:	e7fe      	b.n	8001d6a <BusFault_Handler+0x4>

08001d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d70:	e7fe      	b.n	8001d70 <UsageFault_Handler+0x4>

08001d72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001da0:	f000 f8ac 	bl	8001efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001da4:	bf00      	nop
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001dac:	4802      	ldr	r0, [pc, #8]	; (8001db8 <DMA1_Channel1_IRQHandler+0x10>)
 8001dae:	f000 fee5 	bl	8002b7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	2000033c 	.word	0x2000033c

08001dbc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001dc0:	4802      	ldr	r0, [pc, #8]	; (8001dcc <DMA1_Channel5_IRQHandler+0x10>)
 8001dc2:	f000 fedb 	bl	8002b7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000230 	.word	0x20000230

08001dd0 <SDADC1_IRQHandler>:

/**
  * @brief This function handles SDADC1 global interrupt.
  */
void SDADC1_IRQHandler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDADC1_IRQn 0 */

  /* USER CODE END SDADC1_IRQn 0 */
  HAL_SDADC_IRQHandler(&hsdadc1);
 8001dd4:	4802      	ldr	r0, [pc, #8]	; (8001de0 <SDADC1_IRQHandler+0x10>)
 8001dd6:	f003 f8d3 	bl	8004f80 <HAL_SDADC_IRQHandler>
  /* USER CODE BEGIN SDADC1_IRQn 1 */

  /* USER CODE END SDADC1_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	200002f8 	.word	0x200002f8

08001de4 <SDADC3_IRQHandler>:

/**
  * @brief This function handles SDADC3 global interrupt.
  */
void SDADC3_IRQHandler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDADC3_IRQn 0 */

  /* USER CODE END SDADC3_IRQn 0 */
  HAL_SDADC_IRQHandler(&hsdadc3);
 8001de8:	4802      	ldr	r0, [pc, #8]	; (8001df4 <SDADC3_IRQHandler+0x10>)
 8001dea:	f003 f8c9 	bl	8004f80 <HAL_SDADC_IRQHandler>
  /* USER CODE BEGIN SDADC3_IRQn 1 */

  /* USER CODE END SDADC3_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000418 	.word	0x20000418

08001df8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <SystemInit+0x20>)
 8001dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e02:	4a05      	ldr	r2, [pc, #20]	; (8001e18 <SystemInit+0x20>)
 8001e04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e54 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e20:	480d      	ldr	r0, [pc, #52]	; (8001e58 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e22:	490e      	ldr	r1, [pc, #56]	; (8001e5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e24:	4a0e      	ldr	r2, [pc, #56]	; (8001e60 <LoopForever+0xe>)
  movs r3, #0
 8001e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e28:	e002      	b.n	8001e30 <LoopCopyDataInit>

08001e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e2e:	3304      	adds	r3, #4

08001e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e34:	d3f9      	bcc.n	8001e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e36:	4a0b      	ldr	r2, [pc, #44]	; (8001e64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e38:	4c0b      	ldr	r4, [pc, #44]	; (8001e68 <LoopForever+0x16>)
  movs r3, #0
 8001e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e3c:	e001      	b.n	8001e42 <LoopFillZerobss>

08001e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e40:	3204      	adds	r2, #4

08001e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e44:	d3fb      	bcc.n	8001e3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e46:	f7ff ffd7 	bl	8001df8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e4a:	f004 fe59 	bl	8006b00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e4e:	f7fe fb19 	bl	8000484 <main>

08001e52 <LoopForever>:

LoopForever:
    b LoopForever
 8001e52:	e7fe      	b.n	8001e52 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e54:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e5c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001e60:	08006bb0 	.word	0x08006bb0
  ldr r2, =_sbss
 8001e64:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001e68:	20000480 	.word	0x20000480

08001e6c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e6c:	e7fe      	b.n	8001e6c <ADC1_IRQHandler>
	...

08001e70 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e74:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <HAL_Init+0x28>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a07      	ldr	r2, [pc, #28]	; (8001e98 <HAL_Init+0x28>)
 8001e7a:	f043 0310 	orr.w	r3, r3, #16
 8001e7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e80:	2003      	movs	r0, #3
 8001e82:	f000 fcb5 	bl	80027f0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e86:	2000      	movs	r0, #0
 8001e88:	f000 f808 	bl	8001e9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e8c:	f7ff fc02 	bl	8001694 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40022000 	.word	0x40022000

08001e9c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ea4:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <HAL_InitTick+0x54>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <HAL_InitTick+0x58>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	4619      	mov	r1, r3
 8001eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f000 fccd 	bl	800285a <HAL_SYSTICK_Config>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e00e      	b.n	8001ee8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b0f      	cmp	r3, #15
 8001ece:	d80a      	bhi.n	8001ee6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ed8:	f000 fc95 	bl	8002806 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001edc:	4a06      	ldr	r2, [pc, #24]	; (8001ef8 <HAL_InitTick+0x5c>)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	e000      	b.n	8001ee8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	20000004 	.word	0x20000004
 8001ef4:	2000000c 	.word	0x2000000c
 8001ef8:	20000008 	.word	0x20000008

08001efc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_IncTick+0x20>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	461a      	mov	r2, r3
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_IncTick+0x24>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	4a04      	ldr	r2, [pc, #16]	; (8001f20 <HAL_IncTick+0x24>)
 8001f0e:	6013      	str	r3, [r2, #0]
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	2000000c 	.word	0x2000000c
 8001f20:	2000045c 	.word	0x2000045c

08001f24 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return uwTick;  
 8001f28:	4b03      	ldr	r3, [pc, #12]	; (8001f38 <HAL_GetTick+0x14>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	2000045c 	.word	0x2000045c

08001f3c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f44:	f7ff ffee 	bl	8001f24 <HAL_GetTick>
 8001f48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f54:	d005      	beq.n	8001f62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f56:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <HAL_Delay+0x40>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4413      	add	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001f62:	bf00      	nop
 8001f64:	f7ff ffde 	bl	8001f24 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d8f7      	bhi.n	8001f64 <HAL_Delay+0x28>
  {
  }
}
 8001f74:	bf00      	nop
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	2000000c 	.word	0x2000000c

08001f80 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e0be      	b.n	800215c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d109      	bne.n	8002000 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7ff fb6e 	bl	80016dc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f000 faeb 	bl	80025dc <ADC_ConversionStop_Disable>
 8002006:	4603      	mov	r3, r0
 8002008:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200e:	f003 0310 	and.w	r3, r3, #16
 8002012:	2b00      	cmp	r3, #0
 8002014:	f040 8099 	bne.w	800214a <HAL_ADC_Init+0x18e>
 8002018:	7dfb      	ldrb	r3, [r7, #23]
 800201a:	2b00      	cmp	r3, #0
 800201c:	f040 8095 	bne.w	800214a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002024:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002028:	f023 0302 	bic.w	r3, r3, #2
 800202c:	f043 0202 	orr.w	r2, r3, #2
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685a      	ldr	r2, [r3, #4]
                hadc->Init.ExternalTrigConv                      |
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 800203c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) );
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	7b1b      	ldrb	r3, [r3, #12]
 8002042:	005b      	lsls	r3, r3, #1
                hadc->Init.ExternalTrigConv                      |
 8002044:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 8002046:	68ba      	ldr	r2, [r7, #8]
 8002048:	4313      	orrs	r3, r2
 800204a:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002054:	d003      	beq.n	800205e <HAL_ADC_Init+0xa2>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d102      	bne.n	8002064 <HAL_ADC_Init+0xa8>
 800205e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002062:	e000      	b.n	8002066 <HAL_ADC_Init+0xaa>
 8002064:	2300      	movs	r3, #0
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	4313      	orrs	r3, r2
 800206a:	613b      	str	r3, [r7, #16]

    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	7d1b      	ldrb	r3, [r3, #20]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d119      	bne.n	80020a8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	7b1b      	ldrb	r3, [r3, #12]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d109      	bne.n	8002090 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
      tmp_cr1 |= (ADC_CR1_DISCEN                                           |
                  ADC_CR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion) );
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	3b01      	subs	r3, #1
 8002082:	035a      	lsls	r2, r3, #13
      tmp_cr1 |= (ADC_CR1_DISCEN                                           |
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	4313      	orrs	r3, r2
 8002088:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800208c:	613b      	str	r3, [r7, #16]
 800208e:	e00b      	b.n	80020a8 <HAL_ADC_Init+0xec>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002094:	f043 0220 	orr.w	r2, r3, #32
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a0:	f043 0201 	orr.w	r2, r3, #1
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	4b28      	ldr	r3, [pc, #160]	; (8002164 <HAL_ADC_Init+0x1a8>)
 80020c4:	4013      	ands	r3, r2
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	6812      	ldr	r2, [r2, #0]
 80020ca:	68b9      	ldr	r1, [r7, #8]
 80020cc:	430b      	orrs	r3, r1
 80020ce:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020d8:	d003      	beq.n	80020e2 <HAL_ADC_Init+0x126>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d104      	bne.n	80020ec <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	3b01      	subs	r3, #1
 80020e8:	051b      	lsls	r3, r3, #20
 80020ea:	60fb      	str	r3, [r7, #12]
    }
    
    MODIFY_REG(hadc->Instance->SQR1,
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689a      	ldr	r2, [r3, #8]
 8002106:	4b18      	ldr	r3, [pc, #96]	; (8002168 <HAL_ADC_Init+0x1ac>)
 8002108:	4013      	ands	r3, r2
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	429a      	cmp	r2, r3
 800210e:	d10b      	bne.n	8002128 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211a:	f023 0303 	bic.w	r3, r3, #3
 800211e:	f043 0201 	orr.w	r2, r3, #1
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002126:	e018      	b.n	800215a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212c:	f023 0312 	bic.w	r3, r3, #18
 8002130:	f043 0210 	orr.w	r2, r3, #16
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213c:	f043 0201 	orr.w	r2, r3, #1
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002148:	e007      	b.n	800215a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214e:	f043 0210 	orr.w	r2, r3, #16
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800215a:	7dfb      	ldrb	r3, [r7, #23]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	ffe1f7fd 	.word	0xffe1f7fd
 8002168:	ff1f0efe 	.word	0xff1f0efe

0800216c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002182:	2b01      	cmp	r3, #1
 8002184:	d101      	bne.n	800218a <HAL_ADC_Start_DMA+0x1e>
 8002186:	2302      	movs	r3, #2
 8002188:	e076      	b.n	8002278 <HAL_ADC_Start_DMA+0x10c>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f000 f9d0 	bl	8002538 <ADC_Enable>
 8002198:	4603      	mov	r3, r0
 800219a:	75fb      	strb	r3, [r7, #23]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800219c:	7dfb      	ldrb	r3, [r7, #23]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d169      	bne.n	8002276 <HAL_ADC_Start_DMA+0x10a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021aa:	f023 0301 	bic.w	r3, r3, #1
 80021ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) */
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d007      	beq.n	80021d4 <HAL_ADC_Start_DMA+0x68>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	629a      	str	r2, [r3, #40]	; 0x28
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021e0:	d106      	bne.n	80021f0 <HAL_ADC_Start_DMA+0x84>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e6:	f023 0206 	bic.w	r2, r3, #6
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80021ee:	e002      	b.n	80021f6 <HAL_ADC_Start_DMA+0x8a>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	4a1f      	ldr	r2, [pc, #124]	; (8002280 <HAL_ADC_Start_DMA+0x114>)
 8002204:	629a      	str	r2, [r3, #40]	; 0x28
       
    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	4a1e      	ldr	r2, [pc, #120]	; (8002284 <HAL_ADC_Start_DMA+0x118>)
 800220c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	4a1d      	ldr	r2, [pc, #116]	; (8002288 <HAL_ADC_Start_DMA+0x11c>)
 8002214:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f06f 0202 	mvn.w	r2, #2
 800221e:	601a      	str	r2, [r3, #0]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800222e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6a18      	ldr	r0, [r3, #32]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	334c      	adds	r3, #76	; 0x4c
 800223a:	4619      	mov	r1, r3
 800223c:	68ba      	ldr	r2, [r7, #8]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f000 fc3d 	bl	8002abe <HAL_DMA_Start_IT>
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800224e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002252:	d108      	bne.n	8002266 <HAL_ADC_Start_DMA+0xfa>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689a      	ldr	r2, [r3, #8]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	e007      	b.n	8002276 <HAL_ADC_Start_DMA+0x10a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002274:	609a      	str	r2, [r3, #8]
    }
  }

  /* Return function status */
  return tmp_hal_status;
 8002276:	7dfb      	ldrb	r3, [r7, #23]
}
 8002278:	4618      	mov	r0, r3
 800227a:	3718      	adds	r7, #24
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	0800246d 	.word	0x0800246d
 8002284:	080024e9 	.word	0x080024e9
 8002288:	08002505 	.word	0x08002505

0800228c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002296:	2300      	movs	r3, #0
 8002298:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800229a:	2300      	movs	r3, #0
 800229c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d101      	bne.n	80022ac <HAL_ADC_ConfigChannel+0x20>
 80022a8:	2302      	movs	r3, #2
 80022aa:	e0d2      	b.n	8002452 <HAL_ADC_ConfigChannel+0x1c6>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6U */
  if (sConfig->Rank < 7U)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b06      	cmp	r3, #6
 80022ba:	d81c      	bhi.n	80022f6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	4613      	mov	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	3b05      	subs	r3, #5
 80022ce:	221f      	movs	r2, #31
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	43db      	mvns	r3, r3
 80022d6:	4019      	ands	r1, r3
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	6818      	ldr	r0, [r3, #0]
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	4613      	mov	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4413      	add	r3, r2
 80022e6:	3b05      	subs	r3, #5
 80022e8:	fa00 f203 	lsl.w	r2, r0, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	635a      	str	r2, [r3, #52]	; 0x34
 80022f4:	e03c      	b.n	8002370 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12U */
  else if (sConfig->Rank < 13U)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b0c      	cmp	r3, #12
 80022fc:	d81c      	bhi.n	8002338 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	4613      	mov	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	3b23      	subs	r3, #35	; 0x23
 8002310:	221f      	movs	r2, #31
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	4019      	ands	r1, r3
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	6818      	ldr	r0, [r3, #0]
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	3b23      	subs	r3, #35	; 0x23
 800232a:	fa00 f203 	lsl.w	r2, r0, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	430a      	orrs	r2, r1
 8002334:	631a      	str	r2, [r3, #48]	; 0x30
 8002336:	e01b      	b.n	8002370 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16U */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	4613      	mov	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	4413      	add	r3, r2
 8002348:	3b41      	subs	r3, #65	; 0x41
 800234a:	221f      	movs	r2, #31
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	4019      	ands	r1, r3
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	6818      	ldr	r0, [r3, #0]
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	3b41      	subs	r3, #65	; 0x41
 8002364:	fa00 f203 	lsl.w	r2, r0, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	430a      	orrs	r2, r1
 800236e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 18U */
  if (sConfig->Channel > ADC_CHANNEL_10)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2b0a      	cmp	r3, #10
 8002376:	d91c      	bls.n	80023b2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68d9      	ldr	r1, [r3, #12]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	4613      	mov	r3, r2
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	4413      	add	r3, r2
 8002388:	3b1e      	subs	r3, #30
 800238a:	2207      	movs	r2, #7
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	4019      	ands	r1, r3
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	6898      	ldr	r0, [r3, #8]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	4613      	mov	r3, r2
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	4413      	add	r3, r2
 80023a2:	3b1e      	subs	r3, #30
 80023a4:	fa00 f203 	lsl.w	r2, r0, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	430a      	orrs	r2, r1
 80023ae:	60da      	str	r2, [r3, #12]
 80023b0:	e019      	b.n	80023e6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else   /* For channels 0 to 9U */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	6919      	ldr	r1, [r3, #16]
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	4613      	mov	r3, r2
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	4413      	add	r3, r2
 80023c2:	2207      	movs	r2, #7
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	4019      	ands	r1, r3
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	6898      	ldr	r0, [r3, #8]
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	4613      	mov	r3, r2
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	4413      	add	r3, r2
 80023da:	fa00 f203 	lsl.w	r2, r0, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2b10      	cmp	r3, #16
 80023ec:	d003      	beq.n	80023f6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80023f2:	2b11      	cmp	r3, #17
 80023f4:	d11e      	bne.n	8002434 <HAL_ADC_ConfigChannel+0x1a8>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002404:	609a      	str	r2, [r3, #8]
    
    if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2b10      	cmp	r3, #16
 800240c:	d11c      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x1bc>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800240e:	4b14      	ldr	r3, [pc, #80]	; (8002460 <HAL_ADC_ConfigChannel+0x1d4>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a14      	ldr	r2, [pc, #80]	; (8002464 <HAL_ADC_ConfigChannel+0x1d8>)
 8002414:	fba2 2303 	umull	r2, r3, r2, r3
 8002418:	0c9a      	lsrs	r2, r3, #18
 800241a:	4613      	mov	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0U)
 8002424:	e002      	b.n	800242c <HAL_ADC_ConfigChannel+0x1a0>
      {
        wait_loop_index--;
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	3b01      	subs	r3, #1
 800242a:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0U)
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1f9      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x19a>
    if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002432:	e009      	b.n	8002448 <HAL_ADC_ConfigChannel+0x1bc>
      }
    }
  }
  /* if ADC1 Channel_18 is selected, enable VBAT measurement path */
  else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2b12      	cmp	r3, #18
 800243a:	d105      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x1bc>
  {
    SET_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_VBAT);
 800243c:	4b0a      	ldr	r3, [pc, #40]	; (8002468 <HAL_ADC_ConfigChannel+0x1dc>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a09      	ldr	r2, [pc, #36]	; (8002468 <HAL_ADC_ConfigChannel+0x1dc>)
 8002442:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002446:	6013      	str	r3, [r2, #0]
  }

   
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002450:	7bfb      	ldrb	r3, [r7, #15]
}
 8002452:	4618      	mov	r0, r3
 8002454:	3714      	adds	r7, #20
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	20000004 	.word	0x20000004
 8002464:	431bde83 	.word	0x431bde83
 8002468:	40010000 	.word	0x40010000

0800246c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002478:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002482:	2b00      	cmp	r3, #0
 8002484:	d127      	bne.n	80024d6 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800249c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80024a0:	d115      	bne.n	80024ce <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d111      	bne.n	80024ce <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d105      	bne.n	80024ce <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c6:	f043 0201 	orr.w	r2, r3, #1
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f7ff fd56 	bl	8001f80 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80024d4:	e004      	b.n	80024e0 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	4798      	blx	r3
}
 80024e0:	bf00      	nop
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f4:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f7ff fd4c 	bl	8001f94 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80024fc:	bf00      	nop
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002516:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002522:	f043 0204 	orr.w	r2, r3, #4
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f7ff fd3c 	bl	8001fa8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002530:	bf00      	nop
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b01      	cmp	r3, #1
 8002554:	d039      	beq.n	80025ca <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f042 0201 	orr.w	r2, r2, #1
 8002564:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002566:	4b1b      	ldr	r3, [pc, #108]	; (80025d4 <ADC_Enable+0x9c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a1b      	ldr	r2, [pc, #108]	; (80025d8 <ADC_Enable+0xa0>)
 800256c:	fba2 2303 	umull	r2, r3, r2, r3
 8002570:	0c9b      	lsrs	r3, r3, #18
 8002572:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002574:	e002      	b.n	800257c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	3b01      	subs	r3, #1
 800257a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f9      	bne.n	8002576 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002582:	f7ff fccf 	bl	8001f24 <HAL_GetTick>
 8002586:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002588:	e018      	b.n	80025bc <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800258a:	f7ff fccb 	bl	8001f24 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d911      	bls.n	80025bc <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259c:	f043 0210 	orr.w	r2, r3, #16
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a8:	f043 0201 	orr.w	r2, r3, #1
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e007      	b.n	80025cc <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d1df      	bne.n	800258a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	20000004 	.word	0x20000004
 80025d8:	431bde83 	.word	0x431bde83

080025dc <ADC_ConversionStop_Disable>:
  * @brief  Stop ADC conversion and disable the selected ADC
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d127      	bne.n	8002646 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 0201 	bic.w	r2, r2, #1
 8002604:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002606:	f7ff fc8d 	bl	8001f24 <HAL_GetTick>
 800260a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800260c:	e014      	b.n	8002638 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800260e:	f7ff fc89 	bl	8001f24 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d90d      	bls.n	8002638 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002620:	f043 0210 	orr.w	r2, r3, #16
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262c:	f043 0201 	orr.w	r2, r3, #1
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e007      	b.n	8002648 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b01      	cmp	r3, #1
 8002644:	d0e3      	beq.n	800260e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002660:	4b0c      	ldr	r3, [pc, #48]	; (8002694 <__NVIC_SetPriorityGrouping+0x44>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800266c:	4013      	ands	r3, r2
 800266e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002678:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800267c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002680:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002682:	4a04      	ldr	r2, [pc, #16]	; (8002694 <__NVIC_SetPriorityGrouping+0x44>)
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	60d3      	str	r3, [r2, #12]
}
 8002688:	bf00      	nop
 800268a:	3714      	adds	r7, #20
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	e000ed00 	.word	0xe000ed00

08002698 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800269c:	4b04      	ldr	r3, [pc, #16]	; (80026b0 <__NVIC_GetPriorityGrouping+0x18>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	0a1b      	lsrs	r3, r3, #8
 80026a2:	f003 0307 	and.w	r3, r3, #7
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	e000ed00 	.word	0xe000ed00

080026b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	db0b      	blt.n	80026de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026c6:	79fb      	ldrb	r3, [r7, #7]
 80026c8:	f003 021f 	and.w	r2, r3, #31
 80026cc:	4907      	ldr	r1, [pc, #28]	; (80026ec <__NVIC_EnableIRQ+0x38>)
 80026ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d2:	095b      	lsrs	r3, r3, #5
 80026d4:	2001      	movs	r0, #1
 80026d6:	fa00 f202 	lsl.w	r2, r0, r2
 80026da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	e000e100 	.word	0xe000e100

080026f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	6039      	str	r1, [r7, #0]
 80026fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002700:	2b00      	cmp	r3, #0
 8002702:	db0a      	blt.n	800271a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	b2da      	uxtb	r2, r3
 8002708:	490c      	ldr	r1, [pc, #48]	; (800273c <__NVIC_SetPriority+0x4c>)
 800270a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270e:	0112      	lsls	r2, r2, #4
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	440b      	add	r3, r1
 8002714:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002718:	e00a      	b.n	8002730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	b2da      	uxtb	r2, r3
 800271e:	4908      	ldr	r1, [pc, #32]	; (8002740 <__NVIC_SetPriority+0x50>)
 8002720:	79fb      	ldrb	r3, [r7, #7]
 8002722:	f003 030f 	and.w	r3, r3, #15
 8002726:	3b04      	subs	r3, #4
 8002728:	0112      	lsls	r2, r2, #4
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	440b      	add	r3, r1
 800272e:	761a      	strb	r2, [r3, #24]
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	e000e100 	.word	0xe000e100
 8002740:	e000ed00 	.word	0xe000ed00

08002744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002744:	b480      	push	{r7}
 8002746:	b089      	sub	sp, #36	; 0x24
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	f1c3 0307 	rsb	r3, r3, #7
 800275e:	2b04      	cmp	r3, #4
 8002760:	bf28      	it	cs
 8002762:	2304      	movcs	r3, #4
 8002764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	3304      	adds	r3, #4
 800276a:	2b06      	cmp	r3, #6
 800276c:	d902      	bls.n	8002774 <NVIC_EncodePriority+0x30>
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	3b03      	subs	r3, #3
 8002772:	e000      	b.n	8002776 <NVIC_EncodePriority+0x32>
 8002774:	2300      	movs	r3, #0
 8002776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002778:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	43da      	mvns	r2, r3
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	401a      	ands	r2, r3
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800278c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	fa01 f303 	lsl.w	r3, r1, r3
 8002796:	43d9      	mvns	r1, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800279c:	4313      	orrs	r3, r2
         );
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3724      	adds	r7, #36	; 0x24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
	...

080027ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027bc:	d301      	bcc.n	80027c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027be:	2301      	movs	r3, #1
 80027c0:	e00f      	b.n	80027e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027c2:	4a0a      	ldr	r2, [pc, #40]	; (80027ec <SysTick_Config+0x40>)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027ca:	210f      	movs	r1, #15
 80027cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027d0:	f7ff ff8e 	bl	80026f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027d4:	4b05      	ldr	r3, [pc, #20]	; (80027ec <SysTick_Config+0x40>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027da:	4b04      	ldr	r3, [pc, #16]	; (80027ec <SysTick_Config+0x40>)
 80027dc:	2207      	movs	r2, #7
 80027de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	e000e010 	.word	0xe000e010

080027f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7ff ff29 	bl	8002650 <__NVIC_SetPriorityGrouping>
}
 80027fe:	bf00      	nop
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b086      	sub	sp, #24
 800280a:	af00      	add	r7, sp, #0
 800280c:	4603      	mov	r3, r0
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	607a      	str	r2, [r7, #4]
 8002812:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002818:	f7ff ff3e 	bl	8002698 <__NVIC_GetPriorityGrouping>
 800281c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	68b9      	ldr	r1, [r7, #8]
 8002822:	6978      	ldr	r0, [r7, #20]
 8002824:	f7ff ff8e 	bl	8002744 <NVIC_EncodePriority>
 8002828:	4602      	mov	r2, r0
 800282a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800282e:	4611      	mov	r1, r2
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff ff5d 	bl	80026f0 <__NVIC_SetPriority>
}
 8002836:	bf00      	nop
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b082      	sub	sp, #8
 8002842:	af00      	add	r7, sp, #0
 8002844:	4603      	mov	r3, r0
 8002846:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff ff31 	bl	80026b4 <__NVIC_EnableIRQ>
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b082      	sub	sp, #8
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7ff ffa2 	bl	80027ac <SysTick_Config>
 8002868:	4603      	mov	r3, r0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002872:	b580      	push	{r7, lr}
 8002874:	b082      	sub	sp, #8
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e014      	b.n	80028ae <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	791b      	ldrb	r3, [r3, #4]
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d105      	bne.n	800289a <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f7fe ff8b 	bl	80017b0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2202      	movs	r2, #2
 800289e:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 80028b6:	b480      	push	{r7}
 80028b8:	b087      	sub	sp, #28
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	60f8      	str	r0, [r7, #12]
 80028be:	60b9      	str	r1, [r7, #8]
 80028c0:	607a      	str	r2, [r7, #4]
 80028c2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 80028c4:	2300      	movs	r3, #0
 80028c6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d105      	bne.n	80028e0 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4413      	add	r3, r2
 80028da:	3308      	adds	r3, #8
 80028dc:	617b      	str	r3, [r7, #20]
 80028de:	e004      	b.n	80028ea <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4413      	add	r3, r2
 80028e6:	3314      	adds	r3, #20
 80028e8:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	461a      	mov	r2, r3
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	371c      	adds	r7, #28
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	795b      	ldrb	r3, [r3, #5]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d101      	bne.n	8002916 <HAL_DAC_Start+0x16>
 8002912:	2302      	movs	r3, #2
 8002914:	e039      	b.n	800298a <HAL_DAC_Start+0x8a>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2201      	movs	r2, #1
 800291a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2202      	movs	r2, #2
 8002920:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6819      	ldr	r1, [r3, #0]
 8002928:	2201      	movs	r2, #1
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	409a      	lsls	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10f      	bne.n	800295c <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002946:	2b3c      	cmp	r3, #60	; 0x3c
 8002948:	d118      	bne.n	800297c <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f042 0201 	orr.w	r2, r2, #1
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	e00f      	b.n	800297c <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002966:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 800296a:	d107      	bne.n	800297c <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f042 0202 	orr.w	r2, r2, #2
 800297a:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002996:	b480      	push	{r7}
 8002998:	b087      	sub	sp, #28
 800299a:	af00      	add	r7, sp, #0
 800299c:	60f8      	str	r0, [r7, #12]
 800299e:	60b9      	str	r1, [r7, #8]
 80029a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	617b      	str	r3, [r7, #20]
 80029a6:	2300      	movs	r3, #0
 80029a8:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	795b      	ldrb	r3, [r3, #5]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d101      	bne.n	80029b6 <HAL_DAC_ConfigChannel+0x20>
 80029b2:	2302      	movs	r3, #2
 80029b4:	e036      	b.n	8002a24 <HAL_DAC_ConfigChannel+0x8e>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2201      	movs	r2, #1
 80029ba:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2202      	movs	r2, #2
 80029c0:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80029ca:	f640 72fe 	movw	r2, #4094	; 0xffe
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	43db      	mvns	r3, r3
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	4013      	ands	r3, r2
 80029da:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6819      	ldr	r1, [r3, #0]
 8002a04:	22c0      	movs	r2, #192	; 0xc0
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43da      	mvns	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	400a      	ands	r2, r1
 8002a14:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	371c      	adds	r7, #28
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e037      	b.n	8002ab6 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2202      	movs	r2, #2
 8002a4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a5c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002a60:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002a6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 f941 	bl	8002d20 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}  
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b086      	sub	sp, #24
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	60f8      	str	r0, [r7, #12]
 8002ac6:	60b9      	str	r1, [r7, #8]
 8002ac8:	607a      	str	r2, [r7, #4]
 8002aca:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d101      	bne.n	8002ade <HAL_DMA_Start_IT+0x20>
 8002ada:	2302      	movs	r3, #2
 8002adc:	e04a      	b.n	8002b74 <HAL_DMA_Start_IT+0xb6>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d13a      	bne.n	8002b66 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2202      	movs	r2, #2
 8002af4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0201 	bic.w	r2, r2, #1
 8002b0c:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	68b9      	ldr	r1, [r7, #8]
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 f8d4 	bl	8002cc2 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d008      	beq.n	8002b34 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f042 020e 	orr.w	r2, r2, #14
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	e00f      	b.n	8002b54 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f042 020a 	orr.w	r2, r2, #10
 8002b42:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0204 	bic.w	r2, r2, #4
 8002b52:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f042 0201 	orr.w	r2, r2, #1
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	e005      	b.n	8002b72 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002b6e:	2302      	movs	r3, #2
 8002b70:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002b72:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002b74:	4618      	mov	r0, r3
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	2204      	movs	r2, #4
 8002b9a:	409a      	lsls	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d024      	beq.n	8002bee <HAL_DMA_IRQHandler+0x72>
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	f003 0304 	and.w	r3, r3, #4
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d01f      	beq.n	8002bee <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0320 	and.w	r3, r3, #32
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d107      	bne.n	8002bcc <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 0204 	bic.w	r2, r2, #4
 8002bca:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd4:	2104      	movs	r1, #4
 8002bd6:	fa01 f202 	lsl.w	r2, r1, r2
 8002bda:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d06a      	beq.n	8002cba <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002bec:	e065      	b.n	8002cba <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	409a      	lsls	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d02c      	beq.n	8002c58 <HAL_DMA_IRQHandler+0xdc>
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d027      	beq.n	8002c58 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0320 	and.w	r3, r3, #32
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10b      	bne.n	8002c2e <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 020a 	bic.w	r2, r2, #10
 8002c24:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c36:	2102      	movs	r1, #2
 8002c38:	fa01 f202 	lsl.w	r2, r1, r2
 8002c3c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d035      	beq.n	8002cba <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002c56:	e030      	b.n	8002cba <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	2208      	movs	r2, #8
 8002c5e:	409a      	lsls	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	4013      	ands	r3, r2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d028      	beq.n	8002cba <HAL_DMA_IRQHandler+0x13e>
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	f003 0308 	and.w	r3, r3, #8
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d023      	beq.n	8002cba <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 020e 	bic.w	r2, r2, #14
 8002c80:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c90:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2201      	movs	r2, #1
 8002c96:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d004      	beq.n	8002cba <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	4798      	blx	r3
    }
  }
}  
 8002cb8:	e7ff      	b.n	8002cba <HAL_DMA_IRQHandler+0x13e>
 8002cba:	bf00      	nop
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b085      	sub	sp, #20
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	60f8      	str	r0, [r7, #12]
 8002cca:	60b9      	str	r1, [r7, #8]
 8002ccc:	607a      	str	r2, [r7, #4]
 8002cce:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd8:	2101      	movs	r1, #1
 8002cda:	fa01 f202 	lsl.w	r2, r1, r2
 8002cde:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	2b10      	cmp	r3, #16
 8002cee:	d108      	bne.n	8002d02 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68ba      	ldr	r2, [r7, #8]
 8002cfe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d00:	e007      	b.n	8002d12 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	60da      	str	r2, [r3, #12]
}
 8002d12:	bf00      	nop
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
	...

08002d20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	4b14      	ldr	r3, [pc, #80]	; (8002d80 <DMA_CalcBaseAndBitshift+0x60>)
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d80f      	bhi.n	8002d54 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <DMA_CalcBaseAndBitshift+0x64>)
 8002d3c:	4413      	add	r3, r2
 8002d3e:	4a12      	ldr	r2, [pc, #72]	; (8002d88 <DMA_CalcBaseAndBitshift+0x68>)
 8002d40:	fba2 2303 	umull	r2, r3, r2, r3
 8002d44:	091b      	lsrs	r3, r3, #4
 8002d46:	009a      	lsls	r2, r3, #2
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a0f      	ldr	r2, [pc, #60]	; (8002d8c <DMA_CalcBaseAndBitshift+0x6c>)
 8002d50:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002d52:	e00e      	b.n	8002d72 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	4b0d      	ldr	r3, [pc, #52]	; (8002d90 <DMA_CalcBaseAndBitshift+0x70>)
 8002d5c:	4413      	add	r3, r2
 8002d5e:	4a0a      	ldr	r2, [pc, #40]	; (8002d88 <DMA_CalcBaseAndBitshift+0x68>)
 8002d60:	fba2 2303 	umull	r2, r3, r2, r3
 8002d64:	091b      	lsrs	r3, r3, #4
 8002d66:	009a      	lsls	r2, r3, #2
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a09      	ldr	r2, [pc, #36]	; (8002d94 <DMA_CalcBaseAndBitshift+0x74>)
 8002d70:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	40020407 	.word	0x40020407
 8002d84:	bffdfff8 	.word	0xbffdfff8
 8002d88:	cccccccd 	.word	0xcccccccd
 8002d8c:	40020000 	.word	0x40020000
 8002d90:	bffdfbf8 	.word	0xbffdfbf8
 8002d94:	40020400 	.word	0x40020400

08002d98 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d9a:	b087      	sub	sp, #28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 8002dae:	2300      	movs	r3, #0
 8002db0:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002db2:	4b2f      	ldr	r3, [pc, #188]	; (8002e70 <HAL_FLASH_Program+0xd8>)
 8002db4:	7e1b      	ldrb	r3, [r3, #24]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d101      	bne.n	8002dbe <HAL_FLASH_Program+0x26>
 8002dba:	2302      	movs	r3, #2
 8002dbc:	e054      	b.n	8002e68 <HAL_FLASH_Program+0xd0>
 8002dbe:	4b2c      	ldr	r3, [pc, #176]	; (8002e70 <HAL_FLASH_Program+0xd8>)
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002dc4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002dc8:	f000 f8a8 	bl	8002f1c <FLASH_WaitForLastOperation>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002dd0:	7dfb      	ldrb	r3, [r7, #23]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d144      	bne.n	8002e60 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d102      	bne.n	8002de2 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	757b      	strb	r3, [r7, #21]
 8002de0:	e007      	b.n	8002df2 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d102      	bne.n	8002dee <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002de8:	2302      	movs	r3, #2
 8002dea:	757b      	strb	r3, [r7, #21]
 8002dec:	e001      	b.n	8002df2 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002dee:	2304      	movs	r3, #4
 8002df0:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002df2:	2300      	movs	r3, #0
 8002df4:	75bb      	strb	r3, [r7, #22]
 8002df6:	e02d      	b.n	8002e54 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002df8:	7dbb      	ldrb	r3, [r7, #22]
 8002dfa:	005a      	lsls	r2, r3, #1
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	eb02 0c03 	add.w	ip, r2, r3
 8002e02:	7dbb      	ldrb	r3, [r7, #22]
 8002e04:	0119      	lsls	r1, r3, #4
 8002e06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e0a:	f1c1 0620 	rsb	r6, r1, #32
 8002e0e:	f1a1 0020 	sub.w	r0, r1, #32
 8002e12:	fa22 f401 	lsr.w	r4, r2, r1
 8002e16:	fa03 f606 	lsl.w	r6, r3, r6
 8002e1a:	4334      	orrs	r4, r6
 8002e1c:	fa23 f000 	lsr.w	r0, r3, r0
 8002e20:	4304      	orrs	r4, r0
 8002e22:	fa23 f501 	lsr.w	r5, r3, r1
 8002e26:	b2a3      	uxth	r3, r4
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4660      	mov	r0, ip
 8002e2c:	f000 f85a 	bl	8002ee4 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002e30:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002e34:	f000 f872 	bl	8002f1c <FLASH_WaitForLastOperation>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002e3c:	4b0d      	ldr	r3, [pc, #52]	; (8002e74 <HAL_FLASH_Program+0xdc>)
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	4a0c      	ldr	r2, [pc, #48]	; (8002e74 <HAL_FLASH_Program+0xdc>)
 8002e42:	f023 0301 	bic.w	r3, r3, #1
 8002e46:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8002e48:	7dfb      	ldrb	r3, [r7, #23]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d107      	bne.n	8002e5e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002e4e:	7dbb      	ldrb	r3, [r7, #22]
 8002e50:	3301      	adds	r3, #1
 8002e52:	75bb      	strb	r3, [r7, #22]
 8002e54:	7dba      	ldrb	r2, [r7, #22]
 8002e56:	7d7b      	ldrb	r3, [r7, #21]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d3cd      	bcc.n	8002df8 <HAL_FLASH_Program+0x60>
 8002e5c:	e000      	b.n	8002e60 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002e5e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002e60:	4b03      	ldr	r3, [pc, #12]	; (8002e70 <HAL_FLASH_Program+0xd8>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	761a      	strb	r2, [r3, #24]

  return status;
 8002e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	371c      	adds	r7, #28
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e70:	20000460 	.word	0x20000460
 8002e74:	40022000 	.word	0x40022000

08002e78 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002e82:	4b0d      	ldr	r3, [pc, #52]	; (8002eb8 <HAL_FLASH_Unlock+0x40>)
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00d      	beq.n	8002eaa <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002e8e:	4b0a      	ldr	r3, [pc, #40]	; (8002eb8 <HAL_FLASH_Unlock+0x40>)
 8002e90:	4a0a      	ldr	r2, [pc, #40]	; (8002ebc <HAL_FLASH_Unlock+0x44>)
 8002e92:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002e94:	4b08      	ldr	r3, [pc, #32]	; (8002eb8 <HAL_FLASH_Unlock+0x40>)
 8002e96:	4a0a      	ldr	r2, [pc, #40]	; (8002ec0 <HAL_FLASH_Unlock+0x48>)
 8002e98:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002e9a:	4b07      	ldr	r3, [pc, #28]	; (8002eb8 <HAL_FLASH_Unlock+0x40>)
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002eaa:	79fb      	ldrb	r3, [r7, #7]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	40022000 	.word	0x40022000
 8002ebc:	45670123 	.word	0x45670123
 8002ec0:	cdef89ab 	.word	0xcdef89ab

08002ec4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002ec8:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <HAL_FLASH_Lock+0x1c>)
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	4a04      	ldr	r2, [pc, #16]	; (8002ee0 <HAL_FLASH_Lock+0x1c>)
 8002ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ed2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	40022000 	.word	0x40022000

08002ee4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	460b      	mov	r3, r1
 8002eee:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002ef0:	4b08      	ldr	r3, [pc, #32]	; (8002f14 <FLASH_Program_HalfWord+0x30>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002ef6:	4b08      	ldr	r3, [pc, #32]	; (8002f18 <FLASH_Program_HalfWord+0x34>)
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	4a07      	ldr	r2, [pc, #28]	; (8002f18 <FLASH_Program_HalfWord+0x34>)
 8002efc:	f043 0301 	orr.w	r3, r3, #1
 8002f00:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	887a      	ldrh	r2, [r7, #2]
 8002f06:	801a      	strh	r2, [r3, #0]
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	20000460 	.word	0x20000460
 8002f18:	40022000 	.word	0x40022000

08002f1c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002f24:	f7fe fffe 	bl	8001f24 <HAL_GetTick>
 8002f28:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002f2a:	e010      	b.n	8002f4e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f32:	d00c      	beq.n	8002f4e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d007      	beq.n	8002f4a <FLASH_WaitForLastOperation+0x2e>
 8002f3a:	f7fe fff3 	bl	8001f24 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d201      	bcs.n	8002f4e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e01f      	b.n	8002f8e <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002f4e:	4b12      	ldr	r3, [pc, #72]	; (8002f98 <FLASH_WaitForLastOperation+0x7c>)
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d0e8      	beq.n	8002f2c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002f5a:	4b0f      	ldr	r3, [pc, #60]	; (8002f98 <FLASH_WaitForLastOperation+0x7c>)
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	f003 0320 	and.w	r3, r3, #32
 8002f62:	2b20      	cmp	r3, #32
 8002f64:	d102      	bne.n	8002f6c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002f66:	4b0c      	ldr	r3, [pc, #48]	; (8002f98 <FLASH_WaitForLastOperation+0x7c>)
 8002f68:	2220      	movs	r2, #32
 8002f6a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002f6c:	4b0a      	ldr	r3, [pc, #40]	; (8002f98 <FLASH_WaitForLastOperation+0x7c>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	f003 0310 	and.w	r3, r3, #16
 8002f74:	2b10      	cmp	r3, #16
 8002f76:	d005      	beq.n	8002f84 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002f78:	4b07      	ldr	r3, [pc, #28]	; (8002f98 <FLASH_WaitForLastOperation+0x7c>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002f80:	2b04      	cmp	r3, #4
 8002f82:	d103      	bne.n	8002f8c <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002f84:	f000 f80a 	bl	8002f9c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e000      	b.n	8002f8e <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	40022000 	.word	0x40022000

08002f9c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002fa6:	4b14      	ldr	r3, [pc, #80]	; (8002ff8 <FLASH_SetErrorCode+0x5c>)
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	f003 0310 	and.w	r3, r3, #16
 8002fae:	2b10      	cmp	r3, #16
 8002fb0:	d109      	bne.n	8002fc6 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002fb2:	4b12      	ldr	r3, [pc, #72]	; (8002ffc <FLASH_SetErrorCode+0x60>)
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	f043 0302 	orr.w	r3, r3, #2
 8002fba:	4a10      	ldr	r2, [pc, #64]	; (8002ffc <FLASH_SetErrorCode+0x60>)
 8002fbc:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f043 0310 	orr.w	r3, r3, #16
 8002fc4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002fc6:	4b0c      	ldr	r3, [pc, #48]	; (8002ff8 <FLASH_SetErrorCode+0x5c>)
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	f003 0304 	and.w	r3, r3, #4
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	d109      	bne.n	8002fe6 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002fd2:	4b0a      	ldr	r3, [pc, #40]	; (8002ffc <FLASH_SetErrorCode+0x60>)
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	f043 0301 	orr.w	r3, r3, #1
 8002fda:	4a08      	ldr	r2, [pc, #32]	; (8002ffc <FLASH_SetErrorCode+0x60>)
 8002fdc:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f043 0304 	orr.w	r3, r3, #4
 8002fe4:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002fe6:	4a04      	ldr	r2, [pc, #16]	; (8002ff8 <FLASH_SetErrorCode+0x5c>)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	60d3      	str	r3, [r2, #12]
}  
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	40022000 	.word	0x40022000
 8002ffc:	20000460 	.word	0x20000460

08003000 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800300e:	2300      	movs	r3, #0
 8003010:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003012:	4b2e      	ldr	r3, [pc, #184]	; (80030cc <HAL_FLASHEx_Erase+0xcc>)
 8003014:	7e1b      	ldrb	r3, [r3, #24]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d101      	bne.n	800301e <HAL_FLASHEx_Erase+0x1e>
 800301a:	2302      	movs	r3, #2
 800301c:	e052      	b.n	80030c4 <HAL_FLASHEx_Erase+0xc4>
 800301e:	4b2b      	ldr	r3, [pc, #172]	; (80030cc <HAL_FLASHEx_Erase+0xcc>)
 8003020:	2201      	movs	r2, #1
 8003022:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d115      	bne.n	8003058 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800302c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003030:	f7ff ff74 	bl	8002f1c <FLASH_WaitForLastOperation>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d140      	bne.n	80030bc <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 800303a:	f000 f84b 	bl	80030d4 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800303e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003042:	f7ff ff6b 	bl	8002f1c <FLASH_WaitForLastOperation>
 8003046:	4603      	mov	r3, r0
 8003048:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800304a:	4b21      	ldr	r3, [pc, #132]	; (80030d0 <HAL_FLASHEx_Erase+0xd0>)
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	4a20      	ldr	r2, [pc, #128]	; (80030d0 <HAL_FLASHEx_Erase+0xd0>)
 8003050:	f023 0304 	bic.w	r3, r3, #4
 8003054:	6113      	str	r3, [r2, #16]
 8003056:	e031      	b.n	80030bc <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003058:	f24c 3050 	movw	r0, #50000	; 0xc350
 800305c:	f7ff ff5e 	bl	8002f1c <FLASH_WaitForLastOperation>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d12a      	bne.n	80030bc <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800306c:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	60bb      	str	r3, [r7, #8]
 8003074:	e019      	b.n	80030aa <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003076:	68b8      	ldr	r0, [r7, #8]
 8003078:	f000 f846 	bl	8003108 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800307c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003080:	f7ff ff4c 	bl	8002f1c <FLASH_WaitForLastOperation>
 8003084:	4603      	mov	r3, r0
 8003086:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003088:	4b11      	ldr	r3, [pc, #68]	; (80030d0 <HAL_FLASHEx_Erase+0xd0>)
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	4a10      	ldr	r2, [pc, #64]	; (80030d0 <HAL_FLASHEx_Erase+0xd0>)
 800308e:	f023 0302 	bic.w	r3, r3, #2
 8003092:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003094:	7bfb      	ldrb	r3, [r7, #15]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	601a      	str	r2, [r3, #0]
            break;
 80030a0:	e00c      	b.n	80030bc <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030a8:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	02da      	lsls	r2, r3, #11
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d3dc      	bcc.n	8003076 <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80030bc:	4b03      	ldr	r3, [pc, #12]	; (80030cc <HAL_FLASHEx_Erase+0xcc>)
 80030be:	2200      	movs	r2, #0
 80030c0:	761a      	strb	r2, [r3, #24]

  return status;
 80030c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	20000460 	.word	0x20000460
 80030d0:	40022000 	.word	0x40022000

080030d4 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80030d8:	4b09      	ldr	r3, [pc, #36]	; (8003100 <FLASH_MassErase+0x2c>)
 80030da:	2200      	movs	r2, #0
 80030dc:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80030de:	4b09      	ldr	r3, [pc, #36]	; (8003104 <FLASH_MassErase+0x30>)
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	4a08      	ldr	r2, [pc, #32]	; (8003104 <FLASH_MassErase+0x30>)
 80030e4:	f043 0304 	orr.w	r3, r3, #4
 80030e8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80030ea:	4b06      	ldr	r3, [pc, #24]	; (8003104 <FLASH_MassErase+0x30>)
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	4a05      	ldr	r2, [pc, #20]	; (8003104 <FLASH_MassErase+0x30>)
 80030f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030f4:	6113      	str	r3, [r2, #16]
}
 80030f6:	bf00      	nop
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	20000460 	.word	0x20000460
 8003104:	40022000 	.word	0x40022000

08003108 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003110:	4b0b      	ldr	r3, [pc, #44]	; (8003140 <FLASH_PageErase+0x38>)
 8003112:	2200      	movs	r2, #0
 8003114:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003116:	4b0b      	ldr	r3, [pc, #44]	; (8003144 <FLASH_PageErase+0x3c>)
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	4a0a      	ldr	r2, [pc, #40]	; (8003144 <FLASH_PageErase+0x3c>)
 800311c:	f043 0302 	orr.w	r3, r3, #2
 8003120:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003122:	4a08      	ldr	r2, [pc, #32]	; (8003144 <FLASH_PageErase+0x3c>)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003128:	4b06      	ldr	r3, [pc, #24]	; (8003144 <FLASH_PageErase+0x3c>)
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	4a05      	ldr	r2, [pc, #20]	; (8003144 <FLASH_PageErase+0x3c>)
 800312e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003132:	6113      	str	r3, [r2, #16]
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	20000460 	.word	0x20000460
 8003144:	40022000 	.word	0x40022000

08003148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003148:	b480      	push	{r7}
 800314a:	b087      	sub	sp, #28
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003152:	2300      	movs	r3, #0
 8003154:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003156:	e154      	b.n	8003402 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	2101      	movs	r1, #1
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	fa01 f303 	lsl.w	r3, r1, r3
 8003164:	4013      	ands	r3, r2
 8003166:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 8146 	beq.w	80033fc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d00b      	beq.n	8003190 <HAL_GPIO_Init+0x48>
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	2b02      	cmp	r3, #2
 800317e:	d007      	beq.n	8003190 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003184:	2b11      	cmp	r3, #17
 8003186:	d003      	beq.n	8003190 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b12      	cmp	r3, #18
 800318e:	d130      	bne.n	80031f2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	2203      	movs	r2, #3
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	43db      	mvns	r3, r3
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	4013      	ands	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	68da      	ldr	r2, [r3, #12]
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031c6:	2201      	movs	r2, #1
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	43db      	mvns	r3, r3
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	4013      	ands	r3, r2
 80031d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	091b      	lsrs	r3, r3, #4
 80031dc:	f003 0201 	and.w	r2, r3, #1
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	fa02 f303 	lsl.w	r3, r2, r3
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	2203      	movs	r2, #3
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	43db      	mvns	r3, r3
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	4013      	ands	r3, r2
 8003208:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	4313      	orrs	r3, r2
 800321a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b02      	cmp	r3, #2
 8003228:	d003      	beq.n	8003232 <HAL_GPIO_Init+0xea>
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2b12      	cmp	r3, #18
 8003230:	d123      	bne.n	800327a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	08da      	lsrs	r2, r3, #3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	3208      	adds	r2, #8
 800323a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800323e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	f003 0307 	and.w	r3, r3, #7
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	220f      	movs	r2, #15
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	43db      	mvns	r3, r3
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	4013      	ands	r3, r2
 8003254:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	691a      	ldr	r2, [r3, #16]
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	4313      	orrs	r3, r2
 800326a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	08da      	lsrs	r2, r3, #3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3208      	adds	r2, #8
 8003274:	6939      	ldr	r1, [r7, #16]
 8003276:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	2203      	movs	r2, #3
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	43db      	mvns	r3, r3
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	4013      	ands	r3, r2
 8003290:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f003 0203 	and.w	r2, r3, #3
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f000 80a0 	beq.w	80033fc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032bc:	4b58      	ldr	r3, [pc, #352]	; (8003420 <HAL_GPIO_Init+0x2d8>)
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	4a57      	ldr	r2, [pc, #348]	; (8003420 <HAL_GPIO_Init+0x2d8>)
 80032c2:	f043 0301 	orr.w	r3, r3, #1
 80032c6:	6193      	str	r3, [r2, #24]
 80032c8:	4b55      	ldr	r3, [pc, #340]	; (8003420 <HAL_GPIO_Init+0x2d8>)
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	60bb      	str	r3, [r7, #8]
 80032d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032d4:	4a53      	ldr	r2, [pc, #332]	; (8003424 <HAL_GPIO_Init+0x2dc>)
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	089b      	lsrs	r3, r3, #2
 80032da:	3302      	adds	r3, #2
 80032dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f003 0303 	and.w	r3, r3, #3
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	220f      	movs	r2, #15
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	43db      	mvns	r3, r3
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	4013      	ands	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032fe:	d019      	beq.n	8003334 <HAL_GPIO_Init+0x1ec>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a49      	ldr	r2, [pc, #292]	; (8003428 <HAL_GPIO_Init+0x2e0>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d013      	beq.n	8003330 <HAL_GPIO_Init+0x1e8>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a48      	ldr	r2, [pc, #288]	; (800342c <HAL_GPIO_Init+0x2e4>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d00d      	beq.n	800332c <HAL_GPIO_Init+0x1e4>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a47      	ldr	r2, [pc, #284]	; (8003430 <HAL_GPIO_Init+0x2e8>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d007      	beq.n	8003328 <HAL_GPIO_Init+0x1e0>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a46      	ldr	r2, [pc, #280]	; (8003434 <HAL_GPIO_Init+0x2ec>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d101      	bne.n	8003324 <HAL_GPIO_Init+0x1dc>
 8003320:	2304      	movs	r3, #4
 8003322:	e008      	b.n	8003336 <HAL_GPIO_Init+0x1ee>
 8003324:	2305      	movs	r3, #5
 8003326:	e006      	b.n	8003336 <HAL_GPIO_Init+0x1ee>
 8003328:	2303      	movs	r3, #3
 800332a:	e004      	b.n	8003336 <HAL_GPIO_Init+0x1ee>
 800332c:	2302      	movs	r3, #2
 800332e:	e002      	b.n	8003336 <HAL_GPIO_Init+0x1ee>
 8003330:	2301      	movs	r3, #1
 8003332:	e000      	b.n	8003336 <HAL_GPIO_Init+0x1ee>
 8003334:	2300      	movs	r3, #0
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	f002 0203 	and.w	r2, r2, #3
 800333c:	0092      	lsls	r2, r2, #2
 800333e:	4093      	lsls	r3, r2
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	4313      	orrs	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003346:	4937      	ldr	r1, [pc, #220]	; (8003424 <HAL_GPIO_Init+0x2dc>)
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	089b      	lsrs	r3, r3, #2
 800334c:	3302      	adds	r3, #2
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003354:	4b38      	ldr	r3, [pc, #224]	; (8003438 <HAL_GPIO_Init+0x2f0>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	43db      	mvns	r3, r3
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	4013      	ands	r3, r2
 8003362:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	4313      	orrs	r3, r2
 8003376:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003378:	4a2f      	ldr	r2, [pc, #188]	; (8003438 <HAL_GPIO_Init+0x2f0>)
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800337e:	4b2e      	ldr	r3, [pc, #184]	; (8003438 <HAL_GPIO_Init+0x2f0>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	43db      	mvns	r3, r3
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	4013      	ands	r3, r2
 800338c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4313      	orrs	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80033a2:	4a25      	ldr	r2, [pc, #148]	; (8003438 <HAL_GPIO_Init+0x2f0>)
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033a8:	4b23      	ldr	r3, [pc, #140]	; (8003438 <HAL_GPIO_Init+0x2f0>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	43db      	mvns	r3, r3
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	4013      	ands	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d003      	beq.n	80033cc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80033cc:	4a1a      	ldr	r2, [pc, #104]	; (8003438 <HAL_GPIO_Init+0x2f0>)
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033d2:	4b19      	ldr	r3, [pc, #100]	; (8003438 <HAL_GPIO_Init+0x2f0>)
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	43db      	mvns	r3, r3
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	4013      	ands	r3, r2
 80033e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80033f6:	4a10      	ldr	r2, [pc, #64]	; (8003438 <HAL_GPIO_Init+0x2f0>)
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	3301      	adds	r3, #1
 8003400:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	fa22 f303 	lsr.w	r3, r2, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	f47f aea3 	bne.w	8003158 <HAL_GPIO_Init+0x10>
  }
}
 8003412:	bf00      	nop
 8003414:	371c      	adds	r7, #28
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	40021000 	.word	0x40021000
 8003424:	40010000 	.word	0x40010000
 8003428:	48000400 	.word	0x48000400
 800342c:	48000800 	.word	0x48000800
 8003430:	48000c00 	.word	0x48000c00
 8003434:	48001000 	.word	0x48001000
 8003438:	40010400 	.word	0x40010400

0800343c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	460b      	mov	r3, r1
 8003446:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	691a      	ldr	r2, [r3, #16]
 800344c:	887b      	ldrh	r3, [r7, #2]
 800344e:	4013      	ands	r3, r2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d002      	beq.n	800345a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003454:	2301      	movs	r3, #1
 8003456:	73fb      	strb	r3, [r7, #15]
 8003458:	e001      	b.n	800345e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800345a:	2300      	movs	r3, #0
 800345c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800345e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <HAL_PWREx_EnableSDADC>:
  * @param  Analogx specifies the SDADC peripheral instance.
  *   This parameter can be: PWR_SDADC_ANALOG1, PWR_SDADC_ANALOG2 or PWR_SDADC_ANALOG3.
  * @retval None
  */
void HAL_PWREx_EnableSDADC(uint32_t Analogx)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_SDADC_ANALOG(Analogx));

  /* Enable PWR clock interface for SDADC use */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003474:	4b0b      	ldr	r3, [pc, #44]	; (80034a4 <HAL_PWREx_EnableSDADC+0x38>)
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	4a0a      	ldr	r2, [pc, #40]	; (80034a4 <HAL_PWREx_EnableSDADC+0x38>)
 800347a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800347e:	61d3      	str	r3, [r2, #28]
 8003480:	4b08      	ldr	r3, [pc, #32]	; (80034a4 <HAL_PWREx_EnableSDADC+0x38>)
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003488:	60fb      	str	r3, [r7, #12]
 800348a:	68fb      	ldr	r3, [r7, #12]
    
  PWR->CR |= Analogx;
 800348c:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <HAL_PWREx_EnableSDADC+0x3c>)
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	4905      	ldr	r1, [pc, #20]	; (80034a8 <HAL_PWREx_EnableSDADC+0x3c>)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4313      	orrs	r3, r2
 8003496:	600b      	str	r3, [r1, #0]
}
 8003498:	bf00      	nop
 800349a:	3714      	adds	r7, #20
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr
 80034a4:	40021000 	.word	0x40021000
 80034a8:	40007000 	.word	0x40007000

080034ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	1d3b      	adds	r3, r7, #4
 80034b6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034b8:	1d3b      	adds	r3, r7, #4
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d102      	bne.n	80034c6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	f000 bef4 	b.w	80042ae <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034c6:	1d3b      	adds	r3, r7, #4
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 816a 	beq.w	80037aa <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80034d6:	4bb3      	ldr	r3, [pc, #716]	; (80037a4 <HAL_RCC_OscConfig+0x2f8>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f003 030c 	and.w	r3, r3, #12
 80034de:	2b04      	cmp	r3, #4
 80034e0:	d00c      	beq.n	80034fc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034e2:	4bb0      	ldr	r3, [pc, #704]	; (80037a4 <HAL_RCC_OscConfig+0x2f8>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f003 030c 	and.w	r3, r3, #12
 80034ea:	2b08      	cmp	r3, #8
 80034ec:	d159      	bne.n	80035a2 <HAL_RCC_OscConfig+0xf6>
 80034ee:	4bad      	ldr	r3, [pc, #692]	; (80037a4 <HAL_RCC_OscConfig+0x2f8>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034fa:	d152      	bne.n	80035a2 <HAL_RCC_OscConfig+0xf6>
 80034fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003500:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003504:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003508:	fa93 f3a3 	rbit	r3, r3
 800350c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003510:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003514:	fab3 f383 	clz	r3, r3
 8003518:	b2db      	uxtb	r3, r3
 800351a:	095b      	lsrs	r3, r3, #5
 800351c:	b2db      	uxtb	r3, r3
 800351e:	f043 0301 	orr.w	r3, r3, #1
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b01      	cmp	r3, #1
 8003526:	d102      	bne.n	800352e <HAL_RCC_OscConfig+0x82>
 8003528:	4b9e      	ldr	r3, [pc, #632]	; (80037a4 <HAL_RCC_OscConfig+0x2f8>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	e015      	b.n	800355a <HAL_RCC_OscConfig+0xae>
 800352e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003532:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003536:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800353a:	fa93 f3a3 	rbit	r3, r3
 800353e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003542:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003546:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800354a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800354e:	fa93 f3a3 	rbit	r3, r3
 8003552:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003556:	4b93      	ldr	r3, [pc, #588]	; (80037a4 <HAL_RCC_OscConfig+0x2f8>)
 8003558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800355e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003562:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003566:	fa92 f2a2 	rbit	r2, r2
 800356a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800356e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003572:	fab2 f282 	clz	r2, r2
 8003576:	b2d2      	uxtb	r2, r2
 8003578:	f042 0220 	orr.w	r2, r2, #32
 800357c:	b2d2      	uxtb	r2, r2
 800357e:	f002 021f 	and.w	r2, r2, #31
 8003582:	2101      	movs	r1, #1
 8003584:	fa01 f202 	lsl.w	r2, r1, r2
 8003588:	4013      	ands	r3, r2
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 810c 	beq.w	80037a8 <HAL_RCC_OscConfig+0x2fc>
 8003590:	1d3b      	adds	r3, r7, #4
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	f040 8106 	bne.w	80037a8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	f000 be86 	b.w	80042ae <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035a2:	1d3b      	adds	r3, r7, #4
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035ac:	d106      	bne.n	80035bc <HAL_RCC_OscConfig+0x110>
 80035ae:	4b7d      	ldr	r3, [pc, #500]	; (80037a4 <HAL_RCC_OscConfig+0x2f8>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a7c      	ldr	r2, [pc, #496]	; (80037a4 <HAL_RCC_OscConfig+0x2f8>)
 80035b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b8:	6013      	str	r3, [r2, #0]
 80035ba:	e030      	b.n	800361e <HAL_RCC_OscConfig+0x172>
 80035bc:	1d3b      	adds	r3, r7, #4
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10c      	bne.n	80035e0 <HAL_RCC_OscConfig+0x134>
 80035c6:	4b77      	ldr	r3, [pc, #476]	; (80037a4 <HAL_RCC_OscConfig+0x2f8>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a76      	ldr	r2, [pc, #472]	; (80037a4 <HAL_RCC_OscConfig+0x2f8>)
 80035cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035d0:	6013      	str	r3, [r2, #0]
 80035d2:	4b74      	ldr	r3, [pc, #464]	; (80037a4 <HAL_RCC_OscConfig+0x2f8>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a73      	ldr	r2, [pc, #460]	; (80037a4 <HAL_RCC_OscConfig+0x2f8>)
 80035d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035dc:	6013      	str	r3, [r2, #0]
 80035de:	e01e      	b.n	800361e <HAL_RCC_OscConfig+0x172>
 80035e0:	1d3b      	adds	r3, r7, #4
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035ea:	d10c      	bne.n	8003606 <HAL_RCC_OscConfig+0x15a>
 80035ec:	4b6d      	ldr	r3, [pc, #436]	; (80037a4 <HAL_RCC_OscConfig+0x2f8>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a6c      	ldr	r2, [pc, #432]	; (80037a4 <HAL_RCC_OscConfig+0x2f8>)
 80035f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035f6:	6013      	str	r3, [r2, #0]
 80035f8:	4b6a      	ldr	r3, [pc, #424]	; (80037a4 <HAL_RCC_OscConfig+0x2f8>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a69      	ldr	r2, [pc, #420]	; (80037a4 <HAL_RCC_OscConfig+0x2f8>)
 80035fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003602:	6013      	str	r3, [r2, #0]
 8003604:	e00b      	b.n	800361e <HAL_RCC_OscConfig+0x172>
 8003606:	4b67      	ldr	r3, [pc, #412]	; (80037a4 <HAL_RCC_OscConfig+0x2f8>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a66      	ldr	r2, [pc, #408]	; (80037a4 <HAL_RCC_OscConfig+0x2f8>)
 800360c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	4b64      	ldr	r3, [pc, #400]	; (80037a4 <HAL_RCC_OscConfig+0x2f8>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a63      	ldr	r2, [pc, #396]	; (80037a4 <HAL_RCC_OscConfig+0x2f8>)
 8003618:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800361c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800361e:	4b61      	ldr	r3, [pc, #388]	; (80037a4 <HAL_RCC_OscConfig+0x2f8>)
 8003620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003622:	f023 020f 	bic.w	r2, r3, #15
 8003626:	1d3b      	adds	r3, r7, #4
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	495d      	ldr	r1, [pc, #372]	; (80037a4 <HAL_RCC_OscConfig+0x2f8>)
 800362e:	4313      	orrs	r3, r2
 8003630:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003632:	1d3b      	adds	r3, r7, #4
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d059      	beq.n	80036f0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363c:	f7fe fc72 	bl	8001f24 <HAL_GetTick>
 8003640:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003644:	e00a      	b.n	800365c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003646:	f7fe fc6d 	bl	8001f24 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b64      	cmp	r3, #100	; 0x64
 8003654:	d902      	bls.n	800365c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	f000 be29 	b.w	80042ae <HAL_RCC_OscConfig+0xe02>
 800365c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003660:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003664:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003668:	fa93 f3a3 	rbit	r3, r3
 800366c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003670:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003674:	fab3 f383 	clz	r3, r3
 8003678:	b2db      	uxtb	r3, r3
 800367a:	095b      	lsrs	r3, r3, #5
 800367c:	b2db      	uxtb	r3, r3
 800367e:	f043 0301 	orr.w	r3, r3, #1
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b01      	cmp	r3, #1
 8003686:	d102      	bne.n	800368e <HAL_RCC_OscConfig+0x1e2>
 8003688:	4b46      	ldr	r3, [pc, #280]	; (80037a4 <HAL_RCC_OscConfig+0x2f8>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	e015      	b.n	80036ba <HAL_RCC_OscConfig+0x20e>
 800368e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003692:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003696:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800369a:	fa93 f3a3 	rbit	r3, r3
 800369e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80036a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036a6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80036aa:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80036ae:	fa93 f3a3 	rbit	r3, r3
 80036b2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80036b6:	4b3b      	ldr	r3, [pc, #236]	; (80037a4 <HAL_RCC_OscConfig+0x2f8>)
 80036b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036be:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80036c2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80036c6:	fa92 f2a2 	rbit	r2, r2
 80036ca:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80036ce:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80036d2:	fab2 f282 	clz	r2, r2
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	f042 0220 	orr.w	r2, r2, #32
 80036dc:	b2d2      	uxtb	r2, r2
 80036de:	f002 021f 	and.w	r2, r2, #31
 80036e2:	2101      	movs	r1, #1
 80036e4:	fa01 f202 	lsl.w	r2, r1, r2
 80036e8:	4013      	ands	r3, r2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d0ab      	beq.n	8003646 <HAL_RCC_OscConfig+0x19a>
 80036ee:	e05c      	b.n	80037aa <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f0:	f7fe fc18 	bl	8001f24 <HAL_GetTick>
 80036f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036f8:	e00a      	b.n	8003710 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036fa:	f7fe fc13 	bl	8001f24 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b64      	cmp	r3, #100	; 0x64
 8003708:	d902      	bls.n	8003710 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	f000 bdcf 	b.w	80042ae <HAL_RCC_OscConfig+0xe02>
 8003710:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003714:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003718:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800371c:	fa93 f3a3 	rbit	r3, r3
 8003720:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003724:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003728:	fab3 f383 	clz	r3, r3
 800372c:	b2db      	uxtb	r3, r3
 800372e:	095b      	lsrs	r3, r3, #5
 8003730:	b2db      	uxtb	r3, r3
 8003732:	f043 0301 	orr.w	r3, r3, #1
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b01      	cmp	r3, #1
 800373a:	d102      	bne.n	8003742 <HAL_RCC_OscConfig+0x296>
 800373c:	4b19      	ldr	r3, [pc, #100]	; (80037a4 <HAL_RCC_OscConfig+0x2f8>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	e015      	b.n	800376e <HAL_RCC_OscConfig+0x2c2>
 8003742:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003746:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800374e:	fa93 f3a3 	rbit	r3, r3
 8003752:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003756:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800375a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800375e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003762:	fa93 f3a3 	rbit	r3, r3
 8003766:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800376a:	4b0e      	ldr	r3, [pc, #56]	; (80037a4 <HAL_RCC_OscConfig+0x2f8>)
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003772:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003776:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800377a:	fa92 f2a2 	rbit	r2, r2
 800377e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003782:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003786:	fab2 f282 	clz	r2, r2
 800378a:	b2d2      	uxtb	r2, r2
 800378c:	f042 0220 	orr.w	r2, r2, #32
 8003790:	b2d2      	uxtb	r2, r2
 8003792:	f002 021f 	and.w	r2, r2, #31
 8003796:	2101      	movs	r1, #1
 8003798:	fa01 f202 	lsl.w	r2, r1, r2
 800379c:	4013      	ands	r3, r2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1ab      	bne.n	80036fa <HAL_RCC_OscConfig+0x24e>
 80037a2:	e002      	b.n	80037aa <HAL_RCC_OscConfig+0x2fe>
 80037a4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037aa:	1d3b      	adds	r3, r7, #4
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 816f 	beq.w	8003a98 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80037ba:	4bd0      	ldr	r3, [pc, #832]	; (8003afc <HAL_RCC_OscConfig+0x650>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f003 030c 	and.w	r3, r3, #12
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00b      	beq.n	80037de <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80037c6:	4bcd      	ldr	r3, [pc, #820]	; (8003afc <HAL_RCC_OscConfig+0x650>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f003 030c 	and.w	r3, r3, #12
 80037ce:	2b08      	cmp	r3, #8
 80037d0:	d16c      	bne.n	80038ac <HAL_RCC_OscConfig+0x400>
 80037d2:	4bca      	ldr	r3, [pc, #808]	; (8003afc <HAL_RCC_OscConfig+0x650>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d166      	bne.n	80038ac <HAL_RCC_OscConfig+0x400>
 80037de:	2302      	movs	r3, #2
 80037e0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80037e8:	fa93 f3a3 	rbit	r3, r3
 80037ec:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80037f0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037f4:	fab3 f383 	clz	r3, r3
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	095b      	lsrs	r3, r3, #5
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b01      	cmp	r3, #1
 8003806:	d102      	bne.n	800380e <HAL_RCC_OscConfig+0x362>
 8003808:	4bbc      	ldr	r3, [pc, #752]	; (8003afc <HAL_RCC_OscConfig+0x650>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	e013      	b.n	8003836 <HAL_RCC_OscConfig+0x38a>
 800380e:	2302      	movs	r3, #2
 8003810:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003814:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003818:	fa93 f3a3 	rbit	r3, r3
 800381c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003820:	2302      	movs	r3, #2
 8003822:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003826:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800382a:	fa93 f3a3 	rbit	r3, r3
 800382e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003832:	4bb2      	ldr	r3, [pc, #712]	; (8003afc <HAL_RCC_OscConfig+0x650>)
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	2202      	movs	r2, #2
 8003838:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800383c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003840:	fa92 f2a2 	rbit	r2, r2
 8003844:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003848:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800384c:	fab2 f282 	clz	r2, r2
 8003850:	b2d2      	uxtb	r2, r2
 8003852:	f042 0220 	orr.w	r2, r2, #32
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	f002 021f 	and.w	r2, r2, #31
 800385c:	2101      	movs	r1, #1
 800385e:	fa01 f202 	lsl.w	r2, r1, r2
 8003862:	4013      	ands	r3, r2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d007      	beq.n	8003878 <HAL_RCC_OscConfig+0x3cc>
 8003868:	1d3b      	adds	r3, r7, #4
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d002      	beq.n	8003878 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	f000 bd1b 	b.w	80042ae <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003878:	4ba0      	ldr	r3, [pc, #640]	; (8003afc <HAL_RCC_OscConfig+0x650>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003880:	1d3b      	adds	r3, r7, #4
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	21f8      	movs	r1, #248	; 0xf8
 8003888:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003890:	fa91 f1a1 	rbit	r1, r1
 8003894:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003898:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800389c:	fab1 f181 	clz	r1, r1
 80038a0:	b2c9      	uxtb	r1, r1
 80038a2:	408b      	lsls	r3, r1
 80038a4:	4995      	ldr	r1, [pc, #596]	; (8003afc <HAL_RCC_OscConfig+0x650>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038aa:	e0f5      	b.n	8003a98 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038ac:	1d3b      	adds	r3, r7, #4
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f000 8085 	beq.w	80039c2 <HAL_RCC_OscConfig+0x516>
 80038b8:	2301      	movs	r3, #1
 80038ba:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038be:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80038c2:	fa93 f3a3 	rbit	r3, r3
 80038c6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80038ca:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038ce:	fab3 f383 	clz	r3, r3
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	461a      	mov	r2, r3
 80038e0:	2301      	movs	r3, #1
 80038e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e4:	f7fe fb1e 	bl	8001f24 <HAL_GetTick>
 80038e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ec:	e00a      	b.n	8003904 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038ee:	f7fe fb19 	bl	8001f24 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d902      	bls.n	8003904 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	f000 bcd5 	b.w	80042ae <HAL_RCC_OscConfig+0xe02>
 8003904:	2302      	movs	r3, #2
 8003906:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800390e:	fa93 f3a3 	rbit	r3, r3
 8003912:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003916:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800391a:	fab3 f383 	clz	r3, r3
 800391e:	b2db      	uxtb	r3, r3
 8003920:	095b      	lsrs	r3, r3, #5
 8003922:	b2db      	uxtb	r3, r3
 8003924:	f043 0301 	orr.w	r3, r3, #1
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b01      	cmp	r3, #1
 800392c:	d102      	bne.n	8003934 <HAL_RCC_OscConfig+0x488>
 800392e:	4b73      	ldr	r3, [pc, #460]	; (8003afc <HAL_RCC_OscConfig+0x650>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	e013      	b.n	800395c <HAL_RCC_OscConfig+0x4b0>
 8003934:	2302      	movs	r3, #2
 8003936:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800393a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800393e:	fa93 f3a3 	rbit	r3, r3
 8003942:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003946:	2302      	movs	r3, #2
 8003948:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800394c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003950:	fa93 f3a3 	rbit	r3, r3
 8003954:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003958:	4b68      	ldr	r3, [pc, #416]	; (8003afc <HAL_RCC_OscConfig+0x650>)
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	2202      	movs	r2, #2
 800395e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003962:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003966:	fa92 f2a2 	rbit	r2, r2
 800396a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800396e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003972:	fab2 f282 	clz	r2, r2
 8003976:	b2d2      	uxtb	r2, r2
 8003978:	f042 0220 	orr.w	r2, r2, #32
 800397c:	b2d2      	uxtb	r2, r2
 800397e:	f002 021f 	and.w	r2, r2, #31
 8003982:	2101      	movs	r1, #1
 8003984:	fa01 f202 	lsl.w	r2, r1, r2
 8003988:	4013      	ands	r3, r2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d0af      	beq.n	80038ee <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800398e:	4b5b      	ldr	r3, [pc, #364]	; (8003afc <HAL_RCC_OscConfig+0x650>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003996:	1d3b      	adds	r3, r7, #4
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	695b      	ldr	r3, [r3, #20]
 800399c:	21f8      	movs	r1, #248	; 0xf8
 800399e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80039a6:	fa91 f1a1 	rbit	r1, r1
 80039aa:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80039ae:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80039b2:	fab1 f181 	clz	r1, r1
 80039b6:	b2c9      	uxtb	r1, r1
 80039b8:	408b      	lsls	r3, r1
 80039ba:	4950      	ldr	r1, [pc, #320]	; (8003afc <HAL_RCC_OscConfig+0x650>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	600b      	str	r3, [r1, #0]
 80039c0:	e06a      	b.n	8003a98 <HAL_RCC_OscConfig+0x5ec>
 80039c2:	2301      	movs	r3, #1
 80039c4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80039cc:	fa93 f3a3 	rbit	r3, r3
 80039d0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80039d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039d8:	fab3 f383 	clz	r3, r3
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80039e2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	461a      	mov	r2, r3
 80039ea:	2300      	movs	r3, #0
 80039ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ee:	f7fe fa99 	bl	8001f24 <HAL_GetTick>
 80039f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039f6:	e00a      	b.n	8003a0e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039f8:	f7fe fa94 	bl	8001f24 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d902      	bls.n	8003a0e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	f000 bc50 	b.w	80042ae <HAL_RCC_OscConfig+0xe02>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a14:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003a18:	fa93 f3a3 	rbit	r3, r3
 8003a1c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003a20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a24:	fab3 f383 	clz	r3, r3
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	095b      	lsrs	r3, r3, #5
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	f043 0301 	orr.w	r3, r3, #1
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d102      	bne.n	8003a3e <HAL_RCC_OscConfig+0x592>
 8003a38:	4b30      	ldr	r3, [pc, #192]	; (8003afc <HAL_RCC_OscConfig+0x650>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	e013      	b.n	8003a66 <HAL_RCC_OscConfig+0x5ba>
 8003a3e:	2302      	movs	r3, #2
 8003a40:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003a48:	fa93 f3a3 	rbit	r3, r3
 8003a4c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003a50:	2302      	movs	r3, #2
 8003a52:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003a56:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003a5a:	fa93 f3a3 	rbit	r3, r3
 8003a5e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003a62:	4b26      	ldr	r3, [pc, #152]	; (8003afc <HAL_RCC_OscConfig+0x650>)
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	2202      	movs	r2, #2
 8003a68:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003a6c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003a70:	fa92 f2a2 	rbit	r2, r2
 8003a74:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003a78:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003a7c:	fab2 f282 	clz	r2, r2
 8003a80:	b2d2      	uxtb	r2, r2
 8003a82:	f042 0220 	orr.w	r2, r2, #32
 8003a86:	b2d2      	uxtb	r2, r2
 8003a88:	f002 021f 	and.w	r2, r2, #31
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a92:	4013      	ands	r3, r2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1af      	bne.n	80039f8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a98:	1d3b      	adds	r3, r7, #4
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0308 	and.w	r3, r3, #8
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f000 80da 	beq.w	8003c5c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003aa8:	1d3b      	adds	r3, r7, #4
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d069      	beq.n	8003b86 <HAL_RCC_OscConfig+0x6da>
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003abc:	fa93 f3a3 	rbit	r3, r3
 8003ac0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003ac4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ac8:	fab3 f383 	clz	r3, r3
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	461a      	mov	r2, r3
 8003ad0:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <HAL_RCC_OscConfig+0x654>)
 8003ad2:	4413      	add	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	2301      	movs	r3, #1
 8003ada:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003adc:	f7fe fa22 	bl	8001f24 <HAL_GetTick>
 8003ae0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ae4:	e00e      	b.n	8003b04 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ae6:	f7fe fa1d 	bl	8001f24 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d906      	bls.n	8003b04 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e3d9      	b.n	80042ae <HAL_RCC_OscConfig+0xe02>
 8003afa:	bf00      	nop
 8003afc:	40021000 	.word	0x40021000
 8003b00:	10908120 	.word	0x10908120
 8003b04:	2302      	movs	r3, #2
 8003b06:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003b0e:	fa93 f3a3 	rbit	r3, r3
 8003b12:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003b16:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	fa93 f2a3 	rbit	r2, r3
 8003b28:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003b32:	2202      	movs	r2, #2
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	fa93 f2a3 	rbit	r2, r3
 8003b40:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003b44:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b46:	4ba5      	ldr	r3, [pc, #660]	; (8003ddc <HAL_RCC_OscConfig+0x930>)
 8003b48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b4a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003b4e:	2102      	movs	r1, #2
 8003b50:	6019      	str	r1, [r3, #0]
 8003b52:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	fa93 f1a3 	rbit	r1, r3
 8003b5c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003b60:	6019      	str	r1, [r3, #0]
  return result;
 8003b62:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	fab3 f383 	clz	r3, r3
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	f003 031f 	and.w	r3, r3, #31
 8003b78:	2101      	movs	r1, #1
 8003b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b7e:	4013      	ands	r3, r2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d0b0      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x63a>
 8003b84:	e06a      	b.n	8003c5c <HAL_RCC_OscConfig+0x7b0>
 8003b86:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	fa93 f2a3 	rbit	r2, r3
 8003b98:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003b9c:	601a      	str	r2, [r3, #0]
  return result;
 8003b9e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003ba2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ba4:	fab3 f383 	clz	r3, r3
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	461a      	mov	r2, r3
 8003bac:	4b8c      	ldr	r3, [pc, #560]	; (8003de0 <HAL_RCC_OscConfig+0x934>)
 8003bae:	4413      	add	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb8:	f7fe f9b4 	bl	8001f24 <HAL_GetTick>
 8003bbc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bc0:	e009      	b.n	8003bd6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bc2:	f7fe f9af 	bl	8001f24 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e36b      	b.n	80042ae <HAL_RCC_OscConfig+0xe02>
 8003bd6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003bda:	2202      	movs	r2, #2
 8003bdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bde:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	fa93 f2a3 	rbit	r2, r3
 8003be8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003bec:	601a      	str	r2, [r3, #0]
 8003bee:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	601a      	str	r2, [r3, #0]
 8003bf6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	fa93 f2a3 	rbit	r2, r3
 8003c00:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	601a      	str	r2, [r3, #0]
 8003c0e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	fa93 f2a3 	rbit	r2, r3
 8003c18:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003c1c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c1e:	4b6f      	ldr	r3, [pc, #444]	; (8003ddc <HAL_RCC_OscConfig+0x930>)
 8003c20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c22:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003c26:	2102      	movs	r1, #2
 8003c28:	6019      	str	r1, [r3, #0]
 8003c2a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	fa93 f1a3 	rbit	r1, r3
 8003c34:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003c38:	6019      	str	r1, [r3, #0]
  return result;
 8003c3a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	fab3 f383 	clz	r3, r3
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	f003 031f 	and.w	r3, r3, #31
 8003c50:	2101      	movs	r1, #1
 8003c52:	fa01 f303 	lsl.w	r3, r1, r3
 8003c56:	4013      	ands	r3, r2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1b2      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c5c:	1d3b      	adds	r3, r7, #4
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0304 	and.w	r3, r3, #4
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f000 8158 	beq.w	8003f1c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c72:	4b5a      	ldr	r3, [pc, #360]	; (8003ddc <HAL_RCC_OscConfig+0x930>)
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d112      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c7e:	4b57      	ldr	r3, [pc, #348]	; (8003ddc <HAL_RCC_OscConfig+0x930>)
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	4a56      	ldr	r2, [pc, #344]	; (8003ddc <HAL_RCC_OscConfig+0x930>)
 8003c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c88:	61d3      	str	r3, [r2, #28]
 8003c8a:	4b54      	ldr	r3, [pc, #336]	; (8003ddc <HAL_RCC_OscConfig+0x930>)
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003c92:	f107 0308 	add.w	r3, r7, #8
 8003c96:	601a      	str	r2, [r3, #0]
 8003c98:	f107 0308 	add.w	r3, r7, #8
 8003c9c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca4:	4b4f      	ldr	r3, [pc, #316]	; (8003de4 <HAL_RCC_OscConfig+0x938>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d11a      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cb0:	4b4c      	ldr	r3, [pc, #304]	; (8003de4 <HAL_RCC_OscConfig+0x938>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a4b      	ldr	r2, [pc, #300]	; (8003de4 <HAL_RCC_OscConfig+0x938>)
 8003cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cba:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cbc:	f7fe f932 	bl	8001f24 <HAL_GetTick>
 8003cc0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc4:	e009      	b.n	8003cda <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cc6:	f7fe f92d 	bl	8001f24 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b64      	cmp	r3, #100	; 0x64
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e2e9      	b.n	80042ae <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cda:	4b42      	ldr	r3, [pc, #264]	; (8003de4 <HAL_RCC_OscConfig+0x938>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d0ef      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ce6:	1d3b      	adds	r3, r7, #4
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d106      	bne.n	8003cfe <HAL_RCC_OscConfig+0x852>
 8003cf0:	4b3a      	ldr	r3, [pc, #232]	; (8003ddc <HAL_RCC_OscConfig+0x930>)
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	4a39      	ldr	r2, [pc, #228]	; (8003ddc <HAL_RCC_OscConfig+0x930>)
 8003cf6:	f043 0301 	orr.w	r3, r3, #1
 8003cfa:	6213      	str	r3, [r2, #32]
 8003cfc:	e02f      	b.n	8003d5e <HAL_RCC_OscConfig+0x8b2>
 8003cfe:	1d3b      	adds	r3, r7, #4
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10c      	bne.n	8003d22 <HAL_RCC_OscConfig+0x876>
 8003d08:	4b34      	ldr	r3, [pc, #208]	; (8003ddc <HAL_RCC_OscConfig+0x930>)
 8003d0a:	6a1b      	ldr	r3, [r3, #32]
 8003d0c:	4a33      	ldr	r2, [pc, #204]	; (8003ddc <HAL_RCC_OscConfig+0x930>)
 8003d0e:	f023 0301 	bic.w	r3, r3, #1
 8003d12:	6213      	str	r3, [r2, #32]
 8003d14:	4b31      	ldr	r3, [pc, #196]	; (8003ddc <HAL_RCC_OscConfig+0x930>)
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	4a30      	ldr	r2, [pc, #192]	; (8003ddc <HAL_RCC_OscConfig+0x930>)
 8003d1a:	f023 0304 	bic.w	r3, r3, #4
 8003d1e:	6213      	str	r3, [r2, #32]
 8003d20:	e01d      	b.n	8003d5e <HAL_RCC_OscConfig+0x8b2>
 8003d22:	1d3b      	adds	r3, r7, #4
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	2b05      	cmp	r3, #5
 8003d2a:	d10c      	bne.n	8003d46 <HAL_RCC_OscConfig+0x89a>
 8003d2c:	4b2b      	ldr	r3, [pc, #172]	; (8003ddc <HAL_RCC_OscConfig+0x930>)
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	4a2a      	ldr	r2, [pc, #168]	; (8003ddc <HAL_RCC_OscConfig+0x930>)
 8003d32:	f043 0304 	orr.w	r3, r3, #4
 8003d36:	6213      	str	r3, [r2, #32]
 8003d38:	4b28      	ldr	r3, [pc, #160]	; (8003ddc <HAL_RCC_OscConfig+0x930>)
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	4a27      	ldr	r2, [pc, #156]	; (8003ddc <HAL_RCC_OscConfig+0x930>)
 8003d3e:	f043 0301 	orr.w	r3, r3, #1
 8003d42:	6213      	str	r3, [r2, #32]
 8003d44:	e00b      	b.n	8003d5e <HAL_RCC_OscConfig+0x8b2>
 8003d46:	4b25      	ldr	r3, [pc, #148]	; (8003ddc <HAL_RCC_OscConfig+0x930>)
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	4a24      	ldr	r2, [pc, #144]	; (8003ddc <HAL_RCC_OscConfig+0x930>)
 8003d4c:	f023 0301 	bic.w	r3, r3, #1
 8003d50:	6213      	str	r3, [r2, #32]
 8003d52:	4b22      	ldr	r3, [pc, #136]	; (8003ddc <HAL_RCC_OscConfig+0x930>)
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	4a21      	ldr	r2, [pc, #132]	; (8003ddc <HAL_RCC_OscConfig+0x930>)
 8003d58:	f023 0304 	bic.w	r3, r3, #4
 8003d5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d5e:	1d3b      	adds	r3, r7, #4
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d06b      	beq.n	8003e40 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d68:	f7fe f8dc 	bl	8001f24 <HAL_GetTick>
 8003d6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d70:	e00b      	b.n	8003d8a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d72:	f7fe f8d7 	bl	8001f24 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e291      	b.n	80042ae <HAL_RCC_OscConfig+0xe02>
 8003d8a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003d8e:	2202      	movs	r2, #2
 8003d90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d92:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	fa93 f2a3 	rbit	r2, r3
 8003d9c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003da6:	2202      	movs	r2, #2
 8003da8:	601a      	str	r2, [r3, #0]
 8003daa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	fa93 f2a3 	rbit	r2, r3
 8003db4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003db8:	601a      	str	r2, [r3, #0]
  return result;
 8003dba:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003dbe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc0:	fab3 f383 	clz	r3, r3
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	095b      	lsrs	r3, r3, #5
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	f043 0302 	orr.w	r3, r3, #2
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d109      	bne.n	8003de8 <HAL_RCC_OscConfig+0x93c>
 8003dd4:	4b01      	ldr	r3, [pc, #4]	; (8003ddc <HAL_RCC_OscConfig+0x930>)
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	e014      	b.n	8003e04 <HAL_RCC_OscConfig+0x958>
 8003dda:	bf00      	nop
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	10908120 	.word	0x10908120
 8003de4:	40007000 	.word	0x40007000
 8003de8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003dec:	2202      	movs	r2, #2
 8003dee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	fa93 f2a3 	rbit	r2, r3
 8003dfa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	4bbb      	ldr	r3, [pc, #748]	; (80040f0 <HAL_RCC_OscConfig+0xc44>)
 8003e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e04:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003e08:	2102      	movs	r1, #2
 8003e0a:	6011      	str	r1, [r2, #0]
 8003e0c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003e10:	6812      	ldr	r2, [r2, #0]
 8003e12:	fa92 f1a2 	rbit	r1, r2
 8003e16:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003e1a:	6011      	str	r1, [r2, #0]
  return result;
 8003e1c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003e20:	6812      	ldr	r2, [r2, #0]
 8003e22:	fab2 f282 	clz	r2, r2
 8003e26:	b2d2      	uxtb	r2, r2
 8003e28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e2c:	b2d2      	uxtb	r2, r2
 8003e2e:	f002 021f 	and.w	r2, r2, #31
 8003e32:	2101      	movs	r1, #1
 8003e34:	fa01 f202 	lsl.w	r2, r1, r2
 8003e38:	4013      	ands	r3, r2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d099      	beq.n	8003d72 <HAL_RCC_OscConfig+0x8c6>
 8003e3e:	e063      	b.n	8003f08 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e40:	f7fe f870 	bl	8001f24 <HAL_GetTick>
 8003e44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e48:	e00b      	b.n	8003e62 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e4a:	f7fe f86b 	bl	8001f24 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e225      	b.n	80042ae <HAL_RCC_OscConfig+0xe02>
 8003e62:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003e66:	2202      	movs	r2, #2
 8003e68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e6a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	fa93 f2a3 	rbit	r2, r3
 8003e74:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003e7e:	2202      	movs	r2, #2
 8003e80:	601a      	str	r2, [r3, #0]
 8003e82:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	fa93 f2a3 	rbit	r2, r3
 8003e8c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003e90:	601a      	str	r2, [r3, #0]
  return result;
 8003e92:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003e96:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e98:	fab3 f383 	clz	r3, r3
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	095b      	lsrs	r3, r3, #5
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	f043 0302 	orr.w	r3, r3, #2
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d102      	bne.n	8003eb2 <HAL_RCC_OscConfig+0xa06>
 8003eac:	4b90      	ldr	r3, [pc, #576]	; (80040f0 <HAL_RCC_OscConfig+0xc44>)
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	e00d      	b.n	8003ece <HAL_RCC_OscConfig+0xa22>
 8003eb2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	fa93 f2a3 	rbit	r2, r3
 8003ec4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	4b89      	ldr	r3, [pc, #548]	; (80040f0 <HAL_RCC_OscConfig+0xc44>)
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ece:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003ed2:	2102      	movs	r1, #2
 8003ed4:	6011      	str	r1, [r2, #0]
 8003ed6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003eda:	6812      	ldr	r2, [r2, #0]
 8003edc:	fa92 f1a2 	rbit	r1, r2
 8003ee0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003ee4:	6011      	str	r1, [r2, #0]
  return result;
 8003ee6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003eea:	6812      	ldr	r2, [r2, #0]
 8003eec:	fab2 f282 	clz	r2, r2
 8003ef0:	b2d2      	uxtb	r2, r2
 8003ef2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ef6:	b2d2      	uxtb	r2, r2
 8003ef8:	f002 021f 	and.w	r2, r2, #31
 8003efc:	2101      	movs	r1, #1
 8003efe:	fa01 f202 	lsl.w	r2, r1, r2
 8003f02:	4013      	ands	r3, r2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d1a0      	bne.n	8003e4a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f08:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d105      	bne.n	8003f1c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f10:	4b77      	ldr	r3, [pc, #476]	; (80040f0 <HAL_RCC_OscConfig+0xc44>)
 8003f12:	69db      	ldr	r3, [r3, #28]
 8003f14:	4a76      	ldr	r2, [pc, #472]	; (80040f0 <HAL_RCC_OscConfig+0xc44>)
 8003f16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f1a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f1c:	1d3b      	adds	r3, r7, #4
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f000 81c2 	beq.w	80042ac <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f28:	4b71      	ldr	r3, [pc, #452]	; (80040f0 <HAL_RCC_OscConfig+0xc44>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f003 030c 	and.w	r3, r3, #12
 8003f30:	2b08      	cmp	r3, #8
 8003f32:	f000 819c 	beq.w	800426e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f36:	1d3b      	adds	r3, r7, #4
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	69db      	ldr	r3, [r3, #28]
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	f040 8114 	bne.w	800416a <HAL_RCC_OscConfig+0xcbe>
 8003f42:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003f46:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	fa93 f2a3 	rbit	r2, r3
 8003f56:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003f5a:	601a      	str	r2, [r3, #0]
  return result;
 8003f5c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003f60:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f62:	fab3 f383 	clz	r3, r3
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f6c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	461a      	mov	r2, r3
 8003f74:	2300      	movs	r3, #0
 8003f76:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f78:	f7fd ffd4 	bl	8001f24 <HAL_GetTick>
 8003f7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f80:	e009      	b.n	8003f96 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f82:	f7fd ffcf 	bl	8001f24 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e18b      	b.n	80042ae <HAL_RCC_OscConfig+0xe02>
 8003f96:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003f9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	fa93 f2a3 	rbit	r2, r3
 8003faa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003fae:	601a      	str	r2, [r3, #0]
  return result;
 8003fb0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003fb4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fb6:	fab3 f383 	clz	r3, r3
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	095b      	lsrs	r3, r3, #5
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	f043 0301 	orr.w	r3, r3, #1
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d102      	bne.n	8003fd0 <HAL_RCC_OscConfig+0xb24>
 8003fca:	4b49      	ldr	r3, [pc, #292]	; (80040f0 <HAL_RCC_OscConfig+0xc44>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	e01b      	b.n	8004008 <HAL_RCC_OscConfig+0xb5c>
 8003fd0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003fd4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fda:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	fa93 f2a3 	rbit	r2, r3
 8003fe4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003fe8:	601a      	str	r2, [r3, #0]
 8003fea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003fee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	fa93 f2a3 	rbit	r2, r3
 8003ffe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004002:	601a      	str	r2, [r3, #0]
 8004004:	4b3a      	ldr	r3, [pc, #232]	; (80040f0 <HAL_RCC_OscConfig+0xc44>)
 8004006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004008:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800400c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004010:	6011      	str	r1, [r2, #0]
 8004012:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004016:	6812      	ldr	r2, [r2, #0]
 8004018:	fa92 f1a2 	rbit	r1, r2
 800401c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004020:	6011      	str	r1, [r2, #0]
  return result;
 8004022:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004026:	6812      	ldr	r2, [r2, #0]
 8004028:	fab2 f282 	clz	r2, r2
 800402c:	b2d2      	uxtb	r2, r2
 800402e:	f042 0220 	orr.w	r2, r2, #32
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	f002 021f 	and.w	r2, r2, #31
 8004038:	2101      	movs	r1, #1
 800403a:	fa01 f202 	lsl.w	r2, r1, r2
 800403e:	4013      	ands	r3, r2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d19e      	bne.n	8003f82 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004044:	4b2a      	ldr	r3, [pc, #168]	; (80040f0 <HAL_RCC_OscConfig+0xc44>)
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800404c:	1d3b      	adds	r3, r7, #4
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004052:	1d3b      	adds	r3, r7, #4
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	430b      	orrs	r3, r1
 800405a:	4925      	ldr	r1, [pc, #148]	; (80040f0 <HAL_RCC_OscConfig+0xc44>)
 800405c:	4313      	orrs	r3, r2
 800405e:	604b      	str	r3, [r1, #4]
 8004060:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004064:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004068:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	fa93 f2a3 	rbit	r2, r3
 8004074:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004078:	601a      	str	r2, [r3, #0]
  return result;
 800407a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800407e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004080:	fab3 f383 	clz	r3, r3
 8004084:	b2db      	uxtb	r3, r3
 8004086:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800408a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	461a      	mov	r2, r3
 8004092:	2301      	movs	r3, #1
 8004094:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004096:	f7fd ff45 	bl	8001f24 <HAL_GetTick>
 800409a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800409e:	e009      	b.n	80040b4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040a0:	f7fd ff40 	bl	8001f24 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d901      	bls.n	80040b4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e0fc      	b.n	80042ae <HAL_RCC_OscConfig+0xe02>
 80040b4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80040b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	fa93 f2a3 	rbit	r2, r3
 80040c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80040cc:	601a      	str	r2, [r3, #0]
  return result;
 80040ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80040d2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040d4:	fab3 f383 	clz	r3, r3
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	095b      	lsrs	r3, r3, #5
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	f043 0301 	orr.w	r3, r3, #1
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d105      	bne.n	80040f4 <HAL_RCC_OscConfig+0xc48>
 80040e8:	4b01      	ldr	r3, [pc, #4]	; (80040f0 <HAL_RCC_OscConfig+0xc44>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	e01e      	b.n	800412c <HAL_RCC_OscConfig+0xc80>
 80040ee:	bf00      	nop
 80040f0:	40021000 	.word	0x40021000
 80040f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80040f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	fa93 f2a3 	rbit	r2, r3
 8004108:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800410c:	601a      	str	r2, [r3, #0]
 800410e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004112:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	fa93 f2a3 	rbit	r2, r3
 8004122:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	4b63      	ldr	r3, [pc, #396]	; (80042b8 <HAL_RCC_OscConfig+0xe0c>)
 800412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004130:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004134:	6011      	str	r1, [r2, #0]
 8004136:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800413a:	6812      	ldr	r2, [r2, #0]
 800413c:	fa92 f1a2 	rbit	r1, r2
 8004140:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004144:	6011      	str	r1, [r2, #0]
  return result;
 8004146:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800414a:	6812      	ldr	r2, [r2, #0]
 800414c:	fab2 f282 	clz	r2, r2
 8004150:	b2d2      	uxtb	r2, r2
 8004152:	f042 0220 	orr.w	r2, r2, #32
 8004156:	b2d2      	uxtb	r2, r2
 8004158:	f002 021f 	and.w	r2, r2, #31
 800415c:	2101      	movs	r1, #1
 800415e:	fa01 f202 	lsl.w	r2, r1, r2
 8004162:	4013      	ands	r3, r2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d09b      	beq.n	80040a0 <HAL_RCC_OscConfig+0xbf4>
 8004168:	e0a0      	b.n	80042ac <HAL_RCC_OscConfig+0xe00>
 800416a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800416e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004172:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004174:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	fa93 f2a3 	rbit	r2, r3
 800417e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004182:	601a      	str	r2, [r3, #0]
  return result;
 8004184:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004188:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800418a:	fab3 f383 	clz	r3, r3
 800418e:	b2db      	uxtb	r3, r3
 8004190:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004194:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	461a      	mov	r2, r3
 800419c:	2300      	movs	r3, #0
 800419e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a0:	f7fd fec0 	bl	8001f24 <HAL_GetTick>
 80041a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041a8:	e009      	b.n	80041be <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041aa:	f7fd febb 	bl	8001f24 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e077      	b.n	80042ae <HAL_RCC_OscConfig+0xe02>
 80041be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	fa93 f2a3 	rbit	r2, r3
 80041d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041d6:	601a      	str	r2, [r3, #0]
  return result;
 80041d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041dc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041de:	fab3 f383 	clz	r3, r3
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	095b      	lsrs	r3, r3, #5
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	f043 0301 	orr.w	r3, r3, #1
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d102      	bne.n	80041f8 <HAL_RCC_OscConfig+0xd4c>
 80041f2:	4b31      	ldr	r3, [pc, #196]	; (80042b8 <HAL_RCC_OscConfig+0xe0c>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	e01b      	b.n	8004230 <HAL_RCC_OscConfig+0xd84>
 80041f8:	f107 0320 	add.w	r3, r7, #32
 80041fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004200:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004202:	f107 0320 	add.w	r3, r7, #32
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	fa93 f2a3 	rbit	r2, r3
 800420c:	f107 031c 	add.w	r3, r7, #28
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	f107 0318 	add.w	r3, r7, #24
 8004216:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800421a:	601a      	str	r2, [r3, #0]
 800421c:	f107 0318 	add.w	r3, r7, #24
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	fa93 f2a3 	rbit	r2, r3
 8004226:	f107 0314 	add.w	r3, r7, #20
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	4b22      	ldr	r3, [pc, #136]	; (80042b8 <HAL_RCC_OscConfig+0xe0c>)
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	f107 0210 	add.w	r2, r7, #16
 8004234:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004238:	6011      	str	r1, [r2, #0]
 800423a:	f107 0210 	add.w	r2, r7, #16
 800423e:	6812      	ldr	r2, [r2, #0]
 8004240:	fa92 f1a2 	rbit	r1, r2
 8004244:	f107 020c 	add.w	r2, r7, #12
 8004248:	6011      	str	r1, [r2, #0]
  return result;
 800424a:	f107 020c 	add.w	r2, r7, #12
 800424e:	6812      	ldr	r2, [r2, #0]
 8004250:	fab2 f282 	clz	r2, r2
 8004254:	b2d2      	uxtb	r2, r2
 8004256:	f042 0220 	orr.w	r2, r2, #32
 800425a:	b2d2      	uxtb	r2, r2
 800425c:	f002 021f 	and.w	r2, r2, #31
 8004260:	2101      	movs	r1, #1
 8004262:	fa01 f202 	lsl.w	r2, r1, r2
 8004266:	4013      	ands	r3, r2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d19e      	bne.n	80041aa <HAL_RCC_OscConfig+0xcfe>
 800426c:	e01e      	b.n	80042ac <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800426e:	1d3b      	adds	r3, r7, #4
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	69db      	ldr	r3, [r3, #28]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d101      	bne.n	800427c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e018      	b.n	80042ae <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800427c:	4b0e      	ldr	r3, [pc, #56]	; (80042b8 <HAL_RCC_OscConfig+0xe0c>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004284:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004288:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800428c:	1d3b      	adds	r3, r7, #4
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	429a      	cmp	r2, r3
 8004294:	d108      	bne.n	80042a8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004296:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800429a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800429e:	1d3b      	adds	r3, r7, #4
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d001      	beq.n	80042ac <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e000      	b.n	80042ae <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	40021000 	.word	0x40021000

080042bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b09e      	sub	sp, #120	; 0x78
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80042c6:	2300      	movs	r3, #0
 80042c8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d101      	bne.n	80042d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e162      	b.n	800459a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042d4:	4b90      	ldr	r3, [pc, #576]	; (8004518 <HAL_RCC_ClockConfig+0x25c>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0307 	and.w	r3, r3, #7
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d910      	bls.n	8004304 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042e2:	4b8d      	ldr	r3, [pc, #564]	; (8004518 <HAL_RCC_ClockConfig+0x25c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f023 0207 	bic.w	r2, r3, #7
 80042ea:	498b      	ldr	r1, [pc, #556]	; (8004518 <HAL_RCC_ClockConfig+0x25c>)
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042f2:	4b89      	ldr	r3, [pc, #548]	; (8004518 <HAL_RCC_ClockConfig+0x25c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0307 	and.w	r3, r3, #7
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d001      	beq.n	8004304 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e14a      	b.n	800459a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d008      	beq.n	8004322 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004310:	4b82      	ldr	r3, [pc, #520]	; (800451c <HAL_RCC_ClockConfig+0x260>)
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	497f      	ldr	r1, [pc, #508]	; (800451c <HAL_RCC_ClockConfig+0x260>)
 800431e:	4313      	orrs	r3, r2
 8004320:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	f000 80dc 	beq.w	80044e8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d13c      	bne.n	80043b2 <HAL_RCC_ClockConfig+0xf6>
 8004338:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800433c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800433e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004340:	fa93 f3a3 	rbit	r3, r3
 8004344:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004348:	fab3 f383 	clz	r3, r3
 800434c:	b2db      	uxtb	r3, r3
 800434e:	095b      	lsrs	r3, r3, #5
 8004350:	b2db      	uxtb	r3, r3
 8004352:	f043 0301 	orr.w	r3, r3, #1
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b01      	cmp	r3, #1
 800435a:	d102      	bne.n	8004362 <HAL_RCC_ClockConfig+0xa6>
 800435c:	4b6f      	ldr	r3, [pc, #444]	; (800451c <HAL_RCC_ClockConfig+0x260>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	e00f      	b.n	8004382 <HAL_RCC_ClockConfig+0xc6>
 8004362:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004366:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004368:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800436a:	fa93 f3a3 	rbit	r3, r3
 800436e:	667b      	str	r3, [r7, #100]	; 0x64
 8004370:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004374:	663b      	str	r3, [r7, #96]	; 0x60
 8004376:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004378:	fa93 f3a3 	rbit	r3, r3
 800437c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800437e:	4b67      	ldr	r3, [pc, #412]	; (800451c <HAL_RCC_ClockConfig+0x260>)
 8004380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004382:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004386:	65ba      	str	r2, [r7, #88]	; 0x58
 8004388:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800438a:	fa92 f2a2 	rbit	r2, r2
 800438e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004390:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004392:	fab2 f282 	clz	r2, r2
 8004396:	b2d2      	uxtb	r2, r2
 8004398:	f042 0220 	orr.w	r2, r2, #32
 800439c:	b2d2      	uxtb	r2, r2
 800439e:	f002 021f 	and.w	r2, r2, #31
 80043a2:	2101      	movs	r1, #1
 80043a4:	fa01 f202 	lsl.w	r2, r1, r2
 80043a8:	4013      	ands	r3, r2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d17b      	bne.n	80044a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e0f3      	b.n	800459a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d13c      	bne.n	8004434 <HAL_RCC_ClockConfig+0x178>
 80043ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043be:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043c2:	fa93 f3a3 	rbit	r3, r3
 80043c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80043c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ca:	fab3 f383 	clz	r3, r3
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	095b      	lsrs	r3, r3, #5
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	f043 0301 	orr.w	r3, r3, #1
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d102      	bne.n	80043e4 <HAL_RCC_ClockConfig+0x128>
 80043de:	4b4f      	ldr	r3, [pc, #316]	; (800451c <HAL_RCC_ClockConfig+0x260>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	e00f      	b.n	8004404 <HAL_RCC_ClockConfig+0x148>
 80043e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043e8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043ec:	fa93 f3a3 	rbit	r3, r3
 80043f0:	647b      	str	r3, [r7, #68]	; 0x44
 80043f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043f6:	643b      	str	r3, [r7, #64]	; 0x40
 80043f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043fa:	fa93 f3a3 	rbit	r3, r3
 80043fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004400:	4b46      	ldr	r3, [pc, #280]	; (800451c <HAL_RCC_ClockConfig+0x260>)
 8004402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004404:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004408:	63ba      	str	r2, [r7, #56]	; 0x38
 800440a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800440c:	fa92 f2a2 	rbit	r2, r2
 8004410:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004412:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004414:	fab2 f282 	clz	r2, r2
 8004418:	b2d2      	uxtb	r2, r2
 800441a:	f042 0220 	orr.w	r2, r2, #32
 800441e:	b2d2      	uxtb	r2, r2
 8004420:	f002 021f 	and.w	r2, r2, #31
 8004424:	2101      	movs	r1, #1
 8004426:	fa01 f202 	lsl.w	r2, r1, r2
 800442a:	4013      	ands	r3, r2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d13a      	bne.n	80044a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e0b2      	b.n	800459a <HAL_RCC_ClockConfig+0x2de>
 8004434:	2302      	movs	r3, #2
 8004436:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443a:	fa93 f3a3 	rbit	r3, r3
 800443e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004442:	fab3 f383 	clz	r3, r3
 8004446:	b2db      	uxtb	r3, r3
 8004448:	095b      	lsrs	r3, r3, #5
 800444a:	b2db      	uxtb	r3, r3
 800444c:	f043 0301 	orr.w	r3, r3, #1
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b01      	cmp	r3, #1
 8004454:	d102      	bne.n	800445c <HAL_RCC_ClockConfig+0x1a0>
 8004456:	4b31      	ldr	r3, [pc, #196]	; (800451c <HAL_RCC_ClockConfig+0x260>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	e00d      	b.n	8004478 <HAL_RCC_ClockConfig+0x1bc>
 800445c:	2302      	movs	r3, #2
 800445e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004462:	fa93 f3a3 	rbit	r3, r3
 8004466:	627b      	str	r3, [r7, #36]	; 0x24
 8004468:	2302      	movs	r3, #2
 800446a:	623b      	str	r3, [r7, #32]
 800446c:	6a3b      	ldr	r3, [r7, #32]
 800446e:	fa93 f3a3 	rbit	r3, r3
 8004472:	61fb      	str	r3, [r7, #28]
 8004474:	4b29      	ldr	r3, [pc, #164]	; (800451c <HAL_RCC_ClockConfig+0x260>)
 8004476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004478:	2202      	movs	r2, #2
 800447a:	61ba      	str	r2, [r7, #24]
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	fa92 f2a2 	rbit	r2, r2
 8004482:	617a      	str	r2, [r7, #20]
  return result;
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	fab2 f282 	clz	r2, r2
 800448a:	b2d2      	uxtb	r2, r2
 800448c:	f042 0220 	orr.w	r2, r2, #32
 8004490:	b2d2      	uxtb	r2, r2
 8004492:	f002 021f 	and.w	r2, r2, #31
 8004496:	2101      	movs	r1, #1
 8004498:	fa01 f202 	lsl.w	r2, r1, r2
 800449c:	4013      	ands	r3, r2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e079      	b.n	800459a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044a6:	4b1d      	ldr	r3, [pc, #116]	; (800451c <HAL_RCC_ClockConfig+0x260>)
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f023 0203 	bic.w	r2, r3, #3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	491a      	ldr	r1, [pc, #104]	; (800451c <HAL_RCC_ClockConfig+0x260>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044b8:	f7fd fd34 	bl	8001f24 <HAL_GetTick>
 80044bc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044be:	e00a      	b.n	80044d6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044c0:	f7fd fd30 	bl	8001f24 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e061      	b.n	800459a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044d6:	4b11      	ldr	r3, [pc, #68]	; (800451c <HAL_RCC_ClockConfig+0x260>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f003 020c 	and.w	r2, r3, #12
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d1eb      	bne.n	80044c0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044e8:	4b0b      	ldr	r3, [pc, #44]	; (8004518 <HAL_RCC_ClockConfig+0x25c>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0307 	and.w	r3, r3, #7
 80044f0:	683a      	ldr	r2, [r7, #0]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d214      	bcs.n	8004520 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044f6:	4b08      	ldr	r3, [pc, #32]	; (8004518 <HAL_RCC_ClockConfig+0x25c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f023 0207 	bic.w	r2, r3, #7
 80044fe:	4906      	ldr	r1, [pc, #24]	; (8004518 <HAL_RCC_ClockConfig+0x25c>)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	4313      	orrs	r3, r2
 8004504:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004506:	4b04      	ldr	r3, [pc, #16]	; (8004518 <HAL_RCC_ClockConfig+0x25c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0307 	and.w	r3, r3, #7
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	429a      	cmp	r2, r3
 8004512:	d005      	beq.n	8004520 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e040      	b.n	800459a <HAL_RCC_ClockConfig+0x2de>
 8004518:	40022000 	.word	0x40022000
 800451c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0304 	and.w	r3, r3, #4
 8004528:	2b00      	cmp	r3, #0
 800452a:	d008      	beq.n	800453e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800452c:	4b1d      	ldr	r3, [pc, #116]	; (80045a4 <HAL_RCC_ClockConfig+0x2e8>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	491a      	ldr	r1, [pc, #104]	; (80045a4 <HAL_RCC_ClockConfig+0x2e8>)
 800453a:	4313      	orrs	r3, r2
 800453c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0308 	and.w	r3, r3, #8
 8004546:	2b00      	cmp	r3, #0
 8004548:	d009      	beq.n	800455e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800454a:	4b16      	ldr	r3, [pc, #88]	; (80045a4 <HAL_RCC_ClockConfig+0x2e8>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	00db      	lsls	r3, r3, #3
 8004558:	4912      	ldr	r1, [pc, #72]	; (80045a4 <HAL_RCC_ClockConfig+0x2e8>)
 800455a:	4313      	orrs	r3, r2
 800455c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800455e:	f000 f829 	bl	80045b4 <HAL_RCC_GetSysClockFreq>
 8004562:	4601      	mov	r1, r0
 8004564:	4b0f      	ldr	r3, [pc, #60]	; (80045a4 <HAL_RCC_ClockConfig+0x2e8>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800456c:	22f0      	movs	r2, #240	; 0xf0
 800456e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	fa92 f2a2 	rbit	r2, r2
 8004576:	60fa      	str	r2, [r7, #12]
  return result;
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	fab2 f282 	clz	r2, r2
 800457e:	b2d2      	uxtb	r2, r2
 8004580:	40d3      	lsrs	r3, r2
 8004582:	4a09      	ldr	r2, [pc, #36]	; (80045a8 <HAL_RCC_ClockConfig+0x2ec>)
 8004584:	5cd3      	ldrb	r3, [r2, r3]
 8004586:	fa21 f303 	lsr.w	r3, r1, r3
 800458a:	4a08      	ldr	r2, [pc, #32]	; (80045ac <HAL_RCC_ClockConfig+0x2f0>)
 800458c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800458e:	4b08      	ldr	r3, [pc, #32]	; (80045b0 <HAL_RCC_ClockConfig+0x2f4>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4618      	mov	r0, r3
 8004594:	f7fd fc82 	bl	8001e9c <HAL_InitTick>
  
  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3778      	adds	r7, #120	; 0x78
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	40021000 	.word	0x40021000
 80045a8:	08006b70 	.word	0x08006b70
 80045ac:	20000004 	.word	0x20000004
 80045b0:	20000008 	.word	0x20000008

080045b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b08b      	sub	sp, #44	; 0x2c
 80045b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045ba:	2300      	movs	r3, #0
 80045bc:	61fb      	str	r3, [r7, #28]
 80045be:	2300      	movs	r3, #0
 80045c0:	61bb      	str	r3, [r7, #24]
 80045c2:	2300      	movs	r3, #0
 80045c4:	627b      	str	r3, [r7, #36]	; 0x24
 80045c6:	2300      	movs	r3, #0
 80045c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80045ca:	2300      	movs	r3, #0
 80045cc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80045ce:	4b29      	ldr	r3, [pc, #164]	; (8004674 <HAL_RCC_GetSysClockFreq+0xc0>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	f003 030c 	and.w	r3, r3, #12
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d002      	beq.n	80045e4 <HAL_RCC_GetSysClockFreq+0x30>
 80045de:	2b08      	cmp	r3, #8
 80045e0:	d003      	beq.n	80045ea <HAL_RCC_GetSysClockFreq+0x36>
 80045e2:	e03c      	b.n	800465e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045e4:	4b24      	ldr	r3, [pc, #144]	; (8004678 <HAL_RCC_GetSysClockFreq+0xc4>)
 80045e6:	623b      	str	r3, [r7, #32]
      break;
 80045e8:	e03c      	b.n	8004664 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80045f0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80045f4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	fa92 f2a2 	rbit	r2, r2
 80045fc:	607a      	str	r2, [r7, #4]
  return result;
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	fab2 f282 	clz	r2, r2
 8004604:	b2d2      	uxtb	r2, r2
 8004606:	40d3      	lsrs	r3, r2
 8004608:	4a1c      	ldr	r2, [pc, #112]	; (800467c <HAL_RCC_GetSysClockFreq+0xc8>)
 800460a:	5cd3      	ldrb	r3, [r2, r3]
 800460c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800460e:	4b19      	ldr	r3, [pc, #100]	; (8004674 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004612:	f003 030f 	and.w	r3, r3, #15
 8004616:	220f      	movs	r2, #15
 8004618:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	fa92 f2a2 	rbit	r2, r2
 8004620:	60fa      	str	r2, [r7, #12]
  return result;
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	fab2 f282 	clz	r2, r2
 8004628:	b2d2      	uxtb	r2, r2
 800462a:	40d3      	lsrs	r3, r2
 800462c:	4a14      	ldr	r2, [pc, #80]	; (8004680 <HAL_RCC_GetSysClockFreq+0xcc>)
 800462e:	5cd3      	ldrb	r3, [r2, r3]
 8004630:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d008      	beq.n	800464e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800463c:	4a0e      	ldr	r2, [pc, #56]	; (8004678 <HAL_RCC_GetSysClockFreq+0xc4>)
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	fbb2 f2f3 	udiv	r2, r2, r3
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	fb02 f303 	mul.w	r3, r2, r3
 800464a:	627b      	str	r3, [r7, #36]	; 0x24
 800464c:	e004      	b.n	8004658 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	4a0c      	ldr	r2, [pc, #48]	; (8004684 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004652:	fb02 f303 	mul.w	r3, r2, r3
 8004656:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	623b      	str	r3, [r7, #32]
      break;
 800465c:	e002      	b.n	8004664 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800465e:	4b0a      	ldr	r3, [pc, #40]	; (8004688 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004660:	623b      	str	r3, [r7, #32]
      break;
 8004662:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004664:	6a3b      	ldr	r3, [r7, #32]
}
 8004666:	4618      	mov	r0, r3
 8004668:	372c      	adds	r7, #44	; 0x2c
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	40021000 	.word	0x40021000
 8004678:	00f42400 	.word	0x00f42400
 800467c:	08006b88 	.word	0x08006b88
 8004680:	08006b98 	.word	0x08006b98
 8004684:	003d0900 	.word	0x003d0900
 8004688:	007a1200 	.word	0x007a1200

0800468c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800468c:	b480      	push	{r7}
 800468e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004690:	4b03      	ldr	r3, [pc, #12]	; (80046a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004692:	681b      	ldr	r3, [r3, #0]
}
 8004694:	4618      	mov	r0, r3
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	20000004 	.word	0x20000004

080046a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80046aa:	f7ff ffef 	bl	800468c <HAL_RCC_GetHCLKFreq>
 80046ae:	4601      	mov	r1, r0
 80046b0:	4b0b      	ldr	r3, [pc, #44]	; (80046e0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046b8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80046bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	fa92 f2a2 	rbit	r2, r2
 80046c4:	603a      	str	r2, [r7, #0]
  return result;
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	fab2 f282 	clz	r2, r2
 80046cc:	b2d2      	uxtb	r2, r2
 80046ce:	40d3      	lsrs	r3, r2
 80046d0:	4a04      	ldr	r2, [pc, #16]	; (80046e4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80046d2:	5cd3      	ldrb	r3, [r2, r3]
 80046d4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80046d8:	4618      	mov	r0, r3
 80046da:	3708      	adds	r7, #8
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	40021000 	.word	0x40021000
 80046e4:	08006b80 	.word	0x08006b80

080046e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80046ee:	f7ff ffcd 	bl	800468c <HAL_RCC_GetHCLKFreq>
 80046f2:	4601      	mov	r1, r0
 80046f4:	4b0b      	ldr	r3, [pc, #44]	; (8004724 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80046fc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004700:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	fa92 f2a2 	rbit	r2, r2
 8004708:	603a      	str	r2, [r7, #0]
  return result;
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	fab2 f282 	clz	r2, r2
 8004710:	b2d2      	uxtb	r2, r2
 8004712:	40d3      	lsrs	r3, r2
 8004714:	4a04      	ldr	r2, [pc, #16]	; (8004728 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004716:	5cd3      	ldrb	r3, [r2, r3]
 8004718:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800471c:	4618      	mov	r0, r3
 800471e:	3708      	adds	r7, #8
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	40021000 	.word	0x40021000
 8004728:	08006b80 	.word	0x08006b80

0800472c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b092      	sub	sp, #72	; 0x48
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004734:	2300      	movs	r3, #0
 8004736:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004738:	2300      	movs	r3, #0
 800473a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800473c:	2300      	movs	r3, #0
 800473e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800474a:	2b00      	cmp	r3, #0
 800474c:	f000 80d4 	beq.w	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004750:	4b4e      	ldr	r3, [pc, #312]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004752:	69db      	ldr	r3, [r3, #28]
 8004754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d10e      	bne.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800475c:	4b4b      	ldr	r3, [pc, #300]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800475e:	69db      	ldr	r3, [r3, #28]
 8004760:	4a4a      	ldr	r2, [pc, #296]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004766:	61d3      	str	r3, [r2, #28]
 8004768:	4b48      	ldr	r3, [pc, #288]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800476a:	69db      	ldr	r3, [r3, #28]
 800476c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004770:	60bb      	str	r3, [r7, #8]
 8004772:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004774:	2301      	movs	r3, #1
 8004776:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800477a:	4b45      	ldr	r3, [pc, #276]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004782:	2b00      	cmp	r3, #0
 8004784:	d118      	bne.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004786:	4b42      	ldr	r3, [pc, #264]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a41      	ldr	r2, [pc, #260]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800478c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004790:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004792:	f7fd fbc7 	bl	8001f24 <HAL_GetTick>
 8004796:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004798:	e008      	b.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800479a:	f7fd fbc3 	bl	8001f24 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b64      	cmp	r3, #100	; 0x64
 80047a6:	d901      	bls.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e12d      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ac:	4b38      	ldr	r3, [pc, #224]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d0f0      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047b8:	4b34      	ldr	r3, [pc, #208]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 8084 	beq.w	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d07c      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047d8:	4b2c      	ldr	r3, [pc, #176]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80047e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ea:	fa93 f3a3 	rbit	r3, r3
 80047ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80047f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047f2:	fab3 f383 	clz	r3, r3
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	461a      	mov	r2, r3
 80047fa:	4b26      	ldr	r3, [pc, #152]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047fc:	4413      	add	r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	461a      	mov	r2, r3
 8004802:	2301      	movs	r3, #1
 8004804:	6013      	str	r3, [r2, #0]
 8004806:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800480a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800480c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800480e:	fa93 f3a3 	rbit	r3, r3
 8004812:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004816:	fab3 f383 	clz	r3, r3
 800481a:	b2db      	uxtb	r3, r3
 800481c:	461a      	mov	r2, r3
 800481e:	4b1d      	ldr	r3, [pc, #116]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004820:	4413      	add	r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	461a      	mov	r2, r3
 8004826:	2300      	movs	r3, #0
 8004828:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800482a:	4a18      	ldr	r2, [pc, #96]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800482c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800482e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d04b      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800483a:	f7fd fb73 	bl	8001f24 <HAL_GetTick>
 800483e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004840:	e00a      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004842:	f7fd fb6f 	bl	8001f24 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004850:	4293      	cmp	r3, r2
 8004852:	d901      	bls.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e0d7      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8004858:	2302      	movs	r3, #2
 800485a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800485c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485e:	fa93 f3a3 	rbit	r3, r3
 8004862:	627b      	str	r3, [r7, #36]	; 0x24
 8004864:	2302      	movs	r3, #2
 8004866:	623b      	str	r3, [r7, #32]
 8004868:	6a3b      	ldr	r3, [r7, #32]
 800486a:	fa93 f3a3 	rbit	r3, r3
 800486e:	61fb      	str	r3, [r7, #28]
  return result;
 8004870:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004872:	fab3 f383 	clz	r3, r3
 8004876:	b2db      	uxtb	r3, r3
 8004878:	095b      	lsrs	r3, r3, #5
 800487a:	b2db      	uxtb	r3, r3
 800487c:	f043 0302 	orr.w	r3, r3, #2
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d108      	bne.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004886:	4b01      	ldr	r3, [pc, #4]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	e00d      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800488c:	40021000 	.word	0x40021000
 8004890:	40007000 	.word	0x40007000
 8004894:	10908100 	.word	0x10908100
 8004898:	2302      	movs	r3, #2
 800489a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	fa93 f3a3 	rbit	r3, r3
 80048a2:	617b      	str	r3, [r7, #20]
 80048a4:	4b5a      	ldr	r3, [pc, #360]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80048a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a8:	2202      	movs	r2, #2
 80048aa:	613a      	str	r2, [r7, #16]
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	fa92 f2a2 	rbit	r2, r2
 80048b2:	60fa      	str	r2, [r7, #12]
  return result;
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	fab2 f282 	clz	r2, r2
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048c0:	b2d2      	uxtb	r2, r2
 80048c2:	f002 021f 	and.w	r2, r2, #31
 80048c6:	2101      	movs	r1, #1
 80048c8:	fa01 f202 	lsl.w	r2, r1, r2
 80048cc:	4013      	ands	r3, r2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d0b7      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80048d2:	4b4f      	ldr	r3, [pc, #316]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	494c      	ldr	r1, [pc, #304]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80048e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d105      	bne.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048ec:	4b48      	ldr	r3, [pc, #288]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80048ee:	69db      	ldr	r3, [r3, #28]
 80048f0:	4a47      	ldr	r2, [pc, #284]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80048f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0301 	and.w	r3, r3, #1
 8004900:	2b00      	cmp	r3, #0
 8004902:	d008      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004904:	4b42      	ldr	r3, [pc, #264]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004908:	f023 0203 	bic.w	r2, r3, #3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	493f      	ldr	r1, [pc, #252]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004912:	4313      	orrs	r3, r2
 8004914:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d008      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004922:	4b3b      	ldr	r3, [pc, #236]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004926:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	4938      	ldr	r1, [pc, #224]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004930:	4313      	orrs	r3, r2
 8004932:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0304 	and.w	r3, r3, #4
 800493c:	2b00      	cmp	r3, #0
 800493e:	d008      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004940:	4b33      	ldr	r3, [pc, #204]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004944:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	4930      	ldr	r1, [pc, #192]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800494e:	4313      	orrs	r3, r2
 8004950:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0320 	and.w	r3, r3, #32
 800495a:	2b00      	cmp	r3, #0
 800495c:	d008      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800495e:	4b2c      	ldr	r3, [pc, #176]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004962:	f023 0210 	bic.w	r2, r3, #16
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	4929      	ldr	r1, [pc, #164]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800496c:	4313      	orrs	r3, r2
 800496e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d008      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800497c:	4b24      	ldr	r3, [pc, #144]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004988:	4921      	ldr	r1, [pc, #132]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800498a:	4313      	orrs	r3, r2
 800498c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004996:	2b00      	cmp	r3, #0
 8004998:	d008      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800499a:	4b1d      	ldr	r3, [pc, #116]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800499c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499e:	f023 0220 	bic.w	r2, r3, #32
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	491a      	ldr	r1, [pc, #104]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d008      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80049b8:	4b15      	ldr	r3, [pc, #84]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	69db      	ldr	r3, [r3, #28]
 80049c4:	4912      	ldr	r1, [pc, #72]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d008      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 80049d6:	4b0e      	ldr	r3, [pc, #56]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	490b      	ldr	r1, [pc, #44]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d008      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80049f4:	4b06      	ldr	r3, [pc, #24]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80049f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	4903      	ldr	r1, [pc, #12]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3748      	adds	r7, #72	; 0x48
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	40021000 	.word	0x40021000

08004a14 <HAL_SDADC_Init>:
  *         the common reference voltage.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_SDADC_Init(SDADC_HandleTypeDef* hsdadc)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* Check SDADC handle */
  if(hsdadc == NULL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <HAL_SDADC_Init+0x12>
  {
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e073      	b.n	8004b0e <HAL_SDADC_Init+0xfa>
  assert_param(IS_SDADC_FAST_CONV_MODE(hsdadc->Init.FastConversionMode));
  assert_param(IS_SDADC_SLOW_CLOCK_MODE(hsdadc->Init.SlowClockMode));
  assert_param(IS_SDADC_VREF(hsdadc->Init.ReferenceVoltage));
  
  /* Initialize SDADC variables with default values */
  hsdadc->RegularContMode     = SDADC_CONTINUOUS_CONV_OFF;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	619a      	str	r2, [r3, #24]
  hsdadc->InjectedContMode    = SDADC_CONTINUOUS_CONV_OFF;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	61da      	str	r2, [r3, #28]
  hsdadc->InjectedChannelsNbr = 1U;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	621a      	str	r2, [r3, #32]
  hsdadc->InjConvRemaining    = 1U;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdadc->RegularTrigger      = SDADC_SOFTWARE_TRIGGER;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	629a      	str	r2, [r3, #40]	; 0x28
  hsdadc->InjectedTrigger     = SDADC_SOFTWARE_TRIGGER;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	62da      	str	r2, [r3, #44]	; 0x2c
  hsdadc->ExtTriggerEdge      = SDADC_EXT_TRIG_RISING_EDGE;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a50:	631a      	str	r2, [r3, #48]	; 0x30
  hsdadc->RegularMultimode    = SDADC_MULTIMODE_SDADC1_SDADC2;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	635a      	str	r2, [r3, #52]	; 0x34
  hsdadc->InjectedMultimode   = SDADC_MULTIMODE_SDADC1_SDADC2;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	639a      	str	r2, [r3, #56]	; 0x38
  hsdadc->ErrorCode           = SDADC_ERROR_NONE;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Init the low level hardware */
  hsdadc->MspInitCallback(hsdadc);
#else
  /* Init the low level hardware */
  HAL_SDADC_MspInit(hsdadc);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f7fc ff0f 	bl	8001888 <HAL_SDADC_MspInit>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */
  
  /* Set idle low power and slow clock modes */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_SBI|SDADC_CR1_PDI|SDADC_CR1_SLOWCK);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8004a78:	601a      	str	r2, [r3, #0]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	6819      	ldr	r1, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685a      	ldr	r2, [r3, #4]
                            hsdadc->Init.SlowClockMode);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	68db      	ldr	r3, [r3, #12]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 8004a88:	431a      	orrs	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	601a      	str	r2, [r3, #0]

  /* Set fast conversion mode */
  hsdadc->Instance->CR2 &= ~(SDADC_CR2_FAST);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004aa0:	605a      	str	r2, [r3, #4]
  hsdadc->Instance->CR2 |= hsdadc->Init.FastConversionMode;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6859      	ldr	r1, [r3, #4]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689a      	ldr	r2, [r3, #8]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	430a      	orrs	r2, r1
 8004ab2:	605a      	str	r2, [r3, #4]

  /* Set reference voltage common to all SDADC instances */
  /* Update this parameter only if needed to avoid unnecessary settling time */
  if((SDADC1->CR1 & SDADC_CR1_REFV) != hsdadc->Init.ReferenceVoltage)
 8004ab4:	4b18      	ldr	r3, [pc, #96]	; (8004b18 <HAL_SDADC_Init+0x104>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d00f      	beq.n	8004ae4 <HAL_SDADC_Init+0xd0>
  {
    /* Voltage reference bits are common to all SADC instances but are        */
    /* present in SDADC1 register.                                            */
    SDADC1->CR1 &= ~(SDADC_CR1_REFV);
 8004ac4:	4b14      	ldr	r3, [pc, #80]	; (8004b18 <HAL_SDADC_Init+0x104>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a13      	ldr	r2, [pc, #76]	; (8004b18 <HAL_SDADC_Init+0x104>)
 8004aca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ace:	6013      	str	r3, [r2, #0]
    SDADC1->CR1 |= hsdadc->Init.ReferenceVoltage;
 8004ad0:	4b11      	ldr	r3, [pc, #68]	; (8004b18 <HAL_SDADC_Init+0x104>)
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	490f      	ldr	r1, [pc, #60]	; (8004b18 <HAL_SDADC_Init+0x104>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	600b      	str	r3, [r1, #0]
    
    /* Wait at least 2ms before setting ADON */
    HAL_Delay(2U);
 8004ade:	2002      	movs	r0, #2
 8004ae0:	f7fd fa2c 	bl	8001f3c <HAL_Delay>
  }
  
  /* Enable SDADC */
  hsdadc->Instance->CR2 |= SDADC_CR2_ADON;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f042 0201 	orr.w	r2, r2, #1
 8004af2:	605a      	str	r2, [r3, #4]

  /* Wait end of stabilization */
  while((hsdadc->Instance->ISR & SDADC_ISR_STABIP) != 0UL)
 8004af4:	bf00      	nop
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1f8      	bne.n	8004af6 <HAL_SDADC_Init+0xe2>
  {
  }
  
  /* Set SDADC to ready state */
  hsdadc->State = HAL_SDADC_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return HAL status */
  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3708      	adds	r7, #8
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	40016000 	.word	0x40016000

08004b1c <HAL_SDADC_PrepareChannelConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_PrepareChannelConfig(SDADC_HandleTypeDef *hsdadc, 
                                                 uint32_t ConfIndex,
                                                 SDADC_ConfParamTypeDef* ConfParamStruct)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b086      	sub	sp, #24
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_GAIN(ConfParamStruct->Gain));
  assert_param(IS_SDADC_COMMON_MODE(ConfParamStruct->CommonMode));
  assert_param(IS_SDADC_OFFSET_VALUE(ConfParamStruct->Offset));

  /* Check SDADC state is ready */
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d002      	beq.n	8004b3c <HAL_SDADC_PrepareChannelConfig+0x20>
  {
    status = HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	75fb      	strb	r3, [r7, #23]
 8004b3a:	e025      	b.n	8004b88 <HAL_SDADC_PrepareChannelConfig+0x6c>
  }
  else
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f000 fb12 	bl	8005166 <SDADC_EnterInitMode>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d006      	beq.n	8004b56 <HAL_SDADC_PrepareChannelConfig+0x3a>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	22ff      	movs	r2, #255	; 0xff
 8004b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	75fb      	strb	r3, [r7, #23]
 8004b54:	e018      	b.n	8004b88 <HAL_SDADC_PrepareChannelConfig+0x6c>
    }
    else
    {
      /* Program configuration register with parameters */
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	461a      	mov	r2, r3
                       SDADC_CONFREG_OFFSET + \
                       (uint32_t)(ConfIndex << 2UL));
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	009b      	lsls	r3, r3, #2
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 8004b60:	4413      	add	r3, r2
 8004b62:	3320      	adds	r3, #32
 8004b64:	613b      	str	r3, [r7, #16]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681a      	ldr	r2, [r3, #0]
                                             ConfParamStruct->Gain | \
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8004b6e:	431a      	orrs	r2, r3
                                             ConfParamStruct->CommonMode | \
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689b      	ldr	r3, [r3, #8]
                                             ConfParamStruct->Gain | \
 8004b74:	ea42 0103 	orr.w	r1, r2, r3
                                             ConfParamStruct->Offset);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68da      	ldr	r2, [r3, #12]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8004b7c:	693b      	ldr	r3, [r7, #16]
                                             ConfParamStruct->CommonMode | \
 8004b7e:	430a      	orrs	r2, r1
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8004b80:	601a      	str	r2, [r3, #0]
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 fb12 	bl	80051ac <SDADC_ExitInitMode>
    }
  }
  /* Return function status */
  return status;
 8004b88:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3718      	adds	r7, #24
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
	...

08004b94 <HAL_SDADC_AssociateChannelConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_AssociateChannelConfig(SDADC_HandleTypeDef *hsdadc,
                                                   uint32_t Channel,
                                                   uint32_t ConfIndex)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b086      	sub	sp, #24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_REGULAR_CHANNEL(Channel));
  assert_param(IS_SDADC_CONF_INDEX(ConfIndex));

  /* Check SDADC state is ready */
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d002      	beq.n	8004bb4 <HAL_SDADC_AssociateChannelConfig+0x20>
  {
    status = HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	75fb      	strb	r3, [r7, #23]
 8004bb2:	e037      	b.n	8004c24 <HAL_SDADC_AssociateChannelConfig+0x90>
  }
  else
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f000 fad6 	bl	8005166 <SDADC_EnterInitMode>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d006      	beq.n	8004bce <HAL_SDADC_AssociateChannelConfig+0x3a>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	22ff      	movs	r2, #255	; 0xff
 8004bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	75fb      	strb	r3, [r7, #23]
 8004bcc:	e02a      	b.n	8004c24 <HAL_SDADC_AssociateChannelConfig+0x90>
    }
    else
    {
      /* Program channel configuration register according parameters */
      if(Channel != SDADC_CHANNEL_8)
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	4a17      	ldr	r2, [pc, #92]	; (8004c30 <HAL_SDADC_AssociateChannelConfig+0x9c>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d01f      	beq.n	8004c16 <HAL_SDADC_AssociateChannelConfig+0x82>
      {
        /* Get channel number */
        channelnum = (uint32_t)(Channel>>16UL);
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	0c1b      	lsrs	r3, r3, #16
 8004bda:	613b      	str	r3, [r7, #16]

        /* Set the channel configuration */
        hsdadc->Instance->CONFCHR1 &= (uint32_t) ~((uint32_t)SDADC_CONFCHR1_CONFCH0 << ((channelnum << 2UL) & 0x1FUL));
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	f003 031f 	and.w	r3, r3, #31
 8004bea:	2203      	movs	r2, #3
 8004bec:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf0:	43da      	mvns	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	400a      	ands	r2, r1
 8004bf8:	641a      	str	r2, [r3, #64]	; 0x40
        hsdadc->Instance->CONFCHR1 |= (uint32_t) (ConfIndex << ((channelnum << 2UL) & 0x1FUL));
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	f003 031f 	and.w	r3, r3, #31
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	409a      	lsls	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	430a      	orrs	r2, r1
 8004c12:	641a      	str	r2, [r3, #64]	; 0x40
 8004c14:	e003      	b.n	8004c1e <HAL_SDADC_AssociateChannelConfig+0x8a>
      }
      else
      {
        hsdadc->Instance->CONFCHR2 = (uint32_t) (ConfIndex);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	645a      	str	r2, [r3, #68]	; 0x44
      }      
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f000 fac4 	bl	80051ac <SDADC_ExitInitMode>
    }
  }
  /* Return function status */
  return status;
 8004c24:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3718      	adds	r7, #24
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	00080100 	.word	0x00080100

08004c34 <HAL_SDADC_InjectedConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_InjectedConfigChannel(SDADC_HandleTypeDef *hsdadc,
                                                  uint32_t Channel,
                                                  uint32_t ContinuousMode)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c40:	2300      	movs	r3, #0
 8004c42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_INJECTED_CHANNEL(Channel));
  assert_param(IS_SDADC_CONTINUOUS_MODE(ContinuousMode));
  
  /* Check SDADC state */
  if((hsdadc->State != HAL_SDADC_STATE_RESET) && (hsdadc->State != HAL_SDADC_STATE_ERROR))
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d027      	beq.n	8004c9e <HAL_SDADC_InjectedConfigChannel+0x6a>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c54:	2bff      	cmp	r3, #255	; 0xff
 8004c56:	d022      	beq.n	8004c9e <HAL_SDADC_InjectedConfigChannel+0x6a>
  {
    /* Set JCHG[8:0] bits in SDADC_JCHG */
    hsdadc->Instance->JCHGR = (uint32_t) (Channel & SDADC_LSB_MASK);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68ba      	ldr	r2, [r7, #8]
 8004c5e:	b292      	uxth	r2, r2
 8004c60:	615a      	str	r2, [r3, #20]
    /* Set or clear JCONT bit in SDADC_CR2 */
    if(ContinuousMode == SDADC_CONTINUOUS_CONV_ON)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d108      	bne.n	8004c7a <HAL_SDADC_InjectedConfigChannel+0x46>
    {
      hsdadc->Instance->CR2 |= SDADC_CR2_JCONT;    
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f042 0220 	orr.w	r2, r2, #32
 8004c76:	605a      	str	r2, [r3, #4]
 8004c78:	e007      	b.n	8004c8a <HAL_SDADC_InjectedConfigChannel+0x56>
    }
    else
    {
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_JCONT);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f022 0220 	bic.w	r2, r2, #32
 8004c88:	605a      	str	r2, [r3, #4]
    }
    /* Store continuous mode information */
    hsdadc->InjectedContMode = ContinuousMode;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	61da      	str	r2, [r3, #28]
    /* Store number of injected channels */
    hsdadc->InjectedChannelsNbr = SDADC_GetInjChannelsNbr(Channel);
 8004c90:	68b8      	ldr	r0, [r7, #8]
 8004c92:	f000 fa9d 	bl	80051d0 <SDADC_GetInjChannelsNbr>
 8004c96:	4602      	mov	r2, r0
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	621a      	str	r2, [r3, #32]
 8004c9c:	e001      	b.n	8004ca2 <HAL_SDADC_InjectedConfigChannel+0x6e>
  }
  else
  {
    status = HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8004ca2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3718      	adds	r7, #24
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <HAL_SDADC_SelectInjectedTrigger>:
  *            @arg SDADC_SYNCHRONOUS_TRIGGER : Synchronous with SDADC1 (only for SDADC2 and SDADC3).
  *            @arg SDADC_EXTERNAL_TRIGGER : External trigger.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_SelectInjectedTrigger(SDADC_HandleTypeDef *hsdadc, uint32_t Trigger)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_INJECTED_TRIGGER(Trigger));

  /* Check parameters compatibility */
  if((hsdadc->Instance == SDADC1) && (Trigger == SDADC_SYNCHRONOUS_TRIGGER))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a12      	ldr	r2, [pc, #72]	; (8004d08 <HAL_SDADC_SelectInjectedTrigger+0x5c>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d105      	bne.n	8004cd0 <HAL_SDADC_SelectInjectedTrigger+0x24>
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d102      	bne.n	8004cd0 <HAL_SDADC_SelectInjectedTrigger+0x24>
  {
    status = HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	73fb      	strb	r3, [r7, #15]
 8004cce:	e014      	b.n	8004cfa <HAL_SDADC_SelectInjectedTrigger+0x4e>
  }
  /* Check SDADC state */
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d009      	beq.n	8004cee <HAL_SDADC_SelectInjectedTrigger+0x42>
          (hsdadc->State == HAL_SDADC_STATE_CALIB) || \
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d004      	beq.n	8004cee <HAL_SDADC_SelectInjectedTrigger+0x42>
          (hsdadc->State == HAL_SDADC_STATE_REG))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
          (hsdadc->State == HAL_SDADC_STATE_CALIB) || \
 8004cea:	2b03      	cmp	r3, #3
 8004cec:	d103      	bne.n	8004cf6 <HAL_SDADC_SelectInjectedTrigger+0x4a>
  {
    /* Store regular trigger information */
    hsdadc->InjectedTrigger = Trigger;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	62da      	str	r2, [r3, #44]	; 0x2c
 8004cf4:	e001      	b.n	8004cfa <HAL_SDADC_SelectInjectedTrigger+0x4e>
  }
  else
  {
    status = HAL_ERROR;    
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8004cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3714      	adds	r7, #20
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr
 8004d08:	40016000 	.word	0x40016000

08004d0c <HAL_SDADC_SelectInjectedDelay>:
  *         This parameter can be a value of @ref SDADC_InjectedDelay.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_SelectInjectedDelay(SDADC_HandleTypeDef *hsdadc,
                                                uint32_t InjectedDelay)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d16:	2300      	movs	r3, #0
 8004d18:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_INJECTED_DELAY(InjectedDelay));

  /* Check SDADC state */
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d120      	bne.n	8004d66 <HAL_SDADC_SelectInjectedDelay+0x5a>
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 fa1e 	bl	8005166 <SDADC_EnterInitMode>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d006      	beq.n	8004d3e <HAL_SDADC_SelectInjectedDelay+0x32>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	22ff      	movs	r2, #255	; 0xff
 8004d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	73fb      	strb	r3, [r7, #15]
 8004d3c:	e015      	b.n	8004d6a <HAL_SDADC_SelectInjectedDelay+0x5e>
    }
    else
    {
      /* Set JDS bit in SDADC_CR2 register */
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_JDS);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	685a      	ldr	r2, [r3, #4]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d4c:	605a      	str	r2, [r3, #4]
      hsdadc->Instance->CR2 |= InjectedDelay;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	6859      	ldr	r1, [r3, #4]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	605a      	str	r2, [r3, #4]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 fa24 	bl	80051ac <SDADC_ExitInitMode>
 8004d64:	e001      	b.n	8004d6a <HAL_SDADC_SelectInjectedDelay+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8004d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <HAL_SDADC_InjectedMultiModeConfigChannel>:
  *         This parameter can be a value of @ref SDADC_MultimodeType.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_InjectedMultiModeConfigChannel(SDADC_HandleTypeDef* hsdadc,
                                                           uint32_t MultimodeType)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_MULTIMODE_TYPE(MultimodeType));

  /* Check instance is SDADC1 */
  if(hsdadc->Instance != SDADC1)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a11      	ldr	r2, [pc, #68]	; (8004dcc <HAL_SDADC_InjectedMultiModeConfigChannel+0x58>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d002      	beq.n	8004d92 <HAL_SDADC_InjectedMultiModeConfigChannel+0x1e>
  {
    status = HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	73fb      	strb	r3, [r7, #15]
 8004d90:	e014      	b.n	8004dbc <HAL_SDADC_InjectedMultiModeConfigChannel+0x48>
  }
  /* Check SDADC state */
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d009      	beq.n	8004db0 <HAL_SDADC_InjectedMultiModeConfigChannel+0x3c>
          (hsdadc->State == HAL_SDADC_STATE_CALIB) || \
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d004      	beq.n	8004db0 <HAL_SDADC_InjectedMultiModeConfigChannel+0x3c>
          (hsdadc->State == HAL_SDADC_STATE_REG))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
          (hsdadc->State == HAL_SDADC_STATE_CALIB) || \
 8004dac:	2b03      	cmp	r3, #3
 8004dae:	d103      	bne.n	8004db8 <HAL_SDADC_InjectedMultiModeConfigChannel+0x44>
  {
    /* Store regular trigger information */
    hsdadc->InjectedMultimode = MultimodeType;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	683a      	ldr	r2, [r7, #0]
 8004db4:	639a      	str	r2, [r3, #56]	; 0x38
 8004db6:	e001      	b.n	8004dbc <HAL_SDADC_InjectedMultiModeConfigChannel+0x48>
  }
  else
  {
    status = HAL_ERROR;    
 8004db8:	2301      	movs	r3, #1
 8004dba:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8004dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3714      	adds	r7, #20
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	40016000 	.word	0x40016000

08004dd0 <HAL_SDADC_CalibrationStart>:
  *         This parameter can be a value of @ref SDADC_CalibrationSequence.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_CalibrationStart(SDADC_HandleTypeDef *hsdadc,
                                             uint32_t CalibrationSequence)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_CALIB_SEQUENCE(CalibrationSequence));

  /* Check SDADC state */
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d12c      	bne.n	8004e42 <HAL_SDADC_CalibrationStart+0x72>
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 f9bc 	bl	8005166 <SDADC_EnterInitMode>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d006      	beq.n	8004e02 <HAL_SDADC_CalibrationStart+0x32>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	22ff      	movs	r2, #255	; 0xff
 8004df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	73fb      	strb	r3, [r7, #15]
 8004e00:	e021      	b.n	8004e46 <HAL_SDADC_CalibrationStart+0x76>
    }
    else
    {
      /* Set CALIBCNT[1:0] bits in SDADC_CR2 register */
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_CALIBCNT);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f022 0206 	bic.w	r2, r2, #6
 8004e10:	605a      	str	r2, [r3, #4]
      hsdadc->Instance->CR2 |= CalibrationSequence;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6859      	ldr	r1, [r3, #4]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	683a      	ldr	r2, [r7, #0]
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	605a      	str	r2, [r3, #4]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 f9c2 	bl	80051ac <SDADC_ExitInitMode>

      /* Set STARTCALIB in SDADC_CR2 */
      hsdadc->Instance->CR2 |= SDADC_CR2_STARTCALIB;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f042 0210 	orr.w	r2, r2, #16
 8004e36:	605a      	str	r2, [r3, #4]

      /* Set SDADC in calibration state */
      hsdadc->State = HAL_SDADC_STATE_CALIB;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2202      	movs	r2, #2
 8004e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004e40:	e001      	b.n	8004e46 <HAL_SDADC_CalibrationStart+0x76>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8004e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3710      	adds	r7, #16
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <HAL_SDADC_PollForCalibEvent>:
  * @param  hsdadc SDADC handle.
  * @param  Timeout Timeout value in milliseconds.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_PollForCalibEvent(SDADC_HandleTypeDef* hsdadc, uint32_t Timeout)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if(hsdadc->State != HAL_SDADC_STATE_CALIB)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d001      	beq.n	8004e68 <HAL_SDADC_PollForCalibEvent+0x18>
  {
    /* Return error status */
    return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e028      	b.n	8004eba <HAL_SDADC_PollForCalibEvent+0x6a>
  }
  else
  {
    /* Get timeout */
    tickstart = HAL_GetTick();  
 8004e68:	f7fd f85c 	bl	8001f24 <HAL_GetTick>
 8004e6c:	60f8      	str	r0, [r7, #12]

    /* Wait EOCALF bit in SDADC_ISR register */
    while((hsdadc->Instance->ISR & SDADC_ISR_EOCALF) != SDADC_ISR_EOCALF)
 8004e6e:	e010      	b.n	8004e92 <HAL_SDADC_PollForCalibEvent+0x42>
    {
      /* Check the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e76:	d00c      	beq.n	8004e92 <HAL_SDADC_PollForCalibEvent+0x42>
      {
        if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0UL))
 8004e78:	f7fd f854 	bl	8001f24 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	683a      	ldr	r2, [r7, #0]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d302      	bcc.n	8004e8e <HAL_SDADC_PollForCalibEvent+0x3e>
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <HAL_SDADC_PollForCalibEvent+0x42>
        {
          /* Return timeout status */
          return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e013      	b.n	8004eba <HAL_SDADC_PollForCalibEvent+0x6a>
    while((hsdadc->Instance->ISR & SDADC_ISR_EOCALF) != SDADC_ISR_EOCALF)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d1e7      	bne.n	8004e70 <HAL_SDADC_PollForCalibEvent+0x20>
        }
      }
    }
    /* Set CLREOCALF bit in SDADC_CLRISR register */
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLREOCALF;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68da      	ldr	r2, [r3, #12]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f042 0201 	orr.w	r2, r2, #1
 8004eae:	60da      	str	r2, [r3, #12]

    /* Set SDADC in ready state */
    hsdadc->State = HAL_SDADC_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return function status */
    return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
  }
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <HAL_SDADC_Start_IT>:
  *         or if injected conversion is ongoing.
  * @param  hsdadc SDADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_Start_IT(SDADC_HandleTypeDef *hsdadc)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b084      	sub	sp, #16
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d004      	beq.n	8004ede <HAL_SDADC_Start_IT+0x1c>
     (hsdadc->State == HAL_SDADC_STATE_INJ))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8004eda:	2b04      	cmp	r3, #4
 8004edc:	d10d      	bne.n	8004efa <HAL_SDADC_Start_IT+0x38>
  {
    /* Set REOCIE and ROVRIE bits in SDADC_CR1 register */
    hsdadc->Instance->CR1 |= (uint32_t) (SDADC_CR1_REOCIE | SDADC_CR1_ROVRIE);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f042 0218 	orr.w	r2, r2, #24
 8004eec:	601a      	str	r2, [r3, #0]

    /* Start regular conversion */
    status = SDADC_RegConvStart(hsdadc);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 f992 	bl	8005218 <SDADC_RegConvStart>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	73fb      	strb	r3, [r7, #15]
 8004ef8:	e001      	b.n	8004efe <HAL_SDADC_Start_IT+0x3c>
  }
  else
  {
    status = HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8004efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3710      	adds	r7, #16
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <HAL_SDADC_InjectedStart_IT>:
  *         or if regular conversion is ongoing.
  * @param  hsdadc SDADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_InjectedStart_IT(SDADC_HandleTypeDef *hsdadc)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d004      	beq.n	8004f24 <HAL_SDADC_InjectedStart_IT+0x1c>
     (hsdadc->State == HAL_SDADC_STATE_REG))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8004f20:	2b03      	cmp	r3, #3
 8004f22:	d10d      	bne.n	8004f40 <HAL_SDADC_InjectedStart_IT+0x38>
  {
    /* Set JEOCIE and JOVRIE bits in SDADC_CR1 register */
    hsdadc->Instance->CR1 |= (uint32_t) (SDADC_CR1_JEOCIE | SDADC_CR1_JOVRIE);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f042 0206 	orr.w	r2, r2, #6
 8004f32:	601a      	str	r2, [r3, #0]

    /* Start injected conversion */
    status = SDADC_InjConvStart(hsdadc);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 f9ad 	bl	8005294 <SDADC_InjConvStart>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	73fb      	strb	r3, [r7, #15]
 8004f3e:	e001      	b.n	8004f44 <HAL_SDADC_InjectedStart_IT+0x3c>
  }
  else
  {
    status = HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8004f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <HAL_SDADC_InjectedGetValue>:
  * @param  hsdadc SDADC handle.
  * @param  Channel Corresponding channel of injected conversion.
  * @retval Injected conversion value
  */
uint32_t HAL_SDADC_InjectedGetValue(SDADC_HandleTypeDef *hsdadc, uint32_t* Channel)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b085      	sub	sp, #20
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
 8004f56:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(Channel != ((void*) 0));

  /* Read SDADC_JDATAR register and extract channel and conversion value */
  value = hsdadc->Instance->JDATAR;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f5e:	60fb      	str	r3, [r7, #12]
  *Channel = ((value & SDADC_JDATAR_JDATACH) >> SDADC_JDATAR_CH_OFFSET);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	0e1b      	lsrs	r3, r3, #24
 8004f64:	f003 020f 	and.w	r2, r3, #15
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	601a      	str	r2, [r3, #0]
  value &= SDADC_JDATAR_JDATA;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	60fb      	str	r3, [r7, #12]
  
  /* Return injected conversion value */
  return value;
 8004f72:	68fb      	ldr	r3, [r7, #12]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3714      	adds	r7, #20
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_SDADC_IRQHandler>:
  * @brief  This function handles the SDADC interrupts.
  * @param  hsdadc SDADC handle.
  * @retval None
  */
void HAL_SDADC_IRQHandler(SDADC_HandleTypeDef* hsdadc)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hsdadc->Instance->ISR;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	60fb      	str	r3, [r7, #12]
    
  /* Check if end of regular conversion */
  if(((hsdadc->Instance->CR1 & SDADC_CR1_REOCIE) == SDADC_CR1_REOCIE) &&
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0308 	and.w	r3, r3, #8
 8004f9a:	2b08      	cmp	r3, #8
 8004f9c:	d125      	bne.n	8004fea <HAL_SDADC_IRQHandler+0x6a>
     ((tmp_isr & SDADC_ISR_REOCF) == SDADC_ISR_REOCF))
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f003 0308 	and.w	r3, r3, #8
  if(((hsdadc->Instance->CR1 & SDADC_CR1_REOCIE) == SDADC_CR1_REOCIE) &&
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d020      	beq.n	8004fea <HAL_SDADC_IRQHandler+0x6a>
  {
    /* Call regular conversion complete callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
    hsdadc->ConvCpltCallback(hsdadc);
#else
    HAL_SDADC_ConvCpltCallback(hsdadc);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 f8c8 	bl	800513e <HAL_SDADC_ConvCpltCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

    /* End of conversion if mode is not continuous and software trigger */
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f040 80b1 	bne.w	800511a <HAL_SDADC_IRQHandler+0x19a>
       (hsdadc->RegularTrigger == SDADC_SOFTWARE_TRIGGER))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f040 80ac 	bne.w	800511a <HAL_SDADC_IRQHandler+0x19a>
    {
      /* Clear REOCIE and ROVRIE bits in SDADC_CR1 register */
      hsdadc->Instance->CR1 &= ~(SDADC_CR1_REOCIE | SDADC_CR1_ROVRIE);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f022 0218 	bic.w	r2, r2, #24
 8004fd0:	601a      	str	r2, [r3, #0]

      /* Update SDADC state */
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                      HAL_SDADC_STATE_READY : HAL_SDADC_STATE_INJ;
 8004fd8:	2b03      	cmp	r3, #3
 8004fda:	d101      	bne.n	8004fe0 <HAL_SDADC_IRQHandler+0x60>
 8004fdc:	2201      	movs	r2, #1
 8004fde:	e000      	b.n	8004fe2 <HAL_SDADC_IRQHandler+0x62>
 8004fe0:	2204      	movs	r2, #4
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8004fe8:	e097      	b.n	800511a <HAL_SDADC_IRQHandler+0x19a>
    }
  }
  /* Check if end of injected conversion */
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_JEOCIE) == SDADC_CR1_JEOCIE) &&
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d136      	bne.n	8005066 <HAL_SDADC_IRQHandler+0xe6>
          ((tmp_isr & SDADC_ISR_JEOCF) == SDADC_ISR_JEOCF))
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f003 0302 	and.w	r3, r3, #2
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_JEOCIE) == SDADC_CR1_JEOCIE) &&
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d031      	beq.n	8005066 <HAL_SDADC_IRQHandler+0xe6>
  {
    /* Call injected conversion complete callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
    hsdadc->InjectedConvCpltCallback(hsdadc);
#else
    HAL_SDADC_InjectedConvCpltCallback(hsdadc);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f7fc f95e 	bl	80012c4 <HAL_SDADC_InjectedConvCpltCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

    /* Update remaining injected conversions */
    hsdadc->InjConvRemaining--;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	1e5a      	subs	r2, r3, #1
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	625a      	str	r2, [r3, #36]	; 0x24
    if(hsdadc->InjConvRemaining ==0UL)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005016:	2b00      	cmp	r3, #0
 8005018:	d103      	bne.n	8005022 <HAL_SDADC_IRQHandler+0xa2>
    {
      /* end of injected sequence, reset the value */
      hsdadc->InjConvRemaining = hsdadc->InjectedChannelsNbr;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a1a      	ldr	r2, [r3, #32]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	625a      	str	r2, [r3, #36]	; 0x24
    }
    /* End of conversion if mode is not continuous, software trigger */
    /* and end of injected sequence */
    if((hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d179      	bne.n	800511e <HAL_SDADC_IRQHandler+0x19e>
       (hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER) && \
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    if((hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 800502e:	2b00      	cmp	r3, #0
 8005030:	d175      	bne.n	800511e <HAL_SDADC_IRQHandler+0x19e>
       (hsdadc->InjConvRemaining == hsdadc->InjectedChannelsNbr))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a1b      	ldr	r3, [r3, #32]
       (hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER) && \
 800503a:	429a      	cmp	r2, r3
 800503c:	d16f      	bne.n	800511e <HAL_SDADC_IRQHandler+0x19e>
    {
      /* Clear JEOCIE and JOVRIE bits in SDADC_CR1 register */
      hsdadc->Instance->CR1 &= ~(SDADC_CR1_JEOCIE | SDADC_CR1_JOVRIE);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f022 0206 	bic.w	r2, r2, #6
 800504c:	601a      	str	r2, [r3, #0]

      /* Update SDADC state */
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_INJ) ? \
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                      HAL_SDADC_STATE_READY : HAL_SDADC_STATE_REG;
 8005054:	2b04      	cmp	r3, #4
 8005056:	d101      	bne.n	800505c <HAL_SDADC_IRQHandler+0xdc>
 8005058:	2201      	movs	r2, #1
 800505a:	e000      	b.n	800505e <HAL_SDADC_IRQHandler+0xde>
 800505c:	2203      	movs	r2, #3
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_INJ) ? \
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    if((hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8005064:	e05b      	b.n	800511e <HAL_SDADC_IRQHandler+0x19e>
    }
  }
  /* Check if end of calibration */
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_EOCALIE) == SDADC_CR1_EOCALIE) &&
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0301 	and.w	r3, r3, #1
 8005070:	2b01      	cmp	r3, #1
 8005072:	d11c      	bne.n	80050ae <HAL_SDADC_IRQHandler+0x12e>
          ((tmp_isr & SDADC_ISR_EOCALF) == SDADC_ISR_EOCALF))
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f003 0301 	and.w	r3, r3, #1
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_EOCALIE) == SDADC_CR1_EOCALIE) &&
 800507a:	2b00      	cmp	r3, #0
 800507c:	d017      	beq.n	80050ae <HAL_SDADC_IRQHandler+0x12e>
  {
    /* Clear EOCALIE bit in SDADC_CR1 register */
    hsdadc->Instance->CR1 &= ~(SDADC_CR1_EOCALIE);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f022 0201 	bic.w	r2, r2, #1
 800508c:	601a      	str	r2, [r3, #0]

    /* Set CLREOCALF bit in SDADC_CLRISR register */
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLREOCALF;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68da      	ldr	r2, [r3, #12]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f042 0201 	orr.w	r2, r2, #1
 800509c:	60da      	str	r2, [r3, #12]

    /* Call calibration callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
    hsdadc->CalibrationCpltCallback(hsdadc);
#else
    HAL_SDADC_CalibrationCpltCallback(hsdadc);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f843 	bl	800512a <HAL_SDADC_CalibrationCpltCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

    /* Update SDADC state */
    hsdadc->State = HAL_SDADC_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80050ac:	e038      	b.n	8005120 <HAL_SDADC_IRQHandler+0x1a0>
  }
  /* Check if overrun occurs during regular conversion */
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_ROVRIE) == SDADC_CR1_ROVRIE) &&
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0310 	and.w	r3, r3, #16
 80050b8:	2b10      	cmp	r3, #16
 80050ba:	d113      	bne.n	80050e4 <HAL_SDADC_IRQHandler+0x164>
          ((tmp_isr & SDADC_ISR_ROVRF) == SDADC_ISR_ROVRF))
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f003 0310 	and.w	r3, r3, #16
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_ROVRIE) == SDADC_CR1_ROVRIE) &&
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00e      	beq.n	80050e4 <HAL_SDADC_IRQHandler+0x164>
  {
    /* Set CLRROVRF bit in SDADC_CLRISR register */
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLRROVRF;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68da      	ldr	r2, [r3, #12]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f042 0210 	orr.w	r2, r2, #16
 80050d4:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hsdadc->ErrorCode = SDADC_ERROR_REGULAR_OVERRUN;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call error callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
    hsdadc->ErrorCallback(hsdadc);
#else
    HAL_SDADC_ErrorCallback(hsdadc);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 f838 	bl	8005152 <HAL_SDADC_ErrorCallback>
 80050e2:	e01d      	b.n	8005120 <HAL_SDADC_IRQHandler+0x1a0>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */
  }
  /* Check if overrun occurs during injected conversion */
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_JOVRIE) == SDADC_CR1_JOVRIE) &&
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0304 	and.w	r3, r3, #4
 80050ee:	2b04      	cmp	r3, #4
 80050f0:	d117      	bne.n	8005122 <HAL_SDADC_IRQHandler+0x1a2>
          ((tmp_isr & SDADC_ISR_JOVRF) == SDADC_ISR_JOVRF))
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f003 0304 	and.w	r3, r3, #4
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_JOVRIE) == SDADC_CR1_JOVRIE) &&
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d012      	beq.n	8005122 <HAL_SDADC_IRQHandler+0x1a2>
  {
    /* Set CLRJOVRF bit in SDADC_CLRISR register */
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLRJOVRF;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68da      	ldr	r2, [r3, #12]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f042 0204 	orr.w	r2, r2, #4
 800510a:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hsdadc->ErrorCode = SDADC_ERROR_INJECTED_OVERRUN;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2202      	movs	r2, #2
 8005110:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call error callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
    hsdadc->ErrorCallback(hsdadc);
#else
    HAL_SDADC_ErrorCallback(hsdadc);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f81d 	bl	8005152 <HAL_SDADC_ErrorCallback>
  else
  {
    /* No additional IRQ source */
  }
  
  return;
 8005118:	e002      	b.n	8005120 <HAL_SDADC_IRQHandler+0x1a0>
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 800511a:	bf00      	nop
 800511c:	e000      	b.n	8005120 <HAL_SDADC_IRQHandler+0x1a0>
    if((hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 800511e:	bf00      	nop
  return;
 8005120:	bf00      	nop
 8005122:	bf00      	nop
}
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <HAL_SDADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback. 
  * @param  hsdadc SDADC handle.
  * @retval None
  */
__weak void HAL_SDADC_CalibrationCpltCallback(SDADC_HandleTypeDef* hsdadc)
{
 800512a:	b480      	push	{r7}
 800512c:	b083      	sub	sp, #12
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
  UNUSED(hsdadc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDADC_CalibrationCpltCallback could be implemented in the user file
   */
}
 8005132:	bf00      	nop
 8005134:	370c      	adds	r7, #12
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <HAL_SDADC_ConvCpltCallback>:
            using HAL_SDADC_GetValue or HAL_SDADC_MultiModeGetValue.
  * @param  hsdadc SDADC handle.
  * @retval None
  */
__weak void HAL_SDADC_ConvCpltCallback(SDADC_HandleTypeDef* hsdadc)
{
 800513e:	b480      	push	{r7}
 8005140:	b083      	sub	sp, #12
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  UNUSED(hsdadc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDADC_ConvCpltCallback could be implemented in the user file.
   */
}
 8005146:	bf00      	nop
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <HAL_SDADC_ErrorCallback>:
  * @brief  Error callback. 
  * @param  hsdadc SDADC handle.
  * @retval None
  */
__weak void HAL_SDADC_ErrorCallback(SDADC_HandleTypeDef* hsdadc)
{
 8005152:	b480      	push	{r7}
 8005154:	b083      	sub	sp, #12
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  UNUSED(hsdadc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDADC_ErrorCallback could be implemented in the user file.
   */
}
 800515a:	bf00      	nop
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <SDADC_EnterInitMode>:
  * @brief  This function allows to enter in init mode for SDADC instance.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_EnterInitMode(SDADC_HandleTypeDef* hsdadc)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b084      	sub	sp, #16
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  
  /* Set INIT bit on SDADC_CR1 register */
  hsdadc->Instance->CR1 |= SDADC_CR1_INIT;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800517c:	601a      	str	r2, [r3, #0]

  /* Wait INITRDY bit on SDADC_ISR */
  tickstart = HAL_GetTick();
 800517e:	f7fc fed1 	bl	8001f24 <HAL_GetTick>
 8005182:	60f8      	str	r0, [r7, #12]
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 8005184:	e008      	b.n	8005198 <SDADC_EnterInitMode+0x32>
  {
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 8005186:	f7fc fecd 	bl	8001f24 <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	2bc8      	cmp	r3, #200	; 0xc8
 8005192:	d901      	bls.n	8005198 <SDADC_EnterInitMode+0x32>
    {       
      return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e005      	b.n	80051a4 <SDADC_EnterInitMode+0x3e>
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	daf1      	bge.n	8005186 <SDADC_EnterInitMode+0x20>
    } 
  }
  
  /* Return HAL status */
  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <SDADC_ExitInitMode>:
  * @brief  This function allows to exit from init mode for SDADC instance.
  * @param  hsdadc SDADC handle.
  * @retval None.
  */
static void SDADC_ExitInitMode(SDADC_HandleTypeDef* hsdadc)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  /* Reset INIT bit in SDADC_CR1 register */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_INIT);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80051c2:	601a      	str	r2, [r3, #0]
}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <SDADC_GetInjChannelsNbr>:
  * @brief  This function allows to get the number of injected channels.
  * @param  Channels bitfield of injected channels.
  * @retval Number of injected channels.
  */
static uint32_t SDADC_GetInjChannelsNbr(uint32_t Channels)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b087      	sub	sp, #28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t nbChannels = 0UL;
 80051d8:	2300      	movs	r3, #0
 80051da:	617b      	str	r3, [r7, #20]
  uint32_t tmp,i;
  
  /* Get the number of channels from bitfield */
  tmp = (uint32_t) (Channels & SDADC_LSB_MASK);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	b29b      	uxth	r3, r3
 80051e0:	613b      	str	r3, [r7, #16]
  for(i = 0UL ; i < 9UL ; i++)
 80051e2:	2300      	movs	r3, #0
 80051e4:	60fb      	str	r3, [r7, #12]
 80051e6:	e00d      	b.n	8005204 <SDADC_GetInjChannelsNbr+0x34>
  {
    if((tmp & 0x00000001UL) != 0UL)
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d002      	beq.n	80051f8 <SDADC_GetInjChannelsNbr+0x28>
    {
      nbChannels++;
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	3301      	adds	r3, #1
 80051f6:	617b      	str	r3, [r7, #20]
    }
    tmp = (uint32_t) (tmp >> 1UL);
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	085b      	lsrs	r3, r3, #1
 80051fc:	613b      	str	r3, [r7, #16]
  for(i = 0UL ; i < 9UL ; i++)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	3301      	adds	r3, #1
 8005202:	60fb      	str	r3, [r7, #12]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2b08      	cmp	r3, #8
 8005208:	d9ee      	bls.n	80051e8 <SDADC_GetInjChannelsNbr+0x18>
  }
  return nbChannels;
 800520a:	697b      	ldr	r3, [r7, #20]
}
 800520c:	4618      	mov	r0, r3
 800520e:	371c      	adds	r7, #28
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <SDADC_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_RegConvStart(SDADC_HandleTypeDef* hsdadc)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005220:	2300      	movs	r3, #0
 8005222:	73fb      	strb	r3, [r7, #15]

  /* Check regular trigger */
  if(hsdadc->RegularTrigger == SDADC_SOFTWARE_TRIGGER)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005228:	2b00      	cmp	r3, #0
 800522a:	d108      	bne.n	800523e <SDADC_RegConvStart+0x26>
  {
    /* Set RSWSTART bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 |= SDADC_CR2_RSWSTART;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	685a      	ldr	r2, [r3, #4]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800523a:	605a      	str	r2, [r3, #4]
 800523c:	e017      	b.n	800526e <SDADC_RegConvStart+0x56>
  }
  else /* synchronuous trigger */
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7ff ff91 	bl	8005166 <SDADC_EnterInitMode>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d006      	beq.n	8005258 <SDADC_RegConvStart+0x40>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	22ff      	movs	r2, #255	; 0xff
 800524e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	73fb      	strb	r3, [r7, #15]
 8005256:	e00a      	b.n	800526e <SDADC_RegConvStart+0x56>
    }
    else
    {
      /* Set RSYNC bit in SDADC_CR1 register */
      hsdadc->Instance->CR1 |= SDADC_CR1_RSYNC;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005266:	601a      	str	r2, [r3, #0]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f7ff ff9f 	bl	80051ac <SDADC_ExitInitMode>
    }
  }
  /* Update SDADC state only if status is OK */
  if(status == HAL_OK)
 800526e:	7bfb      	ldrb	r3, [r7, #15]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d10a      	bne.n	800528a <SDADC_RegConvStart+0x72>
  {
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                    HAL_SDADC_STATE_REG : HAL_SDADC_STATE_REG_INJ;
 800527a:	2b01      	cmp	r3, #1
 800527c:	d101      	bne.n	8005282 <SDADC_RegConvStart+0x6a>
 800527e:	2203      	movs	r2, #3
 8005280:	e000      	b.n	8005284 <SDADC_RegConvStart+0x6c>
 8005282:	2205      	movs	r2, #5
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  /* Return function status */
  return status;
 800528a:	7bfb      	ldrb	r3, [r7, #15]
}
 800528c:	4618      	mov	r0, r3
 800528e:	3710      	adds	r7, #16
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <SDADC_InjConvStart>:
  * @brief  This function allows to really start injected conversion.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_InjConvStart(SDADC_HandleTypeDef* hsdadc)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800529c:	2300      	movs	r3, #0
 800529e:	73fb      	strb	r3, [r7, #15]

  /* Initialize number of injected conversions remaining */
  hsdadc->InjConvRemaining = hsdadc->InjectedChannelsNbr;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a1a      	ldr	r2, [r3, #32]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check injected trigger */
  if(hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d108      	bne.n	80052c2 <SDADC_InjConvStart+0x2e>
  {
    /* Set JSWSTART bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 |= SDADC_CR2_JSWSTART;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	685a      	ldr	r2, [r3, #4]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052be:	605a      	str	r2, [r3, #4]
 80052c0:	e025      	b.n	800530e <SDADC_InjConvStart+0x7a>
  }
  else /* external or synchronuous trigger */
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f7ff ff4f 	bl	8005166 <SDADC_EnterInitMode>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d006      	beq.n	80052dc <SDADC_InjConvStart+0x48>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	22ff      	movs	r2, #255	; 0xff
 80052d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	73fb      	strb	r3, [r7, #15]
 80052da:	e018      	b.n	800530e <SDADC_InjConvStart+0x7a>
    }
    else
    {
      if(hsdadc->InjectedTrigger == SDADC_SYNCHRONOUS_TRIGGER)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d108      	bne.n	80052f6 <SDADC_InjConvStart+0x62>
      {
        /* Set JSYNC bit in SDADC_CR1 register */
        hsdadc->Instance->CR1 |= SDADC_CR1_JSYNC;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052f2:	601a      	str	r2, [r3, #0]
 80052f4:	e008      	b.n	8005308 <SDADC_InjConvStart+0x74>
      }
      else /* external trigger */
      {
        /* Set JEXTEN[1:0] bits in SDADC_CR2 register */
        hsdadc->Instance->CR2 |= hsdadc->ExtTriggerEdge;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	6859      	ldr	r1, [r3, #4]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	430a      	orrs	r2, r1
 8005306:	605a      	str	r2, [r3, #4]
      }
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f7ff ff4f 	bl	80051ac <SDADC_ExitInitMode>
    }
  }
  /* Update SDADC state only if status is OK */
  if(status == HAL_OK)
 800530e:	7bfb      	ldrb	r3, [r7, #15]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10a      	bne.n	800532a <SDADC_InjConvStart+0x96>
  {
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                    HAL_SDADC_STATE_INJ : HAL_SDADC_STATE_REG_INJ;
 800531a:	2b01      	cmp	r3, #1
 800531c:	d101      	bne.n	8005322 <SDADC_InjConvStart+0x8e>
 800531e:	2204      	movs	r2, #4
 8005320:	e000      	b.n	8005324 <SDADC_InjConvStart+0x90>
 8005322:	2205      	movs	r2, #5
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  /* Return function status */
  return status;
 800532a:	7bfb      	ldrb	r3, [r7, #15]
}
 800532c:	4618      	mov	r0, r3
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e041      	b.n	80053ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d106      	bne.n	8005360 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f7fc fb46 	bl	80019ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2202      	movs	r2, #2
 8005364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	3304      	adds	r3, #4
 8005370:	4619      	mov	r1, r3
 8005372:	4610      	mov	r0, r2
 8005374:	f000 fb28 	bl	80059c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3708      	adds	r7, #8
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
	...

080053d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d001      	beq.n	80053ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e041      	b.n	8005470 <HAL_TIM_Base_Start+0x9c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2202      	movs	r2, #2
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053fc:	d01d      	beq.n	800543a <HAL_TIM_Base_Start+0x66>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a1e      	ldr	r2, [pc, #120]	; (800547c <HAL_TIM_Base_Start+0xa8>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d018      	beq.n	800543a <HAL_TIM_Base_Start+0x66>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a1c      	ldr	r2, [pc, #112]	; (8005480 <HAL_TIM_Base_Start+0xac>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d013      	beq.n	800543a <HAL_TIM_Base_Start+0x66>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a1b      	ldr	r2, [pc, #108]	; (8005484 <HAL_TIM_Base_Start+0xb0>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d00e      	beq.n	800543a <HAL_TIM_Base_Start+0x66>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a19      	ldr	r2, [pc, #100]	; (8005488 <HAL_TIM_Base_Start+0xb4>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d009      	beq.n	800543a <HAL_TIM_Base_Start+0x66>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a18      	ldr	r2, [pc, #96]	; (800548c <HAL_TIM_Base_Start+0xb8>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d004      	beq.n	800543a <HAL_TIM_Base_Start+0x66>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a16      	ldr	r2, [pc, #88]	; (8005490 <HAL_TIM_Base_Start+0xbc>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d111      	bne.n	800545e <HAL_TIM_Base_Start+0x8a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f003 0307 	and.w	r3, r3, #7
 8005444:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2b06      	cmp	r3, #6
 800544a:	d010      	beq.n	800546e <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f042 0201 	orr.w	r2, r2, #1
 800545a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800545c:	e007      	b.n	800546e <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f042 0201 	orr.w	r2, r2, #1
 800546c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3714      	adds	r7, #20
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr
 800547c:	40000400 	.word	0x40000400
 8005480:	40000800 	.word	0x40000800
 8005484:	40000c00 	.word	0x40000c00
 8005488:	40001800 	.word	0x40001800
 800548c:	40014000 	.word	0x40014000
 8005490:	40015c00 	.word	0x40015c00

08005494 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d101      	bne.n	80054a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e041      	b.n	800552a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d106      	bne.n	80054c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f839 	bl	8005532 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2202      	movs	r2, #2
 80054c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	3304      	adds	r3, #4
 80054d0:	4619      	mov	r1, r3
 80054d2:	4610      	mov	r0, r2
 80054d4:	f000 fa78 	bl	80059c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3708      	adds	r7, #8
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}

08005532 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005532:	b480      	push	{r7}
 8005534:	b083      	sub	sp, #12
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800553a:	bf00      	nop
 800553c:	370c      	adds	r7, #12
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
	...

08005548 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d109      	bne.n	800556c <HAL_TIM_PWM_Start+0x24>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800555e:	b2db      	uxtb	r3, r3
 8005560:	2b01      	cmp	r3, #1
 8005562:	bf14      	ite	ne
 8005564:	2301      	movne	r3, #1
 8005566:	2300      	moveq	r3, #0
 8005568:	b2db      	uxtb	r3, r3
 800556a:	e022      	b.n	80055b2 <HAL_TIM_PWM_Start+0x6a>
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	2b04      	cmp	r3, #4
 8005570:	d109      	bne.n	8005586 <HAL_TIM_PWM_Start+0x3e>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b01      	cmp	r3, #1
 800557c:	bf14      	ite	ne
 800557e:	2301      	movne	r3, #1
 8005580:	2300      	moveq	r3, #0
 8005582:	b2db      	uxtb	r3, r3
 8005584:	e015      	b.n	80055b2 <HAL_TIM_PWM_Start+0x6a>
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	2b08      	cmp	r3, #8
 800558a:	d109      	bne.n	80055a0 <HAL_TIM_PWM_Start+0x58>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b01      	cmp	r3, #1
 8005596:	bf14      	ite	ne
 8005598:	2301      	movne	r3, #1
 800559a:	2300      	moveq	r3, #0
 800559c:	b2db      	uxtb	r3, r3
 800559e:	e008      	b.n	80055b2 <HAL_TIM_PWM_Start+0x6a>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	bf14      	ite	ne
 80055ac:	2301      	movne	r3, #1
 80055ae:	2300      	moveq	r3, #0
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e07c      	b.n	80056b4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d104      	bne.n	80055ca <HAL_TIM_PWM_Start+0x82>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2202      	movs	r2, #2
 80055c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055c8:	e013      	b.n	80055f2 <HAL_TIM_PWM_Start+0xaa>
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	2b04      	cmp	r3, #4
 80055ce:	d104      	bne.n	80055da <HAL_TIM_PWM_Start+0x92>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2202      	movs	r2, #2
 80055d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055d8:	e00b      	b.n	80055f2 <HAL_TIM_PWM_Start+0xaa>
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	2b08      	cmp	r3, #8
 80055de:	d104      	bne.n	80055ea <HAL_TIM_PWM_Start+0xa2>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2202      	movs	r2, #2
 80055e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055e8:	e003      	b.n	80055f2 <HAL_TIM_PWM_Start+0xaa>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2202      	movs	r2, #2
 80055ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2201      	movs	r2, #1
 80055f8:	6839      	ldr	r1, [r7, #0]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 fc71 	bl	8005ee2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a2d      	ldr	r2, [pc, #180]	; (80056bc <HAL_TIM_PWM_Start+0x174>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d009      	beq.n	800561e <HAL_TIM_PWM_Start+0xd6>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a2c      	ldr	r2, [pc, #176]	; (80056c0 <HAL_TIM_PWM_Start+0x178>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d004      	beq.n	800561e <HAL_TIM_PWM_Start+0xd6>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a2a      	ldr	r2, [pc, #168]	; (80056c4 <HAL_TIM_PWM_Start+0x17c>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d101      	bne.n	8005622 <HAL_TIM_PWM_Start+0xda>
 800561e:	2301      	movs	r3, #1
 8005620:	e000      	b.n	8005624 <HAL_TIM_PWM_Start+0xdc>
 8005622:	2300      	movs	r3, #0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d007      	beq.n	8005638 <HAL_TIM_PWM_Start+0xf0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005636:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005640:	d01d      	beq.n	800567e <HAL_TIM_PWM_Start+0x136>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a20      	ldr	r2, [pc, #128]	; (80056c8 <HAL_TIM_PWM_Start+0x180>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d018      	beq.n	800567e <HAL_TIM_PWM_Start+0x136>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a1e      	ldr	r2, [pc, #120]	; (80056cc <HAL_TIM_PWM_Start+0x184>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d013      	beq.n	800567e <HAL_TIM_PWM_Start+0x136>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a1d      	ldr	r2, [pc, #116]	; (80056d0 <HAL_TIM_PWM_Start+0x188>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d00e      	beq.n	800567e <HAL_TIM_PWM_Start+0x136>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a1b      	ldr	r2, [pc, #108]	; (80056d4 <HAL_TIM_PWM_Start+0x18c>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d009      	beq.n	800567e <HAL_TIM_PWM_Start+0x136>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a13      	ldr	r2, [pc, #76]	; (80056bc <HAL_TIM_PWM_Start+0x174>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d004      	beq.n	800567e <HAL_TIM_PWM_Start+0x136>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a17      	ldr	r2, [pc, #92]	; (80056d8 <HAL_TIM_PWM_Start+0x190>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d111      	bne.n	80056a2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f003 0307 	and.w	r3, r3, #7
 8005688:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2b06      	cmp	r3, #6
 800568e:	d010      	beq.n	80056b2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f042 0201 	orr.w	r2, r2, #1
 800569e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056a0:	e007      	b.n	80056b2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f042 0201 	orr.w	r2, r2, #1
 80056b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3710      	adds	r7, #16
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	40014000 	.word	0x40014000
 80056c0:	40014400 	.word	0x40014400
 80056c4:	40014800 	.word	0x40014800
 80056c8:	40000400 	.word	0x40000400
 80056cc:	40000800 	.word	0x40000800
 80056d0:	40000c00 	.word	0x40000c00
 80056d4:	40001800 	.word	0x40001800
 80056d8:	40015c00 	.word	0x40015c00

080056dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d101      	bne.n	80056f6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80056f2:	2302      	movs	r3, #2
 80056f4:	e0ac      	b.n	8005850 <HAL_TIM_PWM_ConfigChannel+0x174>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b0c      	cmp	r3, #12
 8005702:	f200 809f 	bhi.w	8005844 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005706:	a201      	add	r2, pc, #4	; (adr r2, 800570c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800570c:	08005741 	.word	0x08005741
 8005710:	08005845 	.word	0x08005845
 8005714:	08005845 	.word	0x08005845
 8005718:	08005845 	.word	0x08005845
 800571c:	08005781 	.word	0x08005781
 8005720:	08005845 	.word	0x08005845
 8005724:	08005845 	.word	0x08005845
 8005728:	08005845 	.word	0x08005845
 800572c:	080057c3 	.word	0x080057c3
 8005730:	08005845 	.word	0x08005845
 8005734:	08005845 	.word	0x08005845
 8005738:	08005845 	.word	0x08005845
 800573c:	08005803 	.word	0x08005803
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68b9      	ldr	r1, [r7, #8]
 8005746:	4618      	mov	r0, r3
 8005748:	f000 f9d8 	bl	8005afc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	699a      	ldr	r2, [r3, #24]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f042 0208 	orr.w	r2, r2, #8
 800575a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	699a      	ldr	r2, [r3, #24]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f022 0204 	bic.w	r2, r2, #4
 800576a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6999      	ldr	r1, [r3, #24]
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	691a      	ldr	r2, [r3, #16]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	430a      	orrs	r2, r1
 800577c:	619a      	str	r2, [r3, #24]
      break;
 800577e:	e062      	b.n	8005846 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68b9      	ldr	r1, [r7, #8]
 8005786:	4618      	mov	r0, r3
 8005788:	f000 fa32 	bl	8005bf0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	699a      	ldr	r2, [r3, #24]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800579a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	699a      	ldr	r2, [r3, #24]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6999      	ldr	r1, [r3, #24]
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	021a      	lsls	r2, r3, #8
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	430a      	orrs	r2, r1
 80057be:	619a      	str	r2, [r3, #24]
      break;
 80057c0:	e041      	b.n	8005846 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68b9      	ldr	r1, [r7, #8]
 80057c8:	4618      	mov	r0, r3
 80057ca:	f000 fa73 	bl	8005cb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	69da      	ldr	r2, [r3, #28]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f042 0208 	orr.w	r2, r2, #8
 80057dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	69da      	ldr	r2, [r3, #28]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f022 0204 	bic.w	r2, r2, #4
 80057ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	69d9      	ldr	r1, [r3, #28]
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	691a      	ldr	r2, [r3, #16]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	430a      	orrs	r2, r1
 80057fe:	61da      	str	r2, [r3, #28]
      break;
 8005800:	e021      	b.n	8005846 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68b9      	ldr	r1, [r7, #8]
 8005808:	4618      	mov	r0, r3
 800580a:	f000 fa91 	bl	8005d30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	69da      	ldr	r2, [r3, #28]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800581c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	69da      	ldr	r2, [r3, #28]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800582c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	69d9      	ldr	r1, [r3, #28]
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	021a      	lsls	r2, r3, #8
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	430a      	orrs	r2, r1
 8005840:	61da      	str	r2, [r3, #28]
      break;
 8005842:	e000      	b.n	8005846 <HAL_TIM_PWM_ConfigChannel+0x16a>
      break;
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8005844:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005868:	2b01      	cmp	r3, #1
 800586a:	d101      	bne.n	8005870 <HAL_TIM_ConfigClockSource+0x18>
 800586c:	2302      	movs	r3, #2
 800586e:	e0a6      	b.n	80059be <HAL_TIM_ConfigClockSource+0x166>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2202      	movs	r2, #2
 800587c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800588e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005896:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2b40      	cmp	r3, #64	; 0x40
 80058a6:	d067      	beq.n	8005978 <HAL_TIM_ConfigClockSource+0x120>
 80058a8:	2b40      	cmp	r3, #64	; 0x40
 80058aa:	d80b      	bhi.n	80058c4 <HAL_TIM_ConfigClockSource+0x6c>
 80058ac:	2b10      	cmp	r3, #16
 80058ae:	d073      	beq.n	8005998 <HAL_TIM_ConfigClockSource+0x140>
 80058b0:	2b10      	cmp	r3, #16
 80058b2:	d802      	bhi.n	80058ba <HAL_TIM_ConfigClockSource+0x62>
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d06f      	beq.n	8005998 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80058b8:	e078      	b.n	80059ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80058ba:	2b20      	cmp	r3, #32
 80058bc:	d06c      	beq.n	8005998 <HAL_TIM_ConfigClockSource+0x140>
 80058be:	2b30      	cmp	r3, #48	; 0x30
 80058c0:	d06a      	beq.n	8005998 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80058c2:	e073      	b.n	80059ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80058c4:	2b70      	cmp	r3, #112	; 0x70
 80058c6:	d00d      	beq.n	80058e4 <HAL_TIM_ConfigClockSource+0x8c>
 80058c8:	2b70      	cmp	r3, #112	; 0x70
 80058ca:	d804      	bhi.n	80058d6 <HAL_TIM_ConfigClockSource+0x7e>
 80058cc:	2b50      	cmp	r3, #80	; 0x50
 80058ce:	d033      	beq.n	8005938 <HAL_TIM_ConfigClockSource+0xe0>
 80058d0:	2b60      	cmp	r3, #96	; 0x60
 80058d2:	d041      	beq.n	8005958 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80058d4:	e06a      	b.n	80059ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80058d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058da:	d066      	beq.n	80059aa <HAL_TIM_ConfigClockSource+0x152>
 80058dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058e0:	d017      	beq.n	8005912 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80058e2:	e063      	b.n	80059ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6818      	ldr	r0, [r3, #0]
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	6899      	ldr	r1, [r3, #8]
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	685a      	ldr	r2, [r3, #4]
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f000 fad5 	bl	8005ea2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005906:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	609a      	str	r2, [r3, #8]
      break;
 8005910:	e04c      	b.n	80059ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6818      	ldr	r0, [r3, #0]
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	6899      	ldr	r1, [r3, #8]
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	685a      	ldr	r2, [r3, #4]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	f000 fabe 	bl	8005ea2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	689a      	ldr	r2, [r3, #8]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005934:	609a      	str	r2, [r3, #8]
      break;
 8005936:	e039      	b.n	80059ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6818      	ldr	r0, [r3, #0]
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	6859      	ldr	r1, [r3, #4]
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	461a      	mov	r2, r3
 8005946:	f000 fa32 	bl	8005dae <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2150      	movs	r1, #80	; 0x50
 8005950:	4618      	mov	r0, r3
 8005952:	f000 fa8b 	bl	8005e6c <TIM_ITRx_SetConfig>
      break;
 8005956:	e029      	b.n	80059ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6818      	ldr	r0, [r3, #0]
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	6859      	ldr	r1, [r3, #4]
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	461a      	mov	r2, r3
 8005966:	f000 fa51 	bl	8005e0c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2160      	movs	r1, #96	; 0x60
 8005970:	4618      	mov	r0, r3
 8005972:	f000 fa7b 	bl	8005e6c <TIM_ITRx_SetConfig>
      break;
 8005976:	e019      	b.n	80059ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6818      	ldr	r0, [r3, #0]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	6859      	ldr	r1, [r3, #4]
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	461a      	mov	r2, r3
 8005986:	f000 fa12 	bl	8005dae <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2140      	movs	r1, #64	; 0x40
 8005990:	4618      	mov	r0, r3
 8005992:	f000 fa6b 	bl	8005e6c <TIM_ITRx_SetConfig>
      break;
 8005996:	e009      	b.n	80059ac <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4619      	mov	r1, r3
 80059a2:	4610      	mov	r0, r2
 80059a4:	f000 fa62 	bl	8005e6c <TIM_ITRx_SetConfig>
        break;
 80059a8:	e000      	b.n	80059ac <HAL_TIM_ConfigClockSource+0x154>
      break;
 80059aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
	...

080059c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059de:	d00f      	beq.n	8005a00 <TIM_Base_SetConfig+0x38>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a3c      	ldr	r2, [pc, #240]	; (8005ad4 <TIM_Base_SetConfig+0x10c>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d00b      	beq.n	8005a00 <TIM_Base_SetConfig+0x38>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a3b      	ldr	r2, [pc, #236]	; (8005ad8 <TIM_Base_SetConfig+0x110>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d007      	beq.n	8005a00 <TIM_Base_SetConfig+0x38>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a3a      	ldr	r2, [pc, #232]	; (8005adc <TIM_Base_SetConfig+0x114>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d003      	beq.n	8005a00 <TIM_Base_SetConfig+0x38>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a39      	ldr	r2, [pc, #228]	; (8005ae0 <TIM_Base_SetConfig+0x118>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d108      	bne.n	8005a12 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a18:	d027      	beq.n	8005a6a <TIM_Base_SetConfig+0xa2>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a2d      	ldr	r2, [pc, #180]	; (8005ad4 <TIM_Base_SetConfig+0x10c>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d023      	beq.n	8005a6a <TIM_Base_SetConfig+0xa2>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a2c      	ldr	r2, [pc, #176]	; (8005ad8 <TIM_Base_SetConfig+0x110>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d01f      	beq.n	8005a6a <TIM_Base_SetConfig+0xa2>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a2b      	ldr	r2, [pc, #172]	; (8005adc <TIM_Base_SetConfig+0x114>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d01b      	beq.n	8005a6a <TIM_Base_SetConfig+0xa2>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a2b      	ldr	r2, [pc, #172]	; (8005ae4 <TIM_Base_SetConfig+0x11c>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d017      	beq.n	8005a6a <TIM_Base_SetConfig+0xa2>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a2a      	ldr	r2, [pc, #168]	; (8005ae8 <TIM_Base_SetConfig+0x120>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d013      	beq.n	8005a6a <TIM_Base_SetConfig+0xa2>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a29      	ldr	r2, [pc, #164]	; (8005aec <TIM_Base_SetConfig+0x124>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d00f      	beq.n	8005a6a <TIM_Base_SetConfig+0xa2>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a28      	ldr	r2, [pc, #160]	; (8005af0 <TIM_Base_SetConfig+0x128>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d00b      	beq.n	8005a6a <TIM_Base_SetConfig+0xa2>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a27      	ldr	r2, [pc, #156]	; (8005af4 <TIM_Base_SetConfig+0x12c>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d007      	beq.n	8005a6a <TIM_Base_SetConfig+0xa2>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a26      	ldr	r2, [pc, #152]	; (8005af8 <TIM_Base_SetConfig+0x130>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d003      	beq.n	8005a6a <TIM_Base_SetConfig+0xa2>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a1e      	ldr	r2, [pc, #120]	; (8005ae0 <TIM_Base_SetConfig+0x118>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d108      	bne.n	8005a7c <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	689a      	ldr	r2, [r3, #8]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a13      	ldr	r2, [pc, #76]	; (8005af0 <TIM_Base_SetConfig+0x128>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d007      	beq.n	8005ab8 <TIM_Base_SetConfig+0xf0>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a12      	ldr	r2, [pc, #72]	; (8005af4 <TIM_Base_SetConfig+0x12c>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d003      	beq.n	8005ab8 <TIM_Base_SetConfig+0xf0>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a11      	ldr	r2, [pc, #68]	; (8005af8 <TIM_Base_SetConfig+0x130>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d103      	bne.n	8005ac0 <TIM_Base_SetConfig+0xf8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	691a      	ldr	r2, [r3, #16]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	615a      	str	r2, [r3, #20]
}
 8005ac6:	bf00      	nop
 8005ac8:	3714      	adds	r7, #20
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	40000400 	.word	0x40000400
 8005ad8:	40000800 	.word	0x40000800
 8005adc:	40000c00 	.word	0x40000c00
 8005ae0:	40015c00 	.word	0x40015c00
 8005ae4:	40001800 	.word	0x40001800
 8005ae8:	40001c00 	.word	0x40001c00
 8005aec:	40002000 	.word	0x40002000
 8005af0:	40014000 	.word	0x40014000
 8005af4:	40014400 	.word	0x40014400
 8005af8:	40014800 	.word	0x40014800

08005afc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b087      	sub	sp, #28
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	f023 0201 	bic.w	r2, r3, #1
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f023 0303 	bic.w	r3, r3, #3
 8005b32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	f023 0302 	bic.w	r3, r3, #2
 8005b44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a24      	ldr	r2, [pc, #144]	; (8005be4 <TIM_OC1_SetConfig+0xe8>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d007      	beq.n	8005b68 <TIM_OC1_SetConfig+0x6c>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a23      	ldr	r2, [pc, #140]	; (8005be8 <TIM_OC1_SetConfig+0xec>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d003      	beq.n	8005b68 <TIM_OC1_SetConfig+0x6c>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a22      	ldr	r2, [pc, #136]	; (8005bec <TIM_OC1_SetConfig+0xf0>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d10c      	bne.n	8005b82 <TIM_OC1_SetConfig+0x86>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	f023 0308 	bic.w	r3, r3, #8
 8005b6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	f023 0304 	bic.w	r3, r3, #4
 8005b80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a17      	ldr	r2, [pc, #92]	; (8005be4 <TIM_OC1_SetConfig+0xe8>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d007      	beq.n	8005b9a <TIM_OC1_SetConfig+0x9e>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a16      	ldr	r2, [pc, #88]	; (8005be8 <TIM_OC1_SetConfig+0xec>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d003      	beq.n	8005b9a <TIM_OC1_SetConfig+0x9e>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a15      	ldr	r2, [pc, #84]	; (8005bec <TIM_OC1_SetConfig+0xf0>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d111      	bne.n	8005bbe <TIM_OC1_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ba0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ba8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	693a      	ldr	r2, [r7, #16]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	621a      	str	r2, [r3, #32]
}
 8005bd8:	bf00      	nop
 8005bda:	371c      	adds	r7, #28
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr
 8005be4:	40014000 	.word	0x40014000
 8005be8:	40014400 	.word	0x40014400
 8005bec:	40014800 	.word	0x40014800

08005bf0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b087      	sub	sp, #28
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	f023 0210 	bic.w	r2, r3, #16
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	021b      	lsls	r3, r3, #8
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	f023 0320 	bic.w	r3, r3, #32
 8005c3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	011b      	lsls	r3, r3, #4
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	613b      	str	r3, [r7, #16]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a17      	ldr	r2, [pc, #92]	; (8005ca8 <TIM_OC2_SetConfig+0xb8>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d007      	beq.n	8005c60 <TIM_OC2_SetConfig+0x70>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a16      	ldr	r2, [pc, #88]	; (8005cac <TIM_OC2_SetConfig+0xbc>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d003      	beq.n	8005c60 <TIM_OC2_SetConfig+0x70>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a15      	ldr	r2, [pc, #84]	; (8005cb0 <TIM_OC2_SetConfig+0xc0>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d10f      	bne.n	8005c80 <TIM_OC2_SetConfig+0x90>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c66:	617b      	str	r3, [r7, #20]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	695b      	ldr	r3, [r3, #20]
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	621a      	str	r2, [r3, #32]
}
 8005c9a:	bf00      	nop
 8005c9c:	371c      	adds	r7, #28
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	40014000 	.word	0x40014000
 8005cac:	40014400 	.word	0x40014400
 8005cb0:	40014800 	.word	0x40014800

08005cb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b087      	sub	sp, #28
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	69db      	ldr	r3, [r3, #28]
 8005cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f023 0303 	bic.w	r3, r3, #3
 8005cea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	021b      	lsls	r3, r3, #8
 8005d04:	697a      	ldr	r2, [r7, #20]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	617b      	str	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	685a      	ldr	r2, [r3, #4]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	621a      	str	r2, [r3, #32]
}
 8005d24:	bf00      	nop
 8005d26:	371c      	adds	r7, #28
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	021b      	lsls	r3, r3, #8
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	031b      	lsls	r3, r3, #12
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	617b      	str	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	685a      	ldr	r2, [r3, #4]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	621a      	str	r2, [r3, #32]
}
 8005da2:	bf00      	nop
 8005da4:	371c      	adds	r7, #28
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dae:	b480      	push	{r7}
 8005db0:	b087      	sub	sp, #28
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	60f8      	str	r0, [r7, #12]
 8005db6:	60b9      	str	r1, [r7, #8]
 8005db8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6a1b      	ldr	r3, [r3, #32]
 8005dc4:	f023 0201 	bic.w	r2, r3, #1
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	699b      	ldr	r3, [r3, #24]
 8005dd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	011b      	lsls	r3, r3, #4
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	f023 030a 	bic.w	r3, r3, #10
 8005dea:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	621a      	str	r2, [r3, #32]
}
 8005e00:	bf00      	nop
 8005e02:	371c      	adds	r7, #28
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b087      	sub	sp, #28
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6a1b      	ldr	r3, [r3, #32]
 8005e1c:	f023 0210 	bic.w	r2, r3, #16
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	699b      	ldr	r3, [r3, #24]
 8005e28:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e36:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	031b      	lsls	r3, r3, #12
 8005e3c:	697a      	ldr	r2, [r7, #20]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e48:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	011b      	lsls	r3, r3, #4
 8005e4e:	693a      	ldr	r2, [r7, #16]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	621a      	str	r2, [r3, #32]
}
 8005e60:	bf00      	nop
 8005e62:	371c      	adds	r7, #28
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e82:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e84:	683a      	ldr	r2, [r7, #0]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	f043 0307 	orr.w	r3, r3, #7
 8005e8e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	609a      	str	r2, [r3, #8]
}
 8005e96:	bf00      	nop
 8005e98:	3714      	adds	r7, #20
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr

08005ea2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ea2:	b480      	push	{r7}
 8005ea4:	b087      	sub	sp, #28
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	60f8      	str	r0, [r7, #12]
 8005eaa:	60b9      	str	r1, [r7, #8]
 8005eac:	607a      	str	r2, [r7, #4]
 8005eae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ebc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	021a      	lsls	r2, r3, #8
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	431a      	orrs	r2, r3
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	609a      	str	r2, [r3, #8]
}
 8005ed6:	bf00      	nop
 8005ed8:	371c      	adds	r7, #28
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	b087      	sub	sp, #28
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	60f8      	str	r0, [r7, #12]
 8005eea:	60b9      	str	r1, [r7, #8]
 8005eec:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	f003 031f 	and.w	r3, r3, #31
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8005efa:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6a1a      	ldr	r2, [r3, #32]
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	43db      	mvns	r3, r3
 8005f04:	401a      	ands	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6a1a      	ldr	r2, [r3, #32]
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	f003 031f 	and.w	r3, r3, #31
 8005f14:	6879      	ldr	r1, [r7, #4]
 8005f16:	fa01 f303 	lsl.w	r3, r1, r3
 8005f1a:	431a      	orrs	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	621a      	str	r2, [r3, #32]
}
 8005f20:	bf00      	nop
 8005f22:	371c      	adds	r7, #28
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d101      	bne.n	8005f44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f40:	2302      	movs	r3, #2
 8005f42:	e055      	b.n	8005ff0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2202      	movs	r2, #2
 8005f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	60bb      	str	r3, [r7, #8]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f86:	d01d      	beq.n	8005fc4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a1b      	ldr	r2, [pc, #108]	; (8005ffc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d018      	beq.n	8005fc4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a1a      	ldr	r2, [pc, #104]	; (8006000 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d013      	beq.n	8005fc4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a18      	ldr	r2, [pc, #96]	; (8006004 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d00e      	beq.n	8005fc4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a17      	ldr	r2, [pc, #92]	; (8006008 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d009      	beq.n	8005fc4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a15      	ldr	r2, [pc, #84]	; (800600c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d004      	beq.n	8005fc4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a14      	ldr	r2, [pc, #80]	; (8006010 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d10c      	bne.n	8005fde <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	68ba      	ldr	r2, [r7, #8]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3714      	adds	r7, #20
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr
 8005ffc:	40000400 	.word	0x40000400
 8006000:	40000800 	.word	0x40000800
 8006004:	40000c00 	.word	0x40000c00
 8006008:	40001800 	.word	0x40001800
 800600c:	40014000 	.word	0x40014000
 8006010:	40015c00 	.word	0x40015c00

08006014 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d101      	bne.n	8006026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e040      	b.n	80060a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800602a:	2b00      	cmp	r3, #0
 800602c:	d106      	bne.n	800603c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f7fb fe1e 	bl	8001c78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2224      	movs	r2, #36	; 0x24
 8006040:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f022 0201 	bic.w	r2, r2, #1
 8006050:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 f91e 	bl	8006294 <UART_SetConfig>
 8006058:	4603      	mov	r3, r0
 800605a:	2b01      	cmp	r3, #1
 800605c:	d101      	bne.n	8006062 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e022      	b.n	80060a8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006066:	2b00      	cmp	r3, #0
 8006068:	d002      	beq.n	8006070 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 fa8c 	bl	8006588 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	685a      	ldr	r2, [r3, #4]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800607e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689a      	ldr	r2, [r3, #8]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800608e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f042 0201 	orr.w	r2, r2, #1
 800609e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 fb13 	bl	80066cc <UART_CheckIdleState>
 80060a6:	4603      	mov	r3, r0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3708      	adds	r7, #8
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b08a      	sub	sp, #40	; 0x28
 80060b4:	af02      	add	r7, sp, #8
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	603b      	str	r3, [r7, #0]
 80060bc:	4613      	mov	r3, r2
 80060be:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060c4:	2b20      	cmp	r3, #32
 80060c6:	f040 8082 	bne.w	80061ce <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d002      	beq.n	80060d6 <HAL_UART_Transmit+0x26>
 80060d0:	88fb      	ldrh	r3, [r7, #6]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d101      	bne.n	80060da <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e07a      	b.n	80061d0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d101      	bne.n	80060e8 <HAL_UART_Transmit+0x38>
 80060e4:	2302      	movs	r3, #2
 80060e6:	e073      	b.n	80061d0 <HAL_UART_Transmit+0x120>
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2221      	movs	r2, #33	; 0x21
 80060fc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060fe:	f7fb ff11 	bl	8001f24 <HAL_GetTick>
 8006102:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	88fa      	ldrh	r2, [r7, #6]
 8006108:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	88fa      	ldrh	r2, [r7, #6]
 8006110:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800611c:	d108      	bne.n	8006130 <HAL_UART_Transmit+0x80>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d104      	bne.n	8006130 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006126:	2300      	movs	r3, #0
 8006128:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	61bb      	str	r3, [r7, #24]
 800612e:	e003      	b.n	8006138 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006134:	2300      	movs	r3, #0
 8006136:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006140:	e02d      	b.n	800619e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	9300      	str	r3, [sp, #0]
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	2200      	movs	r2, #0
 800614a:	2180      	movs	r1, #128	; 0x80
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f000 fb06 	bl	800675e <UART_WaitOnFlagUntilTimeout>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d001      	beq.n	800615c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	e039      	b.n	80061d0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d10b      	bne.n	800617a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	881a      	ldrh	r2, [r3, #0]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800616e:	b292      	uxth	r2, r2
 8006170:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	3302      	adds	r3, #2
 8006176:	61bb      	str	r3, [r7, #24]
 8006178:	e008      	b.n	800618c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	781a      	ldrb	r2, [r3, #0]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	b292      	uxth	r2, r2
 8006184:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	3301      	adds	r3, #1
 800618a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006192:	b29b      	uxth	r3, r3
 8006194:	3b01      	subs	r3, #1
 8006196:	b29a      	uxth	r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1cb      	bne.n	8006142 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	9300      	str	r3, [sp, #0]
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	2200      	movs	r2, #0
 80061b2:	2140      	movs	r1, #64	; 0x40
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	f000 fad2 	bl	800675e <UART_WaitOnFlagUntilTimeout>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d001      	beq.n	80061c4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80061c0:	2303      	movs	r3, #3
 80061c2:	e005      	b.n	80061d0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2220      	movs	r2, #32
 80061c8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80061ca:	2300      	movs	r3, #0
 80061cc:	e000      	b.n	80061d0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80061ce:	2302      	movs	r3, #2
  }
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3720      	adds	r7, #32
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	4613      	mov	r3, r2
 80061e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061ea:	2b20      	cmp	r3, #32
 80061ec:	d12c      	bne.n	8006248 <HAL_UART_Receive_DMA+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d002      	beq.n	80061fa <HAL_UART_Receive_DMA+0x22>
 80061f4:	88fb      	ldrh	r3, [r7, #6]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d101      	bne.n	80061fe <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e025      	b.n	800624a <HAL_UART_Receive_DMA+0x72>
    }

    __HAL_LOCK(huart);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006204:	2b01      	cmp	r3, #1
 8006206:	d101      	bne.n	800620c <HAL_UART_Receive_DMA+0x34>
 8006208:	2302      	movs	r3, #2
 800620a:	e01e      	b.n	800624a <HAL_UART_Receive_DMA+0x72>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006224:	2b00      	cmp	r3, #0
 8006226:	d007      	beq.n	8006238 <HAL_UART_Receive_DMA+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006236:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8006238:	88fb      	ldrh	r3, [r7, #6]
 800623a:	461a      	mov	r2, r3
 800623c:	68b9      	ldr	r1, [r7, #8]
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f000 fb0a 	bl	8006858 <UART_Start_Receive_DMA>
 8006244:	4603      	mov	r3, r0
 8006246:	e000      	b.n	800624a <HAL_UART_Receive_DMA+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006248:	2302      	movs	r3, #2
  }
}
 800624a:	4618      	mov	r0, r3
 800624c:	3710      	adds	r7, #16
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}

08006252 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006252:	b480      	push	{r7}
 8006254:	b083      	sub	sp, #12
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800625a:	bf00      	nop
 800625c:	370c      	adds	r7, #12
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr

08006266 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006266:	b480      	push	{r7}
 8006268:	b083      	sub	sp, #12
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800626e:	bf00      	nop
 8006270:	370c      	adds	r7, #12
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr

0800627a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800627a:	b480      	push	{r7}
 800627c:	b083      	sub	sp, #12
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
 8006282:	460b      	mov	r3, r1
 8006284:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006286:	bf00      	nop
 8006288:	370c      	adds	r7, #12
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
	...

08006294 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b088      	sub	sp, #32
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800629c:	2300      	movs	r3, #0
 800629e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	689a      	ldr	r2, [r3, #8]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	431a      	orrs	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	431a      	orrs	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	69db      	ldr	r3, [r3, #28]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80062c2:	f023 030c 	bic.w	r3, r3, #12
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	6812      	ldr	r2, [r2, #0]
 80062ca:	6979      	ldr	r1, [r7, #20]
 80062cc:	430b      	orrs	r3, r1
 80062ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	68da      	ldr	r2, [r3, #12]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	430a      	orrs	r2, r1
 80062e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a1b      	ldr	r3, [r3, #32]
 80062f0:	697a      	ldr	r2, [r7, #20]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	697a      	ldr	r2, [r7, #20]
 8006306:	430a      	orrs	r2, r1
 8006308:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a99      	ldr	r2, [pc, #612]	; (8006574 <UART_SetConfig+0x2e0>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d121      	bne.n	8006358 <UART_SetConfig+0xc4>
 8006314:	4b98      	ldr	r3, [pc, #608]	; (8006578 <UART_SetConfig+0x2e4>)
 8006316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006318:	f003 0303 	and.w	r3, r3, #3
 800631c:	2b03      	cmp	r3, #3
 800631e:	d817      	bhi.n	8006350 <UART_SetConfig+0xbc>
 8006320:	a201      	add	r2, pc, #4	; (adr r2, 8006328 <UART_SetConfig+0x94>)
 8006322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006326:	bf00      	nop
 8006328:	08006339 	.word	0x08006339
 800632c:	08006345 	.word	0x08006345
 8006330:	0800634b 	.word	0x0800634b
 8006334:	0800633f 	.word	0x0800633f
 8006338:	2301      	movs	r3, #1
 800633a:	77fb      	strb	r3, [r7, #31]
 800633c:	e060      	b.n	8006400 <UART_SetConfig+0x16c>
 800633e:	2302      	movs	r3, #2
 8006340:	77fb      	strb	r3, [r7, #31]
 8006342:	e05d      	b.n	8006400 <UART_SetConfig+0x16c>
 8006344:	2304      	movs	r3, #4
 8006346:	77fb      	strb	r3, [r7, #31]
 8006348:	e05a      	b.n	8006400 <UART_SetConfig+0x16c>
 800634a:	2308      	movs	r3, #8
 800634c:	77fb      	strb	r3, [r7, #31]
 800634e:	e057      	b.n	8006400 <UART_SetConfig+0x16c>
 8006350:	2310      	movs	r3, #16
 8006352:	77fb      	strb	r3, [r7, #31]
 8006354:	bf00      	nop
 8006356:	e053      	b.n	8006400 <UART_SetConfig+0x16c>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a87      	ldr	r2, [pc, #540]	; (800657c <UART_SetConfig+0x2e8>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d123      	bne.n	80063aa <UART_SetConfig+0x116>
 8006362:	4b85      	ldr	r3, [pc, #532]	; (8006578 <UART_SetConfig+0x2e4>)
 8006364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006366:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800636a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800636e:	d012      	beq.n	8006396 <UART_SetConfig+0x102>
 8006370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006374:	d802      	bhi.n	800637c <UART_SetConfig+0xe8>
 8006376:	2b00      	cmp	r3, #0
 8006378:	d007      	beq.n	800638a <UART_SetConfig+0xf6>
 800637a:	e012      	b.n	80063a2 <UART_SetConfig+0x10e>
 800637c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006380:	d00c      	beq.n	800639c <UART_SetConfig+0x108>
 8006382:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006386:	d003      	beq.n	8006390 <UART_SetConfig+0xfc>
 8006388:	e00b      	b.n	80063a2 <UART_SetConfig+0x10e>
 800638a:	2300      	movs	r3, #0
 800638c:	77fb      	strb	r3, [r7, #31]
 800638e:	e037      	b.n	8006400 <UART_SetConfig+0x16c>
 8006390:	2302      	movs	r3, #2
 8006392:	77fb      	strb	r3, [r7, #31]
 8006394:	e034      	b.n	8006400 <UART_SetConfig+0x16c>
 8006396:	2304      	movs	r3, #4
 8006398:	77fb      	strb	r3, [r7, #31]
 800639a:	e031      	b.n	8006400 <UART_SetConfig+0x16c>
 800639c:	2308      	movs	r3, #8
 800639e:	77fb      	strb	r3, [r7, #31]
 80063a0:	e02e      	b.n	8006400 <UART_SetConfig+0x16c>
 80063a2:	2310      	movs	r3, #16
 80063a4:	77fb      	strb	r3, [r7, #31]
 80063a6:	bf00      	nop
 80063a8:	e02a      	b.n	8006400 <UART_SetConfig+0x16c>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a74      	ldr	r2, [pc, #464]	; (8006580 <UART_SetConfig+0x2ec>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d123      	bne.n	80063fc <UART_SetConfig+0x168>
 80063b4:	4b70      	ldr	r3, [pc, #448]	; (8006578 <UART_SetConfig+0x2e4>)
 80063b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80063bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80063c0:	d012      	beq.n	80063e8 <UART_SetConfig+0x154>
 80063c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80063c6:	d802      	bhi.n	80063ce <UART_SetConfig+0x13a>
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d007      	beq.n	80063dc <UART_SetConfig+0x148>
 80063cc:	e012      	b.n	80063f4 <UART_SetConfig+0x160>
 80063ce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80063d2:	d00c      	beq.n	80063ee <UART_SetConfig+0x15a>
 80063d4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80063d8:	d003      	beq.n	80063e2 <UART_SetConfig+0x14e>
 80063da:	e00b      	b.n	80063f4 <UART_SetConfig+0x160>
 80063dc:	2300      	movs	r3, #0
 80063de:	77fb      	strb	r3, [r7, #31]
 80063e0:	e00e      	b.n	8006400 <UART_SetConfig+0x16c>
 80063e2:	2302      	movs	r3, #2
 80063e4:	77fb      	strb	r3, [r7, #31]
 80063e6:	e00b      	b.n	8006400 <UART_SetConfig+0x16c>
 80063e8:	2304      	movs	r3, #4
 80063ea:	77fb      	strb	r3, [r7, #31]
 80063ec:	e008      	b.n	8006400 <UART_SetConfig+0x16c>
 80063ee:	2308      	movs	r3, #8
 80063f0:	77fb      	strb	r3, [r7, #31]
 80063f2:	e005      	b.n	8006400 <UART_SetConfig+0x16c>
 80063f4:	2310      	movs	r3, #16
 80063f6:	77fb      	strb	r3, [r7, #31]
 80063f8:	bf00      	nop
 80063fa:	e001      	b.n	8006400 <UART_SetConfig+0x16c>
 80063fc:	2310      	movs	r3, #16
 80063fe:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	69db      	ldr	r3, [r3, #28]
 8006404:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006408:	d15c      	bne.n	80064c4 <UART_SetConfig+0x230>
  {
    switch (clocksource)
 800640a:	7ffb      	ldrb	r3, [r7, #31]
 800640c:	2b08      	cmp	r3, #8
 800640e:	d828      	bhi.n	8006462 <UART_SetConfig+0x1ce>
 8006410:	a201      	add	r2, pc, #4	; (adr r2, 8006418 <UART_SetConfig+0x184>)
 8006412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006416:	bf00      	nop
 8006418:	0800643d 	.word	0x0800643d
 800641c:	08006445 	.word	0x08006445
 8006420:	0800644d 	.word	0x0800644d
 8006424:	08006463 	.word	0x08006463
 8006428:	08006453 	.word	0x08006453
 800642c:	08006463 	.word	0x08006463
 8006430:	08006463 	.word	0x08006463
 8006434:	08006463 	.word	0x08006463
 8006438:	0800645b 	.word	0x0800645b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800643c:	f7fe f932 	bl	80046a4 <HAL_RCC_GetPCLK1Freq>
 8006440:	61b8      	str	r0, [r7, #24]
        break;
 8006442:	e013      	b.n	800646c <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006444:	f7fe f950 	bl	80046e8 <HAL_RCC_GetPCLK2Freq>
 8006448:	61b8      	str	r0, [r7, #24]
        break;
 800644a:	e00f      	b.n	800646c <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800644c:	4b4d      	ldr	r3, [pc, #308]	; (8006584 <UART_SetConfig+0x2f0>)
 800644e:	61bb      	str	r3, [r7, #24]
        break;
 8006450:	e00c      	b.n	800646c <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006452:	f7fe f8af 	bl	80045b4 <HAL_RCC_GetSysClockFreq>
 8006456:	61b8      	str	r0, [r7, #24]
        break;
 8006458:	e008      	b.n	800646c <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800645a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800645e:	61bb      	str	r3, [r7, #24]
        break;
 8006460:	e004      	b.n	800646c <UART_SetConfig+0x1d8>
      default:
        pclk = 0U;
 8006462:	2300      	movs	r3, #0
 8006464:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	77bb      	strb	r3, [r7, #30]
        break;
 800646a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d074      	beq.n	800655c <UART_SetConfig+0x2c8>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	005a      	lsls	r2, r3, #1
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	085b      	lsrs	r3, r3, #1
 800647c:	441a      	add	r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	fbb2 f3f3 	udiv	r3, r2, r3
 8006486:	b29b      	uxth	r3, r3
 8006488:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	2b0f      	cmp	r3, #15
 800648e:	d916      	bls.n	80064be <UART_SetConfig+0x22a>
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006496:	d212      	bcs.n	80064be <UART_SetConfig+0x22a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	b29b      	uxth	r3, r3
 800649c:	f023 030f 	bic.w	r3, r3, #15
 80064a0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	085b      	lsrs	r3, r3, #1
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	f003 0307 	and.w	r3, r3, #7
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	89fb      	ldrh	r3, [r7, #14]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	89fa      	ldrh	r2, [r7, #14]
 80064ba:	60da      	str	r2, [r3, #12]
 80064bc:	e04e      	b.n	800655c <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	77bb      	strb	r3, [r7, #30]
 80064c2:	e04b      	b.n	800655c <UART_SetConfig+0x2c8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064c4:	7ffb      	ldrb	r3, [r7, #31]
 80064c6:	2b08      	cmp	r3, #8
 80064c8:	d827      	bhi.n	800651a <UART_SetConfig+0x286>
 80064ca:	a201      	add	r2, pc, #4	; (adr r2, 80064d0 <UART_SetConfig+0x23c>)
 80064cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d0:	080064f5 	.word	0x080064f5
 80064d4:	080064fd 	.word	0x080064fd
 80064d8:	08006505 	.word	0x08006505
 80064dc:	0800651b 	.word	0x0800651b
 80064e0:	0800650b 	.word	0x0800650b
 80064e4:	0800651b 	.word	0x0800651b
 80064e8:	0800651b 	.word	0x0800651b
 80064ec:	0800651b 	.word	0x0800651b
 80064f0:	08006513 	.word	0x08006513
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064f4:	f7fe f8d6 	bl	80046a4 <HAL_RCC_GetPCLK1Freq>
 80064f8:	61b8      	str	r0, [r7, #24]
        break;
 80064fa:	e013      	b.n	8006524 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064fc:	f7fe f8f4 	bl	80046e8 <HAL_RCC_GetPCLK2Freq>
 8006500:	61b8      	str	r0, [r7, #24]
        break;
 8006502:	e00f      	b.n	8006524 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006504:	4b1f      	ldr	r3, [pc, #124]	; (8006584 <UART_SetConfig+0x2f0>)
 8006506:	61bb      	str	r3, [r7, #24]
        break;
 8006508:	e00c      	b.n	8006524 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800650a:	f7fe f853 	bl	80045b4 <HAL_RCC_GetSysClockFreq>
 800650e:	61b8      	str	r0, [r7, #24]
        break;
 8006510:	e008      	b.n	8006524 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006516:	61bb      	str	r3, [r7, #24]
        break;
 8006518:	e004      	b.n	8006524 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 800651a:	2300      	movs	r3, #0
 800651c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	77bb      	strb	r3, [r7, #30]
        break;
 8006522:	bf00      	nop
    }

    if (pclk != 0U)
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d018      	beq.n	800655c <UART_SetConfig+0x2c8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	085a      	lsrs	r2, r3, #1
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	441a      	add	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	fbb2 f3f3 	udiv	r3, r2, r3
 800653c:	b29b      	uxth	r3, r3
 800653e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	2b0f      	cmp	r3, #15
 8006544:	d908      	bls.n	8006558 <UART_SetConfig+0x2c4>
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800654c:	d204      	bcs.n	8006558 <UART_SetConfig+0x2c4>
      {
        huart->Instance->BRR = usartdiv;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	693a      	ldr	r2, [r7, #16]
 8006554:	60da      	str	r2, [r3, #12]
 8006556:	e001      	b.n	800655c <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006568:	7fbb      	ldrb	r3, [r7, #30]
}
 800656a:	4618      	mov	r0, r3
 800656c:	3720      	adds	r7, #32
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	40013800 	.word	0x40013800
 8006578:	40021000 	.word	0x40021000
 800657c:	40004400 	.word	0x40004400
 8006580:	40004800 	.word	0x40004800
 8006584:	007a1200 	.word	0x007a1200

08006588 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006594:	f003 0301 	and.w	r3, r3, #1
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00a      	beq.n	80065b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	430a      	orrs	r2, r1
 80065b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b6:	f003 0302 	and.w	r3, r3, #2
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00a      	beq.n	80065d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	430a      	orrs	r2, r1
 80065d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d8:	f003 0304 	and.w	r3, r3, #4
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00a      	beq.n	80065f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	430a      	orrs	r2, r1
 80065f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fa:	f003 0308 	and.w	r3, r3, #8
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00a      	beq.n	8006618 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	430a      	orrs	r2, r1
 8006616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661c:	f003 0310 	and.w	r3, r3, #16
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00a      	beq.n	800663a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	430a      	orrs	r2, r1
 8006638:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663e:	f003 0320 	and.w	r3, r3, #32
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00a      	beq.n	800665c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	430a      	orrs	r2, r1
 800665a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006664:	2b00      	cmp	r3, #0
 8006666:	d01a      	beq.n	800669e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	430a      	orrs	r2, r1
 800667c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006682:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006686:	d10a      	bne.n	800669e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	430a      	orrs	r2, r1
 800669c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00a      	beq.n	80066c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	430a      	orrs	r2, r1
 80066be:	605a      	str	r2, [r3, #4]
  }
}
 80066c0:	bf00      	nop
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b086      	sub	sp, #24
 80066d0:	af02      	add	r7, sp, #8
 80066d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066dc:	f7fb fc22 	bl	8001f24 <HAL_GetTick>
 80066e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0308 	and.w	r3, r3, #8
 80066ec:	2b08      	cmp	r3, #8
 80066ee:	d10e      	bne.n	800670e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f82d 	bl	800675e <UART_WaitOnFlagUntilTimeout>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d001      	beq.n	800670e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	e023      	b.n	8006756 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0304 	and.w	r3, r3, #4
 8006718:	2b04      	cmp	r3, #4
 800671a:	d10e      	bne.n	800673a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800671c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006720:	9300      	str	r3, [sp, #0]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f817 	bl	800675e <UART_WaitOnFlagUntilTimeout>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d001      	beq.n	800673a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e00d      	b.n	8006756 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2220      	movs	r2, #32
 800673e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2220      	movs	r2, #32
 8006744:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3710      	adds	r7, #16
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b084      	sub	sp, #16
 8006762:	af00      	add	r7, sp, #0
 8006764:	60f8      	str	r0, [r7, #12]
 8006766:	60b9      	str	r1, [r7, #8]
 8006768:	603b      	str	r3, [r7, #0]
 800676a:	4613      	mov	r3, r2
 800676c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800676e:	e05e      	b.n	800682e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006776:	d05a      	beq.n	800682e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006778:	f7fb fbd4 	bl	8001f24 <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	69ba      	ldr	r2, [r7, #24]
 8006784:	429a      	cmp	r2, r3
 8006786:	d302      	bcc.n	800678e <UART_WaitOnFlagUntilTimeout+0x30>
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d11b      	bne.n	80067c6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800679c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	689a      	ldr	r2, [r3, #8]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f022 0201 	bic.w	r2, r2, #1
 80067ac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2220      	movs	r2, #32
 80067b2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2220      	movs	r2, #32
 80067b8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e043      	b.n	800684e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 0304 	and.w	r3, r3, #4
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d02c      	beq.n	800682e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	69db      	ldr	r3, [r3, #28]
 80067da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067e2:	d124      	bne.n	800682e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067ec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80067fc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	689a      	ldr	r2, [r3, #8]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f022 0201 	bic.w	r2, r2, #1
 800680c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2220      	movs	r2, #32
 8006812:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2220      	movs	r2, #32
 8006818:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2220      	movs	r2, #32
 800681e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e00f      	b.n	800684e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	69da      	ldr	r2, [r3, #28]
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	4013      	ands	r3, r2
 8006838:	68ba      	ldr	r2, [r7, #8]
 800683a:	429a      	cmp	r2, r3
 800683c:	bf0c      	ite	eq
 800683e:	2301      	moveq	r3, #1
 8006840:	2300      	movne	r3, #0
 8006842:	b2db      	uxtb	r3, r3
 8006844:	461a      	mov	r2, r3
 8006846:	79fb      	ldrb	r3, [r7, #7]
 8006848:	429a      	cmp	r2, r3
 800684a:	d091      	beq.n	8006770 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
	...

08006858 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	60b9      	str	r1, [r7, #8]
 8006862:	4613      	mov	r3, r2
 8006864:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	68ba      	ldr	r2, [r7, #8]
 800686a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	88fa      	ldrh	r2, [r7, #6]
 8006870:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2200      	movs	r2, #0
 8006878:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2222      	movs	r2, #34	; 0x22
 8006880:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006886:	2b00      	cmp	r3, #0
 8006888:	d02b      	beq.n	80068e2 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800688e:	4a25      	ldr	r2, [pc, #148]	; (8006924 <UART_Start_Receive_DMA+0xcc>)
 8006890:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006896:	4a24      	ldr	r2, [pc, #144]	; (8006928 <UART_Start_Receive_DMA+0xd0>)
 8006898:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800689e:	4a23      	ldr	r2, [pc, #140]	; (800692c <UART_Start_Receive_DMA+0xd4>)
 80068a0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a6:	2200      	movs	r2, #0
 80068a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	3324      	adds	r3, #36	; 0x24
 80068b4:	4619      	mov	r1, r3
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ba:	461a      	mov	r2, r3
 80068bc:	88fb      	ldrh	r3, [r7, #6]
 80068be:	f7fc f8fe 	bl	8002abe <HAL_DMA_Start_IT>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d00c      	beq.n	80068e2 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2210      	movs	r2, #16
 80068cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2220      	movs	r2, #32
 80068dc:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e01c      	b.n	800691c <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068f8:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	689a      	ldr	r2, [r3, #8]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f042 0201 	orr.w	r2, r2, #1
 8006908:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	689a      	ldr	r2, [r3, #8]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006918:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	080069b9 	.word	0x080069b9
 8006928:	08006a4b 	.word	0x08006a4b
 800692c:	08006a83 	.word	0x08006a83

08006930 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006946:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2220      	movs	r2, #32
 800694c:	679a      	str	r2, [r3, #120]	; 0x78
}
 800694e:	bf00      	nop
 8006950:	370c      	adds	r7, #12
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr

0800695a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800695a:	b480      	push	{r7}
 800695c:	b083      	sub	sp, #12
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006970:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	689a      	ldr	r2, [r3, #8]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f022 0201 	bic.w	r2, r2, #1
 8006980:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006986:	2b01      	cmp	r3, #1
 8006988:	d107      	bne.n	800699a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f022 0210 	bic.w	r2, r2, #16
 8006998:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2220      	movs	r2, #32
 800699e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	665a      	str	r2, [r3, #100]	; 0x64
}
 80069ac:	bf00      	nop
 80069ae:	370c      	adds	r7, #12
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c4:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	2b20      	cmp	r3, #32
 80069cc:	d02a      	beq.n	8006a24 <UART_DMAReceiveCplt+0x6c>
  {
    huart->RxXferCount = 0U;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069e4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	689a      	ldr	r2, [r3, #8]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f022 0201 	bic.w	r2, r2, #1
 80069f4:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	689a      	ldr	r2, [r3, #8]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a04:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2220      	movs	r2, #32
 8006a0a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d107      	bne.n	8006a24 <UART_DMAReceiveCplt+0x6c>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f022 0210 	bic.w	r2, r2, #16
 8006a22:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d107      	bne.n	8006a3c <UART_DMAReceiveCplt+0x84>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006a32:	4619      	mov	r1, r3
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f7ff fc20 	bl	800627a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006a3a:	e002      	b.n	8006a42 <UART_DMAReceiveCplt+0x8a>
    HAL_UART_RxCpltCallback(huart);
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f7fa fc21 	bl	8001284 <HAL_UART_RxCpltCallback>
}
 8006a42:	bf00      	nop
 8006a44:	3710      	adds	r7, #16
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}

08006a4a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006a4a:	b580      	push	{r7, lr}
 8006a4c:	b084      	sub	sp, #16
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a56:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d109      	bne.n	8006a74 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006a66:	085b      	lsrs	r3, r3, #1
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f7ff fc04 	bl	800627a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006a72:	e002      	b.n	8006a7a <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f7ff fbec 	bl	8006252 <HAL_UART_RxHalfCpltCallback>
}
 8006a7a:	bf00      	nop
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b086      	sub	sp, #24
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a94:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a9a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aa6:	2b80      	cmp	r3, #128	; 0x80
 8006aa8:	d109      	bne.n	8006abe <UART_DMAError+0x3c>
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	2b21      	cmp	r3, #33	; 0x21
 8006aae:	d106      	bne.n	8006abe <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8006ab8:	6978      	ldr	r0, [r7, #20]
 8006aba:	f7ff ff39 	bl	8006930 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac8:	2b40      	cmp	r3, #64	; 0x40
 8006aca:	d109      	bne.n	8006ae0 <UART_DMAError+0x5e>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2b22      	cmp	r3, #34	; 0x22
 8006ad0:	d106      	bne.n	8006ae0 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006ada:	6978      	ldr	r0, [r7, #20]
 8006adc:	f7ff ff3d 	bl	800695a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ae6:	f043 0210 	orr.w	r2, r3, #16
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006af0:	6978      	ldr	r0, [r7, #20]
 8006af2:	f7ff fbb8 	bl	8006266 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006af6:	bf00      	nop
 8006af8:	3718      	adds	r7, #24
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
	...

08006b00 <__libc_init_array>:
 8006b00:	b570      	push	{r4, r5, r6, lr}
 8006b02:	4e0d      	ldr	r6, [pc, #52]	; (8006b38 <__libc_init_array+0x38>)
 8006b04:	4c0d      	ldr	r4, [pc, #52]	; (8006b3c <__libc_init_array+0x3c>)
 8006b06:	1ba4      	subs	r4, r4, r6
 8006b08:	10a4      	asrs	r4, r4, #2
 8006b0a:	2500      	movs	r5, #0
 8006b0c:	42a5      	cmp	r5, r4
 8006b0e:	d109      	bne.n	8006b24 <__libc_init_array+0x24>
 8006b10:	4e0b      	ldr	r6, [pc, #44]	; (8006b40 <__libc_init_array+0x40>)
 8006b12:	4c0c      	ldr	r4, [pc, #48]	; (8006b44 <__libc_init_array+0x44>)
 8006b14:	f000 f820 	bl	8006b58 <_init>
 8006b18:	1ba4      	subs	r4, r4, r6
 8006b1a:	10a4      	asrs	r4, r4, #2
 8006b1c:	2500      	movs	r5, #0
 8006b1e:	42a5      	cmp	r5, r4
 8006b20:	d105      	bne.n	8006b2e <__libc_init_array+0x2e>
 8006b22:	bd70      	pop	{r4, r5, r6, pc}
 8006b24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b28:	4798      	blx	r3
 8006b2a:	3501      	adds	r5, #1
 8006b2c:	e7ee      	b.n	8006b0c <__libc_init_array+0xc>
 8006b2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b32:	4798      	blx	r3
 8006b34:	3501      	adds	r5, #1
 8006b36:	e7f2      	b.n	8006b1e <__libc_init_array+0x1e>
 8006b38:	08006ba8 	.word	0x08006ba8
 8006b3c:	08006ba8 	.word	0x08006ba8
 8006b40:	08006ba8 	.word	0x08006ba8
 8006b44:	08006bac 	.word	0x08006bac

08006b48 <memset>:
 8006b48:	4402      	add	r2, r0
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d100      	bne.n	8006b52 <memset+0xa>
 8006b50:	4770      	bx	lr
 8006b52:	f803 1b01 	strb.w	r1, [r3], #1
 8006b56:	e7f9      	b.n	8006b4c <memset+0x4>

08006b58 <_init>:
 8006b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b5a:	bf00      	nop
 8006b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b5e:	bc08      	pop	{r3}
 8006b60:	469e      	mov	lr, r3
 8006b62:	4770      	bx	lr

08006b64 <_fini>:
 8006b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b66:	bf00      	nop
 8006b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b6a:	bc08      	pop	{r3}
 8006b6c:	469e      	mov	lr, r3
 8006b6e:	4770      	bx	lr
