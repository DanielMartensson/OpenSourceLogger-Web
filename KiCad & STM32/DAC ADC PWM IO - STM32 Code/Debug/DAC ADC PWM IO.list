
DAC ADC PWM IO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006978  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006b00  08006b00  00016b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b38  08006b38  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006b38  08006b38  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006b38  08006b38  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b38  08006b38  00016b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b3c  08006b3c  00016b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006b40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000470  20000010  08006b50  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000480  08006b50  00020480  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000130ec  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002bb3  00000000  00000000  0003312c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013e0  00000000  00000000  00035ce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012a8  00000000  00000000  000370c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cbf4  00000000  00000000  00038368  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010a4d  00000000  00000000  00054f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000aad51  00000000  00000000  000659a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001106fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053b4  00000000  00000000  00110778  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006ae8 	.word	0x08006ae8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08006ae8 	.word	0x08006ae8

080001c8 <erase>:

//Private variables
// sector start address
static uint32_t memory_address;

static void erase(){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 80001ce:	f002 fe1b 	bl	8002e08 <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef pEraseInit;
	pEraseInit.NbPages = 1;
 80001d2:	2301      	movs	r3, #1
 80001d4:	60fb      	str	r3, [r7, #12]
	pEraseInit.PageAddress = memory_address;
 80001d6:	4b09      	ldr	r3, [pc, #36]	; (80001fc <erase+0x34>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	60bb      	str	r3, [r7, #8]
	pEraseInit.TypeErase = TYPEERASE_PAGES;
 80001dc:	2300      	movs	r3, #0
 80001de:	607b      	str	r3, [r7, #4]
	uint32_t PageError = 0;
 80001e0:	2300      	movs	r3, #0
 80001e2:	603b      	str	r3, [r7, #0]
	HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 80001e4:	463a      	mov	r2, r7
 80001e6:	1d3b      	adds	r3, r7, #4
 80001e8:	4611      	mov	r1, r2
 80001ea:	4618      	mov	r0, r3
 80001ec:	f002 fed0 	bl	8002f90 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 80001f0:	f002 fe30 	bl	8002e54 <HAL_FLASH_Lock>
}
 80001f4:	bf00      	nop
 80001f6:	3710      	adds	r7, #16
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	2000002c 	.word	0x2000002c

08000200 <FlashSetAddrs>:

// Set memory address
void FlashSetAddrs(uint32_t address) {
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
	memory_address = address;
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <FlashSetAddrs+0x1c>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	6013      	str	r3, [r2, #0]
}
 800020e:	bf00      	nop
 8000210:	370c      	adds	r7, #12
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	2000002c 	.word	0x2000002c

08000220 <FlashWriteN>:

// Write Flash
void FlashWriteN(uint32_t idx, void *wrBuf, uint32_t Nsize, DataTypeDef dataType) {
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b08d      	sub	sp, #52	; 0x34
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	607a      	str	r2, [r7, #4]
 800022c:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = memory_address + idx;
 800022e:	4b4e      	ldr	r3, [pc, #312]	; (8000368 <FlashWriteN+0x148>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	68fa      	ldr	r2, [r7, #12]
 8000234:	4413      	add	r3, r2
 8000236:	62fb      	str	r3, [r7, #44]	; 0x2c

	// Need to erase page first!
	erase();
 8000238:	f7ff ffc6 	bl	80001c8 <erase>
	// Converter
	Convert convert;
	uint32_t wrBuf2[1];

	//Unlock Flash
	HAL_FLASH_Unlock();
 800023c:	f002 fde4 	bl	8002e08 <HAL_FLASH_Unlock>
	//Write to Flash
	switch (dataType) {
 8000240:	78fb      	ldrb	r3, [r7, #3]
 8000242:	2b03      	cmp	r3, #3
 8000244:	f200 8089 	bhi.w	800035a <FlashWriteN+0x13a>
 8000248:	a201      	add	r2, pc, #4	; (adr r2, 8000250 <FlashWriteN+0x30>)
 800024a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800024e:	bf00      	nop
 8000250:	08000261 	.word	0x08000261
 8000254:	08000295 	.word	0x08000295
 8000258:	080002cd 	.word	0x080002cd
 800025c:	08000303 	.word	0x08000303
	case DATA_TYPE_U64:
		for (uint32_t i = 0; i < Nsize; i++) {
 8000260:	2300      	movs	r3, #0
 8000262:	62bb      	str	r3, [r7, #40]	; 0x28
 8000264:	e011      	b.n	800028a <FlashWriteN+0x6a>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, flashAddress, ((uint64_t*) wrBuf)[i]);
 8000266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000268:	00db      	lsls	r3, r3, #3
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	4413      	add	r3, r2
 800026e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000272:	461a      	mov	r2, r3
 8000274:	4623      	mov	r3, r4
 8000276:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000278:	2003      	movs	r0, #3
 800027a:	f002 fd55 	bl	8002d28 <HAL_FLASH_Program>
			flashAddress += 8;
 800027e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000280:	3308      	adds	r3, #8
 8000282:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (uint32_t i = 0; i < Nsize; i++) {
 8000284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000286:	3301      	adds	r3, #1
 8000288:	62bb      	str	r3, [r7, #40]	; 0x28
 800028a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	429a      	cmp	r2, r3
 8000290:	d3e9      	bcc.n	8000266 <FlashWriteN+0x46>
		}
		break;
 8000292:	e062      	b.n	800035a <FlashWriteN+0x13a>

	case DATA_TYPE_U16:
		for (uint32_t i = 0; i < Nsize; i++) {
 8000294:	2300      	movs	r3, #0
 8000296:	627b      	str	r3, [r7, #36]	; 0x24
 8000298:	e013      	b.n	80002c2 <FlashWriteN+0xa2>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, flashAddress, ((uint16_t*) wrBuf)[i]);
 800029a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800029c:	005b      	lsls	r3, r3, #1
 800029e:	68ba      	ldr	r2, [r7, #8]
 80002a0:	4413      	add	r3, r2
 80002a2:	881b      	ldrh	r3, [r3, #0]
 80002a4:	b29b      	uxth	r3, r3
 80002a6:	f04f 0400 	mov.w	r4, #0
 80002aa:	461a      	mov	r2, r3
 80002ac:	4623      	mov	r3, r4
 80002ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80002b0:	2001      	movs	r0, #1
 80002b2:	f002 fd39 	bl	8002d28 <HAL_FLASH_Program>
			flashAddress += 2;
 80002b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002b8:	3302      	adds	r3, #2
 80002ba:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (uint32_t i = 0; i < Nsize; i++) {
 80002bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002be:	3301      	adds	r3, #1
 80002c0:	627b      	str	r3, [r7, #36]	; 0x24
 80002c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	429a      	cmp	r2, r3
 80002c8:	d3e7      	bcc.n	800029a <FlashWriteN+0x7a>
		}
		break;
 80002ca:	e046      	b.n	800035a <FlashWriteN+0x13a>

	case DATA_TYPE_U32:
		for (uint32_t i = 0; i < Nsize; i++) {
 80002cc:	2300      	movs	r3, #0
 80002ce:	623b      	str	r3, [r7, #32]
 80002d0:	e012      	b.n	80002f8 <FlashWriteN+0xd8>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddress, ((uint32_t*) wrBuf)[i]);
 80002d2:	6a3b      	ldr	r3, [r7, #32]
 80002d4:	009b      	lsls	r3, r3, #2
 80002d6:	68ba      	ldr	r2, [r7, #8]
 80002d8:	4413      	add	r3, r2
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	f04f 0400 	mov.w	r4, #0
 80002e0:	461a      	mov	r2, r3
 80002e2:	4623      	mov	r3, r4
 80002e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80002e6:	2002      	movs	r0, #2
 80002e8:	f002 fd1e 	bl	8002d28 <HAL_FLASH_Program>
			flashAddress += 4;
 80002ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002ee:	3304      	adds	r3, #4
 80002f0:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (uint32_t i = 0; i < Nsize; i++) {
 80002f2:	6a3b      	ldr	r3, [r7, #32]
 80002f4:	3301      	adds	r3, #1
 80002f6:	623b      	str	r3, [r7, #32]
 80002f8:	6a3a      	ldr	r2, [r7, #32]
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	429a      	cmp	r2, r3
 80002fe:	d3e8      	bcc.n	80002d2 <FlashWriteN+0xb2>
		}
		break;
 8000300:	e02b      	b.n	800035a <FlashWriteN+0x13a>

	case DATA_TYPE_FLOAT:
		for (uint32_t i = 0; i < Nsize; i++) {
 8000302:	2300      	movs	r3, #0
 8000304:	61fb      	str	r3, [r7, #28]
 8000306:	e023      	b.n	8000350 <FlashWriteN+0x130>
			// Convert float -> uint8_t
			convert.float_value = ((float*) wrBuf)[i];
 8000308:	69fb      	ldr	r3, [r7, #28]
 800030a:	009b      	lsls	r3, r3, #2
 800030c:	68ba      	ldr	r2, [r7, #8]
 800030e:	4413      	add	r3, r2
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	61bb      	str	r3, [r7, #24]
			// Turn it to uint32_t
			wrBuf2[0] = convert.uint8_values[0] << 24 | convert.uint8_values[1] << 16 | convert.uint8_values[2] << 8 || convert.uint8_values[3];
 8000314:	7e3b      	ldrb	r3, [r7, #24]
 8000316:	061a      	lsls	r2, r3, #24
 8000318:	7e7b      	ldrb	r3, [r7, #25]
 800031a:	041b      	lsls	r3, r3, #16
 800031c:	431a      	orrs	r2, r3
 800031e:	7ebb      	ldrb	r3, [r7, #26]
 8000320:	021b      	lsls	r3, r3, #8
 8000322:	4313      	orrs	r3, r2
 8000324:	2b00      	cmp	r3, #0
 8000326:	d102      	bne.n	800032e <FlashWriteN+0x10e>
 8000328:	7efb      	ldrb	r3, [r7, #27]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <FlashWriteN+0x112>
 800032e:	2301      	movs	r3, #1
 8000330:	e000      	b.n	8000334 <FlashWriteN+0x114>
 8000332:	2300      	movs	r3, #0
 8000334:	617b      	str	r3, [r7, #20]
			// Write the uint32_t byte
			FlashWriteN(idx + 4*i, wrBuf2, 1, DATA_TYPE_U32);
 8000336:	69fb      	ldr	r3, [r7, #28]
 8000338:	009a      	lsls	r2, r3, #2
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	18d0      	adds	r0, r2, r3
 800033e:	f107 0114 	add.w	r1, r7, #20
 8000342:	2302      	movs	r3, #2
 8000344:	2201      	movs	r2, #1
 8000346:	f7ff ff6b 	bl	8000220 <FlashWriteN>
		for (uint32_t i = 0; i < Nsize; i++) {
 800034a:	69fb      	ldr	r3, [r7, #28]
 800034c:	3301      	adds	r3, #1
 800034e:	61fb      	str	r3, [r7, #28]
 8000350:	69fa      	ldr	r2, [r7, #28]
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	429a      	cmp	r2, r3
 8000356:	d3d7      	bcc.n	8000308 <FlashWriteN+0xe8>
		}
		break;
 8000358:	bf00      	nop
	}
	//Lock the Flash space
	HAL_FLASH_Lock();
 800035a:	f002 fd7b 	bl	8002e54 <HAL_FLASH_Lock>
}
 800035e:	bf00      	nop
 8000360:	3734      	adds	r7, #52	; 0x34
 8000362:	46bd      	mov	sp, r7
 8000364:	bd90      	pop	{r4, r7, pc}
 8000366:	bf00      	nop
 8000368:	2000002c 	.word	0x2000002c

0800036c <FlashReadN>:
//4. Read Flash
void FlashReadN(uint32_t idx, void *rdBuf, uint32_t Nsize, DataTypeDef dataType) {
 800036c:	b590      	push	{r4, r7, lr}
 800036e:	b08d      	sub	sp, #52	; 0x34
 8000370:	af00      	add	r7, sp, #0
 8000372:	60f8      	str	r0, [r7, #12]
 8000374:	60b9      	str	r1, [r7, #8]
 8000376:	607a      	str	r2, [r7, #4]
 8000378:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = memory_address + idx;
 800037a:	4b41      	ldr	r3, [pc, #260]	; (8000480 <FlashReadN+0x114>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	68fa      	ldr	r2, [r7, #12]
 8000380:	4413      	add	r3, r2
 8000382:	62fb      	str	r3, [r7, #44]	; 0x2c

	// Converter
	Convert convert;
	uint32_t rdBuf2[1];

	switch (dataType) {
 8000384:	78fb      	ldrb	r3, [r7, #3]
 8000386:	2b03      	cmp	r3, #3
 8000388:	d875      	bhi.n	8000476 <FlashReadN+0x10a>
 800038a:	a201      	add	r2, pc, #4	; (adr r2, 8000390 <FlashReadN+0x24>)
 800038c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000390:	080003a1 	.word	0x080003a1
 8000394:	080003cf 	.word	0x080003cf
 8000398:	080003f9 	.word	0x080003f9
 800039c:	08000423 	.word	0x08000423
	case DATA_TYPE_U64:
		for (uint32_t i = 0; i < Nsize; i++) {
 80003a0:	2300      	movs	r3, #0
 80003a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80003a4:	e00e      	b.n	80003c4 <FlashReadN+0x58>
			*((uint64_t*) rdBuf + i) = *(uint64_t*) flashAddress;
 80003a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80003aa:	00d2      	lsls	r2, r2, #3
 80003ac:	68b9      	ldr	r1, [r7, #8]
 80003ae:	440a      	add	r2, r1
 80003b0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80003b4:	e9c2 3400 	strd	r3, r4, [r2]
			flashAddress += 8;
 80003b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003ba:	3308      	adds	r3, #8
 80003bc:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (uint32_t i = 0; i < Nsize; i++) {
 80003be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003c0:	3301      	adds	r3, #1
 80003c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80003c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	429a      	cmp	r2, r3
 80003ca:	d3ec      	bcc.n	80003a6 <FlashReadN+0x3a>
		}
		break;
 80003cc:	e053      	b.n	8000476 <FlashReadN+0x10a>

	case DATA_TYPE_U16:
		for (uint32_t i = 0; i < Nsize; i++) {
 80003ce:	2300      	movs	r3, #0
 80003d0:	627b      	str	r3, [r7, #36]	; 0x24
 80003d2:	e00c      	b.n	80003ee <FlashReadN+0x82>
			*((uint16_t*) rdBuf + i) = *(uint16_t*) flashAddress;
 80003d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80003d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003d8:	005b      	lsls	r3, r3, #1
 80003da:	68b9      	ldr	r1, [r7, #8]
 80003dc:	440b      	add	r3, r1
 80003de:	8812      	ldrh	r2, [r2, #0]
 80003e0:	801a      	strh	r2, [r3, #0]
			flashAddress += 2;
 80003e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003e4:	3302      	adds	r3, #2
 80003e6:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (uint32_t i = 0; i < Nsize; i++) {
 80003e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003ea:	3301      	adds	r3, #1
 80003ec:	627b      	str	r3, [r7, #36]	; 0x24
 80003ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	429a      	cmp	r2, r3
 80003f4:	d3ee      	bcc.n	80003d4 <FlashReadN+0x68>
		}
		break;
 80003f6:	e03e      	b.n	8000476 <FlashReadN+0x10a>

	case DATA_TYPE_U32:
		for (uint32_t i = 0; i < Nsize; i++) {
 80003f8:	2300      	movs	r3, #0
 80003fa:	623b      	str	r3, [r7, #32]
 80003fc:	e00c      	b.n	8000418 <FlashReadN+0xac>
			*((uint32_t*) rdBuf + i) = *(uint32_t*) flashAddress;
 80003fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000400:	6a3b      	ldr	r3, [r7, #32]
 8000402:	009b      	lsls	r3, r3, #2
 8000404:	68b9      	ldr	r1, [r7, #8]
 8000406:	440b      	add	r3, r1
 8000408:	6812      	ldr	r2, [r2, #0]
 800040a:	601a      	str	r2, [r3, #0]
			flashAddress += 4;
 800040c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800040e:	3304      	adds	r3, #4
 8000410:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (uint32_t i = 0; i < Nsize; i++) {
 8000412:	6a3b      	ldr	r3, [r7, #32]
 8000414:	3301      	adds	r3, #1
 8000416:	623b      	str	r3, [r7, #32]
 8000418:	6a3a      	ldr	r2, [r7, #32]
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	429a      	cmp	r2, r3
 800041e:	d3ee      	bcc.n	80003fe <FlashReadN+0x92>
		}
		break;
 8000420:	e029      	b.n	8000476 <FlashReadN+0x10a>

	case DATA_TYPE_FLOAT:
		for (uint32_t i = 0; i < Nsize; i++) {
 8000422:	2300      	movs	r3, #0
 8000424:	61fb      	str	r3, [r7, #28]
 8000426:	e021      	b.n	800046c <FlashReadN+0x100>
			// Read the uint32_t byte
			FlashReadN(idx + 4 * i, rdBuf2, 1, DATA_TYPE_U32);
 8000428:	69fb      	ldr	r3, [r7, #28]
 800042a:	009a      	lsls	r2, r3, #2
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	18d0      	adds	r0, r2, r3
 8000430:	f107 0114 	add.w	r1, r7, #20
 8000434:	2302      	movs	r3, #2
 8000436:	2201      	movs	r2, #1
 8000438:	f7ff ff98 	bl	800036c <FlashReadN>
			// Convert uint32_t -> float
			convert.uint8_values[0] = rdBuf2[0] >> 24;
 800043c:	697b      	ldr	r3, [r7, #20]
 800043e:	0e1b      	lsrs	r3, r3, #24
 8000440:	b2db      	uxtb	r3, r3
 8000442:	763b      	strb	r3, [r7, #24]
			convert.uint8_values[1] = rdBuf2[1] >> 16;
 8000444:	69bb      	ldr	r3, [r7, #24]
 8000446:	0c1b      	lsrs	r3, r3, #16
 8000448:	b2db      	uxtb	r3, r3
 800044a:	767b      	strb	r3, [r7, #25]
			convert.uint8_values[2] = rdBuf2[2] >> 8;
 800044c:	69fb      	ldr	r3, [r7, #28]
 800044e:	0a1b      	lsrs	r3, r3, #8
 8000450:	b2db      	uxtb	r3, r3
 8000452:	76bb      	strb	r3, [r7, #26]
			convert.uint8_values[3] = rdBuf2[3];
 8000454:	6a3b      	ldr	r3, [r7, #32]
 8000456:	b2db      	uxtb	r3, r3
 8000458:	76fb      	strb	r3, [r7, #27]
			*((float*) rdBuf + i) = convert.float_value;
 800045a:	69fb      	ldr	r3, [r7, #28]
 800045c:	009b      	lsls	r3, r3, #2
 800045e:	68ba      	ldr	r2, [r7, #8]
 8000460:	4413      	add	r3, r2
 8000462:	69ba      	ldr	r2, [r7, #24]
 8000464:	601a      	str	r2, [r3, #0]
		for (uint32_t i = 0; i < Nsize; i++) {
 8000466:	69fb      	ldr	r3, [r7, #28]
 8000468:	3301      	adds	r3, #1
 800046a:	61fb      	str	r3, [r7, #28]
 800046c:	69fa      	ldr	r2, [r7, #28]
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	429a      	cmp	r2, r3
 8000472:	d3d9      	bcc.n	8000428 <FlashReadN+0xbc>
		}
		break;
 8000474:	bf00      	nop
	}
}
 8000476:	bf00      	nop
 8000478:	3734      	adds	r7, #52	; 0x34
 800047a:	46bd      	mov	sp, r7
 800047c:	bd90      	pop	{r4, r7, pc}
 800047e:	bf00      	nop
 8000480:	2000002c 	.word	0x2000002c

08000484 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800048a:	f001 fcb9 	bl	8001e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800048e:	f000 f911 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000492:	f000 fe71 	bl	8001178 <MX_GPIO_Init>
  MX_DMA_Init();
 8000496:	f000 fe49 	bl	800112c <MX_DMA_Init>
  MX_ADC1_Init();
 800049a:	f000 f969 	bl	8000770 <MX_ADC1_Init>
  MX_DAC1_Init();
 800049e:	f000 f9cf 	bl	8000840 <MX_DAC1_Init>
  MX_DAC2_Init();
 80004a2:	f000 fa03 	bl	80008ac <MX_DAC2_Init>
  MX_SDADC1_Init();
 80004a6:	f000 fa2b 	bl	8000900 <MX_SDADC1_Init>
  MX_SDADC3_Init();
 80004aa:	f000 fadd 	bl	8000a68 <MX_SDADC3_Init>
  MX_TIM2_Init();
 80004ae:	f000 fb79 	bl	8000ba4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80004b2:	f000 fbed 	bl	8000c90 <MX_TIM3_Init>
  MX_TIM4_Init();
 80004b6:	f000 fc6d 	bl	8000d94 <MX_TIM4_Init>
  MX_TIM5_Init();
 80004ba:	f000 fcf7 	bl	8000eac <MX_TIM5_Init>
  MX_USART1_UART_Init();
 80004be:	f000 fe05 	bl	80010cc <MX_USART1_UART_Init>
  MX_TIM19_Init();
 80004c2:	f000 fdb5 	bl	8001030 <MX_TIM19_Init>
  MX_TIM6_Init();
 80004c6:	f000 fd7d 	bl	8000fc4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

	// DMA UART
	uint8_t RX_DATA_element_size = sizeof(RX_DATA);
 80004ca:	2319      	movs	r3, #25
 80004cc:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Receive_DMA(&huart1, RX_DATA, RX_DATA_element_size);
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	b29b      	uxth	r3, r3
 80004d2:	461a      	mov	r2, r3
 80004d4:	4962      	ldr	r1, [pc, #392]	; (8000660 <main+0x1dc>)
 80004d6:	4863      	ldr	r0, [pc, #396]	; (8000664 <main+0x1e0>)
 80004d8:	f005 fe46 	bl	8006168 <HAL_UART_Receive_DMA>

	// TIM Trig
	HAL_TIM_Base_Start(&htim6); // For DAC
 80004dc:	4862      	ldr	r0, [pc, #392]	; (8000668 <main+0x1e4>)
 80004de:	f004 ff41 	bl	8005364 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim19); // For ADC
 80004e2:	4862      	ldr	r0, [pc, #392]	; (800066c <main+0x1e8>)
 80004e4:	f004 ff3e 	bl	8005364 <HAL_TIM_Base_Start>

	// DMA ADC
	uint8_t ADC_element_size = sizeof(ADC_VALUES) / sizeof(ADC_VALUES[0]);
 80004e8:	2304      	movs	r3, #4
 80004ea:	71bb      	strb	r3, [r7, #6]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC_VALUES, ADC_element_size);
 80004ec:	79bb      	ldrb	r3, [r7, #6]
 80004ee:	461a      	mov	r2, r3
 80004f0:	495f      	ldr	r1, [pc, #380]	; (8000670 <main+0x1ec>)
 80004f2:	4860      	ldr	r0, [pc, #384]	; (8000674 <main+0x1f0>)
 80004f4:	f001 fe02 	bl	80020fc <HAL_ADC_Start_DMA>

	// IT SD ADC
	HAL_SDADC_Start_IT(&hsdadc1);
 80004f8:	485f      	ldr	r0, [pc, #380]	; (8000678 <main+0x1f4>)
 80004fa:	f004 fcaa 	bl	8004e52 <HAL_SDADC_Start_IT>
	HAL_SDADC_Start_IT(&hsdadc3);
 80004fe:	485f      	ldr	r0, [pc, #380]	; (800067c <main+0x1f8>)
 8000500:	f004 fca7 	bl	8004e52 <HAL_SDADC_Start_IT>

	// DAC
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 8000504:	2100      	movs	r1, #0
 8000506:	485e      	ldr	r0, [pc, #376]	; (8000680 <main+0x1fc>)
 8000508:	f002 f9c2 	bl	8002890 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 800050c:	2110      	movs	r1, #16
 800050e:	485c      	ldr	r0, [pc, #368]	; (8000680 <main+0x1fc>)
 8000510:	f002 f9be 	bl	8002890 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac2, DAC1_CHANNEL_1);
 8000514:	2100      	movs	r1, #0
 8000516:	485b      	ldr	r0, [pc, #364]	; (8000684 <main+0x200>)
 8000518:	f002 f9ba 	bl	8002890 <HAL_DAC_Start>

	// PWM
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800051c:	2100      	movs	r1, #0
 800051e:	485a      	ldr	r0, [pc, #360]	; (8000688 <main+0x204>)
 8000520:	f004 ffda 	bl	80054d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000524:	2100      	movs	r1, #0
 8000526:	4859      	ldr	r0, [pc, #356]	; (800068c <main+0x208>)
 8000528:	f004 ffd6 	bl	80054d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800052c:	2104      	movs	r1, #4
 800052e:	4857      	ldr	r0, [pc, #348]	; (800068c <main+0x208>)
 8000530:	f004 ffd2 	bl	80054d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000534:	2100      	movs	r1, #0
 8000536:	4856      	ldr	r0, [pc, #344]	; (8000690 <main+0x20c>)
 8000538:	f004 ffce 	bl	80054d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800053c:	2104      	movs	r1, #4
 800053e:	4854      	ldr	r0, [pc, #336]	; (8000690 <main+0x20c>)
 8000540:	f004 ffca 	bl	80054d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000544:	210c      	movs	r1, #12
 8000546:	4852      	ldr	r0, [pc, #328]	; (8000690 <main+0x20c>)
 8000548:	f004 ffc6 	bl	80054d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 800054c:	2100      	movs	r1, #0
 800054e:	4851      	ldr	r0, [pc, #324]	; (8000694 <main+0x210>)
 8000550:	f004 ffc2 	bl	80054d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8000554:	2104      	movs	r1, #4
 8000556:	484f      	ldr	r0, [pc, #316]	; (8000694 <main+0x210>)
 8000558:	f004 ffbe 	bl	80054d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 800055c:	2108      	movs	r1, #8
 800055e:	484d      	ldr	r0, [pc, #308]	; (8000694 <main+0x210>)
 8000560:	f004 ffba 	bl	80054d8 <HAL_TIM_PWM_Start>

	// Set the PWM timers
	FlashSetAddrs(0x0803F800);
 8000564:	484c      	ldr	r0, [pc, #304]	; (8000698 <main+0x214>)
 8000566:	f7ff fe4b 	bl	8000200 <FlashSetAddrs>
	read_PWM_TIM_prescalers_from_memory();
 800056a:	f000 ffe5 	bl	8001538 <read_PWM_TIM_prescalers_from_memory>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		// TIM 2
		htim2.Instance->CCR1 = PWM_PERIOD[4]; // P4
 800056e:	4b4b      	ldr	r3, [pc, #300]	; (800069c <main+0x218>)
 8000570:	891a      	ldrh	r2, [r3, #8]
 8000572:	4b45      	ldr	r3, [pc, #276]	; (8000688 <main+0x204>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	635a      	str	r2, [r3, #52]	; 0x34
		// TIM 3
		htim3.Instance->CCR1 = PWM_PERIOD[5]; // P5
 8000578:	4b48      	ldr	r3, [pc, #288]	; (800069c <main+0x218>)
 800057a:	895a      	ldrh	r2, [r3, #10]
 800057c:	4b43      	ldr	r3, [pc, #268]	; (800068c <main+0x208>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	635a      	str	r2, [r3, #52]	; 0x34
		htim3.Instance->CCR2 = PWM_PERIOD[6]; // P6
 8000582:	4b46      	ldr	r3, [pc, #280]	; (800069c <main+0x218>)
 8000584:	899a      	ldrh	r2, [r3, #12]
 8000586:	4b41      	ldr	r3, [pc, #260]	; (800068c <main+0x208>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	639a      	str	r2, [r3, #56]	; 0x38
		// TIM 4
		htim4.Instance->CCR1 = PWM_PERIOD[7]; // P7
 800058c:	4b43      	ldr	r3, [pc, #268]	; (800069c <main+0x218>)
 800058e:	89da      	ldrh	r2, [r3, #14]
 8000590:	4b3f      	ldr	r3, [pc, #252]	; (8000690 <main+0x20c>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	635a      	str	r2, [r3, #52]	; 0x34
		htim4.Instance->CCR2 = PWM_PERIOD[8]; // P8
 8000596:	4b41      	ldr	r3, [pc, #260]	; (800069c <main+0x218>)
 8000598:	8a1a      	ldrh	r2, [r3, #16]
 800059a:	4b3d      	ldr	r3, [pc, #244]	; (8000690 <main+0x20c>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	639a      	str	r2, [r3, #56]	; 0x38
		htim4.Instance->CCR4 = PWM_PERIOD[3]; // P3
 80005a0:	4b3e      	ldr	r3, [pc, #248]	; (800069c <main+0x218>)
 80005a2:	88da      	ldrh	r2, [r3, #6]
 80005a4:	4b3a      	ldr	r3, [pc, #232]	; (8000690 <main+0x20c>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	641a      	str	r2, [r3, #64]	; 0x40
		// TIM 5
		htim5.Instance->CCR1 = PWM_PERIOD[0]; // P0
 80005aa:	4b3c      	ldr	r3, [pc, #240]	; (800069c <main+0x218>)
 80005ac:	881a      	ldrh	r2, [r3, #0]
 80005ae:	4b39      	ldr	r3, [pc, #228]	; (8000694 <main+0x210>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	635a      	str	r2, [r3, #52]	; 0x34
		htim5.Instance->CCR2 = PWM_PERIOD[1]; // P1
 80005b4:	4b39      	ldr	r3, [pc, #228]	; (800069c <main+0x218>)
 80005b6:	885a      	ldrh	r2, [r3, #2]
 80005b8:	4b36      	ldr	r3, [pc, #216]	; (8000694 <main+0x210>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	639a      	str	r2, [r3, #56]	; 0x38
		htim5.Instance->CCR3 = PWM_PERIOD[2]; // P2
 80005be:	4b37      	ldr	r3, [pc, #220]	; (800069c <main+0x218>)
 80005c0:	889a      	ldrh	r2, [r3, #4]
 80005c2:	4b34      	ldr	r3, [pc, #208]	; (8000694 <main+0x210>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	63da      	str	r2, [r3, #60]	; 0x3c
		// DAC 1
		HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUTPUT[2]); // D2
 80005c8:	4b35      	ldr	r3, [pc, #212]	; (80006a0 <main+0x21c>)
 80005ca:	889b      	ldrh	r3, [r3, #4]
 80005cc:	2200      	movs	r2, #0
 80005ce:	2100      	movs	r1, #0
 80005d0:	482b      	ldr	r0, [pc, #172]	; (8000680 <main+0x1fc>)
 80005d2:	f002 f938 	bl	8002846 <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, DAC_OUTPUT[1]); // D1
 80005d6:	4b32      	ldr	r3, [pc, #200]	; (80006a0 <main+0x21c>)
 80005d8:	885b      	ldrh	r3, [r3, #2]
 80005da:	2200      	movs	r2, #0
 80005dc:	2110      	movs	r1, #16
 80005de:	4828      	ldr	r0, [pc, #160]	; (8000680 <main+0x1fc>)
 80005e0:	f002 f931 	bl	8002846 <HAL_DAC_SetValue>
		// DAC 2
		HAL_DAC_SetValue(&hdac2, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUTPUT[0]); // D0
 80005e4:	4b2e      	ldr	r3, [pc, #184]	; (80006a0 <main+0x21c>)
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	2200      	movs	r2, #0
 80005ea:	2100      	movs	r1, #0
 80005ec:	4825      	ldr	r0, [pc, #148]	; (8000684 <main+0x200>)
 80005ee:	f002 f92a 	bl	8002846 <HAL_DAC_SetValue>
		// DI
		DI_VALUES[0] = HAL_GPIO_ReadPin(INPUT_0_GPIO_Port, INPUT_0_Pin); // I0
 80005f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005f6:	482b      	ldr	r0, [pc, #172]	; (80006a4 <main+0x220>)
 80005f8:	f002 fee8 	bl	80033cc <HAL_GPIO_ReadPin>
 80005fc:	4603      	mov	r3, r0
 80005fe:	b29a      	uxth	r2, r3
 8000600:	4b29      	ldr	r3, [pc, #164]	; (80006a8 <main+0x224>)
 8000602:	801a      	strh	r2, [r3, #0]
		DI_VALUES[1] = HAL_GPIO_ReadPin(INPUT_1_GPIO_Port, INPUT_1_Pin); // I1
 8000604:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000608:	4826      	ldr	r0, [pc, #152]	; (80006a4 <main+0x220>)
 800060a:	f002 fedf 	bl	80033cc <HAL_GPIO_ReadPin>
 800060e:	4603      	mov	r3, r0
 8000610:	b29a      	uxth	r2, r3
 8000612:	4b25      	ldr	r3, [pc, #148]	; (80006a8 <main+0x224>)
 8000614:	805a      	strh	r2, [r3, #2]
		DI_VALUES[2] = HAL_GPIO_ReadPin(INPUT_2_GPIO_Port, INPUT_2_Pin); // I2
 8000616:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800061a:	4822      	ldr	r0, [pc, #136]	; (80006a4 <main+0x220>)
 800061c:	f002 fed6 	bl	80033cc <HAL_GPIO_ReadPin>
 8000620:	4603      	mov	r3, r0
 8000622:	b29a      	uxth	r2, r3
 8000624:	4b20      	ldr	r3, [pc, #128]	; (80006a8 <main+0x224>)
 8000626:	809a      	strh	r2, [r3, #4]
		DI_VALUES[3] = HAL_GPIO_ReadPin(INPUT_3_GPIO_Port, INPUT_3_Pin); // I3
 8000628:	f44f 7100 	mov.w	r1, #512	; 0x200
 800062c:	481f      	ldr	r0, [pc, #124]	; (80006ac <main+0x228>)
 800062e:	f002 fecd 	bl	80033cc <HAL_GPIO_ReadPin>
 8000632:	4603      	mov	r3, r0
 8000634:	b29a      	uxth	r2, r3
 8000636:	4b1c      	ldr	r3, [pc, #112]	; (80006a8 <main+0x224>)
 8000638:	80da      	strh	r2, [r3, #6]
		DI_VALUES[4] = HAL_GPIO_ReadPin(INPUT_4_GPIO_Port, INPUT_4_Pin); // I4
 800063a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800063e:	481b      	ldr	r0, [pc, #108]	; (80006ac <main+0x228>)
 8000640:	f002 fec4 	bl	80033cc <HAL_GPIO_ReadPin>
 8000644:	4603      	mov	r3, r0
 8000646:	b29a      	uxth	r2, r3
 8000648:	4b17      	ldr	r3, [pc, #92]	; (80006a8 <main+0x224>)
 800064a:	811a      	strh	r2, [r3, #8]
		DI_VALUES[5] = HAL_GPIO_ReadPin(INPUT_5_GPIO_Port, INPUT_5_Pin); // I5
 800064c:	2180      	movs	r1, #128	; 0x80
 800064e:	4818      	ldr	r0, [pc, #96]	; (80006b0 <main+0x22c>)
 8000650:	f002 febc 	bl	80033cc <HAL_GPIO_ReadPin>
 8000654:	4603      	mov	r3, r0
 8000656:	b29a      	uxth	r2, r3
 8000658:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <main+0x224>)
 800065a:	815a      	strh	r2, [r3, #10]
		htim2.Instance->CCR1 = PWM_PERIOD[4]; // P4
 800065c:	e787      	b.n	800056e <main+0xea>
 800065e:	bf00      	nop
 8000660:	20000030 	.word	0x20000030
 8000664:	20000274 	.word	0x20000274
 8000668:	20000380 	.word	0x20000380
 800066c:	2000011c 	.word	0x2000011c
 8000670:	20000080 	.word	0x20000080
 8000674:	20000200 	.word	0x20000200
 8000678:	200002f8 	.word	0x200002f8
 800067c:	20000418 	.word	0x20000418
 8000680:	20000108 	.word	0x20000108
 8000684:	200000a8 	.word	0x200000a8
 8000688:	200003cc 	.word	0x200003cc
 800068c:	200001b4 	.word	0x200001b4
 8000690:	200000bc 	.word	0x200000bc
 8000694:	20000168 	.word	0x20000168
 8000698:	0803f800 	.word	0x0803f800
 800069c:	20000064 	.word	0x20000064
 80006a0:	20000078 	.word	0x20000078
 80006a4:	48000800 	.word	0x48000800
 80006a8:	20000094 	.word	0x20000094
 80006ac:	48000400 	.word	0x48000400
 80006b0:	48001400 	.word	0x48001400

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b09a      	sub	sp, #104	; 0x68
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006be:	2228      	movs	r2, #40	; 0x28
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f006 fa08 	bl	8006ad8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006d8:	463b      	mov	r3, r7
 80006da:	222c      	movs	r2, #44	; 0x2c
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f006 f9fa 	bl	8006ad8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e4:	2301      	movs	r3, #1
 80006e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006ee:	2300      	movs	r3, #0
 80006f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006f6:	4618      	mov	r0, r3
 80006f8:	f002 fea0 	bl	800343c <HAL_RCC_OscConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0x52>
  {
    Error_Handler();
 8000702:	f000 ff8b 	bl	800161c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000706:	230f      	movs	r3, #15
 8000708:	62fb      	str	r3, [r7, #44]	; 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800070a:	2301      	movs	r3, #1
 800070c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8000712:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000716:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800071c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f003 fd92 	bl	800424c <HAL_RCC_ClockConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800072e:	f000 ff75 	bl	800161c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC1
 8000732:	f640 0381 	movw	r3, #2177	; 0x881
 8000736:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SDADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000738:	2300      	movs	r3, #0
 800073a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.SdadcClockSelection = RCC_SDADCSYSCLK_DIV4;
 800073c:	f04f 4308 	mov.w	r3, #2281701376	; 0x88000000
 8000740:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PCLK2_DIV2;
 8000742:	2300      	movs	r3, #0
 8000744:	61fb      	str	r3, [r7, #28]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000746:	463b      	mov	r3, r7
 8000748:	4618      	mov	r0, r3
 800074a:	f003 ffb7 	bl	80046bc <HAL_RCCEx_PeriphCLKConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000754:	f000 ff62 	bl	800161c <Error_Handler>
  }
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG1);
 8000758:	f44f 7000 	mov.w	r0, #512	; 0x200
 800075c:	f002 fe4e 	bl	80033fc <HAL_PWREx_EnableSDADC>
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG3);
 8000760:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000764:	f002 fe4a 	bl	80033fc <HAL_PWREx_EnableSDADC>
}
 8000768:	bf00      	nop
 800076a:	3768      	adds	r7, #104	; 0x68
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000780:	4b2d      	ldr	r3, [pc, #180]	; (8000838 <MX_ADC1_Init+0xc8>)
 8000782:	4a2e      	ldr	r2, [pc, #184]	; (800083c <MX_ADC1_Init+0xcc>)
 8000784:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000786:	4b2c      	ldr	r3, [pc, #176]	; (8000838 <MX_ADC1_Init+0xc8>)
 8000788:	f44f 7280 	mov.w	r2, #256	; 0x100
 800078c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800078e:	4b2a      	ldr	r3, [pc, #168]	; (8000838 <MX_ADC1_Init+0xc8>)
 8000790:	2201      	movs	r2, #1
 8000792:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000794:	4b28      	ldr	r3, [pc, #160]	; (8000838 <MX_ADC1_Init+0xc8>)
 8000796:	2200      	movs	r2, #0
 8000798:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T19_TRGO;
 800079a:	4b27      	ldr	r3, [pc, #156]	; (8000838 <MX_ADC1_Init+0xc8>)
 800079c:	2200      	movs	r2, #0
 800079e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007a0:	4b25      	ldr	r3, [pc, #148]	; (8000838 <MX_ADC1_Init+0xc8>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 80007a6:	4b24      	ldr	r3, [pc, #144]	; (8000838 <MX_ADC1_Init+0xc8>)
 80007a8:	2204      	movs	r2, #4
 80007aa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ac:	4822      	ldr	r0, [pc, #136]	; (8000838 <MX_ADC1_Init+0xc8>)
 80007ae:	f001 fbcd 	bl	8001f4c <HAL_ADC_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80007b8:	f000 ff30 	bl	800161c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007bc:	2300      	movs	r3, #0
 80007be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007c0:	2301      	movs	r3, #1
 80007c2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80007c4:	2307      	movs	r3, #7
 80007c6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	4619      	mov	r1, r3
 80007cc:	481a      	ldr	r0, [pc, #104]	; (8000838 <MX_ADC1_Init+0xc8>)
 80007ce:	f001 fd25 	bl	800221c <HAL_ADC_ConfigChannel>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80007d8:	f000 ff20 	bl	800161c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007dc:	2301      	movs	r3, #1
 80007de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007e0:	2302      	movs	r3, #2
 80007e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	4619      	mov	r1, r3
 80007e8:	4813      	ldr	r0, [pc, #76]	; (8000838 <MX_ADC1_Init+0xc8>)
 80007ea:	f001 fd17 	bl	800221c <HAL_ADC_ConfigChannel>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80007f4:	f000 ff12 	bl	800161c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80007f8:	2302      	movs	r3, #2
 80007fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80007fc:	2303      	movs	r3, #3
 80007fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	4619      	mov	r1, r3
 8000804:	480c      	ldr	r0, [pc, #48]	; (8000838 <MX_ADC1_Init+0xc8>)
 8000806:	f001 fd09 	bl	800221c <HAL_ADC_ConfigChannel>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 8000810:	f000 ff04 	bl	800161c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000814:	2303      	movs	r3, #3
 8000816:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000818:	2304      	movs	r3, #4
 800081a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	4619      	mov	r1, r3
 8000820:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_ADC1_Init+0xc8>)
 8000822:	f001 fcfb 	bl	800221c <HAL_ADC_ConfigChannel>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 800082c:	f000 fef6 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000830:	bf00      	nop
 8000832:	3710      	adds	r7, #16
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000200 	.word	0x20000200
 800083c:	40012400 	.word	0x40012400

08000840 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000850:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <MX_DAC1_Init+0x64>)
 8000852:	4a15      	ldr	r2, [pc, #84]	; (80008a8 <MX_DAC1_Init+0x68>)
 8000854:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000856:	4813      	ldr	r0, [pc, #76]	; (80008a4 <MX_DAC1_Init+0x64>)
 8000858:	f001 ffd3 	bl	8002802 <HAL_DAC_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8000862:	f000 fedb 	bl	800161c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000866:	2304      	movs	r3, #4
 8000868:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800086a:	2300      	movs	r3, #0
 800086c:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	2200      	movs	r2, #0
 8000872:	4619      	mov	r1, r3
 8000874:	480b      	ldr	r0, [pc, #44]	; (80008a4 <MX_DAC1_Init+0x64>)
 8000876:	f002 f856 	bl	8002926 <HAL_DAC_ConfigChannel>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8000880:	f000 fecc 	bl	800161c <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2210      	movs	r2, #16
 8000888:	4619      	mov	r1, r3
 800088a:	4806      	ldr	r0, [pc, #24]	; (80008a4 <MX_DAC1_Init+0x64>)
 800088c:	f002 f84b 	bl	8002926 <HAL_DAC_ConfigChannel>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_DAC1_Init+0x5a>
  {
    Error_Handler();
 8000896:	f000 fec1 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000108 	.word	0x20000108
 80008a8:	40007400 	.word	0x40007400

080008ac <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC2_Init 1 */

  /* USER CODE END DAC2_Init 1 */
  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 80008bc:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_DAC2_Init+0x4c>)
 80008be:	4a0f      	ldr	r2, [pc, #60]	; (80008fc <MX_DAC2_Init+0x50>)
 80008c0:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80008c2:	480d      	ldr	r0, [pc, #52]	; (80008f8 <MX_DAC2_Init+0x4c>)
 80008c4:	f001 ff9d 	bl	8002802 <HAL_DAC_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_DAC2_Init+0x26>
  {
    Error_Handler();
 80008ce:	f000 fea5 	bl	800161c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80008d2:	2304      	movs	r3, #4
 80008d4:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80008d6:	2300      	movs	r3, #0
 80008d8:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	2200      	movs	r2, #0
 80008de:	4619      	mov	r1, r3
 80008e0:	4805      	ldr	r0, [pc, #20]	; (80008f8 <MX_DAC2_Init+0x4c>)
 80008e2:	f002 f820 	bl	8002926 <HAL_DAC_ConfigChannel>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_DAC2_Init+0x44>
  {
    Error_Handler();
 80008ec:	f000 fe96 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	3710      	adds	r7, #16
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	200000a8 	.word	0x200000a8
 80008fc:	40009800 	.word	0x40009800

08000900 <MX_SDADC1_Init>:
  * @brief SDADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDADC1_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SDADC1_Init 0 */

  /* USER CODE END SDADC1_Init 0 */

  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 8000906:	463b      	mov	r3, r7
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]

  /* USER CODE END SDADC1_Init 1 */
  /** Configure the SDADC low power mode, fast conversion mode,
  slow clock mode and SDADC1 reference voltage
  */
  hsdadc1.Instance = SDADC1;
 8000912:	4b4f      	ldr	r3, [pc, #316]	; (8000a50 <MX_SDADC1_Init+0x150>)
 8000914:	4a4f      	ldr	r2, [pc, #316]	; (8000a54 <MX_SDADC1_Init+0x154>)
 8000916:	601a      	str	r2, [r3, #0]
  hsdadc1.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 8000918:	4b4d      	ldr	r3, [pc, #308]	; (8000a50 <MX_SDADC1_Init+0x150>)
 800091a:	2200      	movs	r2, #0
 800091c:	605a      	str	r2, [r3, #4]
  hsdadc1.Init.FastConversionMode = SDADC_FAST_CONV_DISABLE;
 800091e:	4b4c      	ldr	r3, [pc, #304]	; (8000a50 <MX_SDADC1_Init+0x150>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  hsdadc1.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 8000924:	4b4a      	ldr	r3, [pc, #296]	; (8000a50 <MX_SDADC1_Init+0x150>)
 8000926:	2200      	movs	r2, #0
 8000928:	60da      	str	r2, [r3, #12]
  hsdadc1.Init.ReferenceVoltage = SDADC_VREF_VDDA;
 800092a:	4b49      	ldr	r3, [pc, #292]	; (8000a50 <MX_SDADC1_Init+0x150>)
 800092c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000930:	611a      	str	r2, [r3, #16]
  hsdadc1.InjectedTrigger = SDADC_SOFTWARE_TRIGGER;
 8000932:	4b47      	ldr	r3, [pc, #284]	; (8000a50 <MX_SDADC1_Init+0x150>)
 8000934:	2200      	movs	r2, #0
 8000936:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SDADC_Init(&hsdadc1) != HAL_OK)
 8000938:	4845      	ldr	r0, [pc, #276]	; (8000a50 <MX_SDADC1_Init+0x150>)
 800093a:	f004 f833 	bl	80049a4 <HAL_SDADC_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_SDADC1_Init+0x48>
  {
    Error_Handler();
 8000944:	f000 fe6a 	bl	800161c <Error_Handler>
  }
  /** Configure the Injected Mode
  */
  if (HAL_SDADC_SelectInjectedDelay(&hsdadc1, SDADC_INJECTED_DELAY) != HAL_OK)
 8000948:	2140      	movs	r1, #64	; 0x40
 800094a:	4841      	ldr	r0, [pc, #260]	; (8000a50 <MX_SDADC1_Init+0x150>)
 800094c:	f004 f9a6 	bl	8004c9c <HAL_SDADC_SelectInjectedDelay>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_SDADC1_Init+0x5a>
  {
    Error_Handler();
 8000956:	f000 fe61 	bl	800161c <Error_Handler>
  }
  if (HAL_SDADC_SelectInjectedTrigger(&hsdadc1, SDADC_SOFTWARE_TRIGGER) != HAL_OK)
 800095a:	2100      	movs	r1, #0
 800095c:	483c      	ldr	r0, [pc, #240]	; (8000a50 <MX_SDADC1_Init+0x150>)
 800095e:	f004 f96d 	bl	8004c3c <HAL_SDADC_SelectInjectedTrigger>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_SDADC1_Init+0x6c>
  {
    Error_Handler();
 8000968:	f000 fe58 	bl	800161c <Error_Handler>
  }
  if (HAL_SDADC_InjectedConfigChannel(&hsdadc1, SDADC_CHANNEL_4|SDADC_CHANNEL_8
 800096c:	2201      	movs	r2, #1
 800096e:	493a      	ldr	r1, [pc, #232]	; (8000a58 <MX_SDADC1_Init+0x158>)
 8000970:	4837      	ldr	r0, [pc, #220]	; (8000a50 <MX_SDADC1_Init+0x150>)
 8000972:	f004 f927 	bl	8004bc4 <HAL_SDADC_InjectedConfigChannel>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_SDADC1_Init+0x80>
                              |SDADC_CHANNEL_6, SDADC_CONTINUOUS_CONV_ON) != HAL_OK)
  {
    Error_Handler();
 800097c:	f000 fe4e 	bl	800161c <Error_Handler>
  }
  /** Set parameters for SDADC configuration 0 Register
  */
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_ZERO_REFERENCE;
 8000980:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8000984:	603b      	str	r3, [r7, #0]
  ConfParamStruct.Gain = SDADC_GAIN_1;
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
  ConfParamStruct.CommonMode = SDADC_COMMON_MODE_VSSA;
 800098a:	2300      	movs	r3, #0
 800098c:	60bb      	str	r3, [r7, #8]
  ConfParamStruct.Offset = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc1, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 8000992:	463b      	mov	r3, r7
 8000994:	461a      	mov	r2, r3
 8000996:	2100      	movs	r1, #0
 8000998:	482d      	ldr	r0, [pc, #180]	; (8000a50 <MX_SDADC1_Init+0x150>)
 800099a:	f004 f887 	bl	8004aac <HAL_SDADC_PrepareChannelConfig>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_SDADC1_Init+0xa8>
  {
    Error_Handler();
 80009a4:	f000 fe3a 	bl	800161c <Error_Handler>
  }
  /** Set parameters for SDADC configuration 1 Register
  */
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_DIFF;
 80009a8:	2300      	movs	r3, #0
 80009aa:	603b      	str	r3, [r7, #0]
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc1, SDADC_CONF_INDEX_1, &ConfParamStruct) != HAL_OK)
 80009ac:	463b      	mov	r3, r7
 80009ae:	461a      	mov	r2, r3
 80009b0:	2101      	movs	r1, #1
 80009b2:	4827      	ldr	r0, [pc, #156]	; (8000a50 <MX_SDADC1_Init+0x150>)
 80009b4:	f004 f87a 	bl	8004aac <HAL_SDADC_PrepareChannelConfig>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_SDADC1_Init+0xc2>
  {
    Error_Handler();
 80009be:	f000 fe2d 	bl	800161c <Error_Handler>
  }
  /** Configure the Injected Channel
  */
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_4, SDADC_CONF_INDEX_0) != HAL_OK)
 80009c2:	2200      	movs	r2, #0
 80009c4:	4925      	ldr	r1, [pc, #148]	; (8000a5c <MX_SDADC1_Init+0x15c>)
 80009c6:	4822      	ldr	r0, [pc, #136]	; (8000a50 <MX_SDADC1_Init+0x150>)
 80009c8:	f004 f8ac 	bl	8004b24 <HAL_SDADC_AssociateChannelConfig>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_SDADC1_Init+0xd6>
  {
    Error_Handler();
 80009d2:	f000 fe23 	bl	800161c <Error_Handler>
  }
  /** Configure the Injected Channel
  */
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_8, SDADC_CONF_INDEX_1) != HAL_OK)
 80009d6:	2201      	movs	r2, #1
 80009d8:	4921      	ldr	r1, [pc, #132]	; (8000a60 <MX_SDADC1_Init+0x160>)
 80009da:	481d      	ldr	r0, [pc, #116]	; (8000a50 <MX_SDADC1_Init+0x150>)
 80009dc:	f004 f8a2 	bl	8004b24 <HAL_SDADC_AssociateChannelConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_SDADC1_Init+0xea>
  {
    Error_Handler();
 80009e6:	f000 fe19 	bl	800161c <Error_Handler>
  }
  /** Configure the Injected Channel
  */
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_6, SDADC_CONF_INDEX_1) != HAL_OK)
 80009ea:	2201      	movs	r2, #1
 80009ec:	491d      	ldr	r1, [pc, #116]	; (8000a64 <MX_SDADC1_Init+0x164>)
 80009ee:	4818      	ldr	r0, [pc, #96]	; (8000a50 <MX_SDADC1_Init+0x150>)
 80009f0:	f004 f898 	bl	8004b24 <HAL_SDADC_AssociateChannelConfig>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_SDADC1_Init+0xfe>
  {
    Error_Handler();
 80009fa:	f000 fe0f 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN SDADC1_Init 2 */

	// Multi mode for SDADC1 and SDADC3
	if (HAL_SDADC_InjectedMultiModeConfigChannel(&hsdadc1, SDADC_MULTIMODE_SDADC1_SDADC3) != HAL_OK)
 80009fe:	2101      	movs	r1, #1
 8000a00:	4813      	ldr	r0, [pc, #76]	; (8000a50 <MX_SDADC1_Init+0x150>)
 8000a02:	f004 f97f 	bl	8004d04 <HAL_SDADC_InjectedMultiModeConfigChannel>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_SDADC1_Init+0x110>
	{
		Error_Handler();
 8000a0c:	f000 fe06 	bl	800161c <Error_Handler>
	}

	// Calibration
	if (HAL_SDADC_CalibrationStart(&hsdadc1, SDADC_CALIBRATION_SEQ_1) != HAL_OK) {
 8000a10:	2100      	movs	r1, #0
 8000a12:	480f      	ldr	r0, [pc, #60]	; (8000a50 <MX_SDADC1_Init+0x150>)
 8000a14:	f004 f9a4 	bl	8004d60 <HAL_SDADC_CalibrationStart>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_SDADC1_Init+0x122>
		Error_Handler();
 8000a1e:	f000 fdfd 	bl	800161c <Error_Handler>
	}

	// Pool for the end of calibration
	if (HAL_SDADC_PollForCalibEvent(&hsdadc1, HAL_MAX_DELAY) != HAL_OK) {
 8000a22:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a26:	480a      	ldr	r0, [pc, #40]	; (8000a50 <MX_SDADC1_Init+0x150>)
 8000a28:	f004 f9da 	bl	8004de0 <HAL_SDADC_PollForCalibEvent>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_SDADC1_Init+0x136>
		Error_Handler();
 8000a32:	f000 fdf3 	bl	800161c <Error_Handler>
	}

	// Start interrupt mode
	if (HAL_SDADC_InjectedStart_IT(&hsdadc1) != HAL_OK) {
 8000a36:	4806      	ldr	r0, [pc, #24]	; (8000a50 <MX_SDADC1_Init+0x150>)
 8000a38:	f004 fa2e 	bl	8004e98 <HAL_SDADC_InjectedStart_IT>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_SDADC1_Init+0x146>
		Error_Handler();
 8000a42:	f000 fdeb 	bl	800161c <Error_Handler>
	}
  /* USER CODE END SDADC1_Init 2 */

}
 8000a46:	bf00      	nop
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	200002f8 	.word	0x200002f8
 8000a54:	40016000 	.word	0x40016000
 8000a58:	000e0150 	.word	0x000e0150
 8000a5c:	00040010 	.word	0x00040010
 8000a60:	00080100 	.word	0x00080100
 8000a64:	00060040 	.word	0x00060040

08000a68 <MX_SDADC3_Init>:
  * @brief SDADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDADC3_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SDADC3_Init 0 */

  /* USER CODE END SDADC3_Init 0 */

  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 8000a6e:	463b      	mov	r3, r7
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]

  /* USER CODE END SDADC3_Init 1 */
  /** Configure the SDADC low power mode, fast conversion mode,
  slow clock mode and SDADC1 reference voltage
  */
  hsdadc3.Instance = SDADC3;
 8000a7a:	4b45      	ldr	r3, [pc, #276]	; (8000b90 <MX_SDADC3_Init+0x128>)
 8000a7c:	4a45      	ldr	r2, [pc, #276]	; (8000b94 <MX_SDADC3_Init+0x12c>)
 8000a7e:	601a      	str	r2, [r3, #0]
  hsdadc3.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 8000a80:	4b43      	ldr	r3, [pc, #268]	; (8000b90 <MX_SDADC3_Init+0x128>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	605a      	str	r2, [r3, #4]
  hsdadc3.Init.FastConversionMode = SDADC_FAST_CONV_DISABLE;
 8000a86:	4b42      	ldr	r3, [pc, #264]	; (8000b90 <MX_SDADC3_Init+0x128>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  hsdadc3.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 8000a8c:	4b40      	ldr	r3, [pc, #256]	; (8000b90 <MX_SDADC3_Init+0x128>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	60da      	str	r2, [r3, #12]
  hsdadc3.Init.ReferenceVoltage = SDADC_VREF_VDDA;
 8000a92:	4b3f      	ldr	r3, [pc, #252]	; (8000b90 <MX_SDADC3_Init+0x128>)
 8000a94:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a98:	611a      	str	r2, [r3, #16]
  hsdadc3.InjectedTrigger = SDADC_SOFTWARE_TRIGGER;
 8000a9a:	4b3d      	ldr	r3, [pc, #244]	; (8000b90 <MX_SDADC3_Init+0x128>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SDADC_Init(&hsdadc3) != HAL_OK)
 8000aa0:	483b      	ldr	r0, [pc, #236]	; (8000b90 <MX_SDADC3_Init+0x128>)
 8000aa2:	f003 ff7f 	bl	80049a4 <HAL_SDADC_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_SDADC3_Init+0x48>
  {
    Error_Handler();
 8000aac:	f000 fdb6 	bl	800161c <Error_Handler>
  }
  /** Configure the Injected Mode
  */
  if (HAL_SDADC_SelectInjectedDelay(&hsdadc3, SDADC_INJECTED_DELAY) != HAL_OK)
 8000ab0:	2140      	movs	r1, #64	; 0x40
 8000ab2:	4837      	ldr	r0, [pc, #220]	; (8000b90 <MX_SDADC3_Init+0x128>)
 8000ab4:	f004 f8f2 	bl	8004c9c <HAL_SDADC_SelectInjectedDelay>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_SDADC3_Init+0x5a>
  {
    Error_Handler();
 8000abe:	f000 fdad 	bl	800161c <Error_Handler>
  }
  if (HAL_SDADC_SelectInjectedTrigger(&hsdadc3, SDADC_SOFTWARE_TRIGGER) != HAL_OK)
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4832      	ldr	r0, [pc, #200]	; (8000b90 <MX_SDADC3_Init+0x128>)
 8000ac6:	f004 f8b9 	bl	8004c3c <HAL_SDADC_SelectInjectedTrigger>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_SDADC3_Init+0x6c>
  {
    Error_Handler();
 8000ad0:	f000 fda4 	bl	800161c <Error_Handler>
  }
  if (HAL_SDADC_InjectedConfigChannel(&hsdadc3, SDADC_CHANNEL_6|SDADC_CHANNEL_8, SDADC_CONTINUOUS_CONV_ON) != HAL_OK)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	4930      	ldr	r1, [pc, #192]	; (8000b98 <MX_SDADC3_Init+0x130>)
 8000ad8:	482d      	ldr	r0, [pc, #180]	; (8000b90 <MX_SDADC3_Init+0x128>)
 8000ada:	f004 f873 	bl	8004bc4 <HAL_SDADC_InjectedConfigChannel>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_SDADC3_Init+0x80>
  {
    Error_Handler();
 8000ae4:	f000 fd9a 	bl	800161c <Error_Handler>
  }
  /** Set parameters for SDADC configuration 0 Register
  */
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_ZERO_REFERENCE;
 8000ae8:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8000aec:	603b      	str	r3, [r7, #0]
  ConfParamStruct.Gain = SDADC_GAIN_1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
  ConfParamStruct.CommonMode = SDADC_COMMON_MODE_VSSA;
 8000af2:	2300      	movs	r3, #0
 8000af4:	60bb      	str	r3, [r7, #8]
  ConfParamStruct.Offset = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc3, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 8000afa:	463b      	mov	r3, r7
 8000afc:	461a      	mov	r2, r3
 8000afe:	2100      	movs	r1, #0
 8000b00:	4823      	ldr	r0, [pc, #140]	; (8000b90 <MX_SDADC3_Init+0x128>)
 8000b02:	f003 ffd3 	bl	8004aac <HAL_SDADC_PrepareChannelConfig>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_SDADC3_Init+0xa8>
  {
    Error_Handler();
 8000b0c:	f000 fd86 	bl	800161c <Error_Handler>
  }
  /** Set parameters for SDADC configuration 1 Register
  */
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_DIFF;
 8000b10:	2300      	movs	r3, #0
 8000b12:	603b      	str	r3, [r7, #0]
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc3, SDADC_CONF_INDEX_1, &ConfParamStruct) != HAL_OK)
 8000b14:	463b      	mov	r3, r7
 8000b16:	461a      	mov	r2, r3
 8000b18:	2101      	movs	r1, #1
 8000b1a:	481d      	ldr	r0, [pc, #116]	; (8000b90 <MX_SDADC3_Init+0x128>)
 8000b1c:	f003 ffc6 	bl	8004aac <HAL_SDADC_PrepareChannelConfig>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_SDADC3_Init+0xc2>
  {
    Error_Handler();
 8000b26:	f000 fd79 	bl	800161c <Error_Handler>
  }
  /** Configure the Injected Channel
  */
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc3, SDADC_CHANNEL_6, SDADC_CONF_INDEX_0) != HAL_OK)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	491b      	ldr	r1, [pc, #108]	; (8000b9c <MX_SDADC3_Init+0x134>)
 8000b2e:	4818      	ldr	r0, [pc, #96]	; (8000b90 <MX_SDADC3_Init+0x128>)
 8000b30:	f003 fff8 	bl	8004b24 <HAL_SDADC_AssociateChannelConfig>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_SDADC3_Init+0xd6>
  {
    Error_Handler();
 8000b3a:	f000 fd6f 	bl	800161c <Error_Handler>
  }
  /** Configure the Injected Channel
  */
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc3, SDADC_CHANNEL_8, SDADC_CONF_INDEX_1) != HAL_OK)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	4917      	ldr	r1, [pc, #92]	; (8000ba0 <MX_SDADC3_Init+0x138>)
 8000b42:	4813      	ldr	r0, [pc, #76]	; (8000b90 <MX_SDADC3_Init+0x128>)
 8000b44:	f003 ffee 	bl	8004b24 <HAL_SDADC_AssociateChannelConfig>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_SDADC3_Init+0xea>
  {
    Error_Handler();
 8000b4e:	f000 fd65 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN SDADC3_Init 2 */

    // Calibration
	if (HAL_SDADC_CalibrationStart(&hsdadc3, SDADC_CALIBRATION_SEQ_1) != HAL_OK) {
 8000b52:	2100      	movs	r1, #0
 8000b54:	480e      	ldr	r0, [pc, #56]	; (8000b90 <MX_SDADC3_Init+0x128>)
 8000b56:	f004 f903 	bl	8004d60 <HAL_SDADC_CalibrationStart>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_SDADC3_Init+0xfc>
		Error_Handler();
 8000b60:	f000 fd5c 	bl	800161c <Error_Handler>
	}

	// Pool for the end of calibration
	if (HAL_SDADC_PollForCalibEvent(&hsdadc3, HAL_MAX_DELAY) != HAL_OK) {
 8000b64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b68:	4809      	ldr	r0, [pc, #36]	; (8000b90 <MX_SDADC3_Init+0x128>)
 8000b6a:	f004 f939 	bl	8004de0 <HAL_SDADC_PollForCalibEvent>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_SDADC3_Init+0x110>
		Error_Handler();
 8000b74:	f000 fd52 	bl	800161c <Error_Handler>
	}

	// Start interrupt mode
	if (HAL_SDADC_InjectedStart_IT(&hsdadc3) != HAL_OK) {
 8000b78:	4805      	ldr	r0, [pc, #20]	; (8000b90 <MX_SDADC3_Init+0x128>)
 8000b7a:	f004 f98d 	bl	8004e98 <HAL_SDADC_InjectedStart_IT>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_SDADC3_Init+0x120>
		Error_Handler();
 8000b84:	f000 fd4a 	bl	800161c <Error_Handler>
	}
  /* USER CODE END SDADC3_Init 2 */

}
 8000b88:	bf00      	nop
 8000b8a:	3710      	adds	r7, #16
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000418 	.word	0x20000418
 8000b94:	40016800 	.word	0x40016800
 8000b98:	000e0140 	.word	0x000e0140
 8000b9c:	00060040 	.word	0x00060040
 8000ba0:	00080100 	.word	0x00080100

08000ba4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08e      	sub	sp, #56	; 0x38
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000baa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb8:	f107 0320 	add.w	r3, r7, #32
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
 8000bd0:	615a      	str	r2, [r3, #20]
 8000bd2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bd4:	4b2d      	ldr	r3, [pc, #180]	; (8000c8c <MX_TIM2_Init+0xe8>)
 8000bd6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bda:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000bdc:	4b2b      	ldr	r3, [pc, #172]	; (8000c8c <MX_TIM2_Init+0xe8>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be2:	4b2a      	ldr	r3, [pc, #168]	; (8000c8c <MX_TIM2_Init+0xe8>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4095;
 8000be8:	4b28      	ldr	r3, [pc, #160]	; (8000c8c <MX_TIM2_Init+0xe8>)
 8000bea:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000bee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf0:	4b26      	ldr	r3, [pc, #152]	; (8000c8c <MX_TIM2_Init+0xe8>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bf6:	4b25      	ldr	r3, [pc, #148]	; (8000c8c <MX_TIM2_Init+0xe8>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bfc:	4823      	ldr	r0, [pc, #140]	; (8000c8c <MX_TIM2_Init+0xe8>)
 8000bfe:	f004 fb61 	bl	80052c4 <HAL_TIM_Base_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000c08:	f000 fd08 	bl	800161c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c10:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c16:	4619      	mov	r1, r3
 8000c18:	481c      	ldr	r0, [pc, #112]	; (8000c8c <MX_TIM2_Init+0xe8>)
 8000c1a:	f004 fde5 	bl	80057e8 <HAL_TIM_ConfigClockSource>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000c24:	f000 fcfa 	bl	800161c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c28:	4818      	ldr	r0, [pc, #96]	; (8000c8c <MX_TIM2_Init+0xe8>)
 8000c2a:	f004 fbfb 	bl	8005424 <HAL_TIM_PWM_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000c34:	f000 fcf2 	bl	800161c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c40:	f107 0320 	add.w	r3, r7, #32
 8000c44:	4619      	mov	r1, r3
 8000c46:	4811      	ldr	r0, [pc, #68]	; (8000c8c <MX_TIM2_Init+0xe8>)
 8000c48:	f005 f938 	bl	8005ebc <HAL_TIMEx_MasterConfigSynchronization>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000c52:	f000 fce3 	bl	800161c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c56:	2360      	movs	r3, #96	; 0x60
 8000c58:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	2200      	movs	r2, #0
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4807      	ldr	r0, [pc, #28]	; (8000c8c <MX_TIM2_Init+0xe8>)
 8000c6e:	f004 fcfd 	bl	800566c <HAL_TIM_PWM_ConfigChannel>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000c78:	f000 fcd0 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c7c:	4803      	ldr	r0, [pc, #12]	; (8000c8c <MX_TIM2_Init+0xe8>)
 8000c7e:	f000 feff 	bl	8001a80 <HAL_TIM_MspPostInit>

}
 8000c82:	bf00      	nop
 8000c84:	3738      	adds	r7, #56	; 0x38
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200003cc 	.word	0x200003cc

08000c90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08e      	sub	sp, #56	; 0x38
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca4:	f107 0320 	add.w	r3, r7, #32
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
 8000cbc:	615a      	str	r2, [r3, #20]
 8000cbe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cc0:	4b32      	ldr	r3, [pc, #200]	; (8000d8c <MX_TIM3_Init+0xfc>)
 8000cc2:	4a33      	ldr	r2, [pc, #204]	; (8000d90 <MX_TIM3_Init+0x100>)
 8000cc4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000cc6:	4b31      	ldr	r3, [pc, #196]	; (8000d8c <MX_TIM3_Init+0xfc>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ccc:	4b2f      	ldr	r3, [pc, #188]	; (8000d8c <MX_TIM3_Init+0xfc>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4095;
 8000cd2:	4b2e      	ldr	r3, [pc, #184]	; (8000d8c <MX_TIM3_Init+0xfc>)
 8000cd4:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000cd8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cda:	4b2c      	ldr	r3, [pc, #176]	; (8000d8c <MX_TIM3_Init+0xfc>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce0:	4b2a      	ldr	r3, [pc, #168]	; (8000d8c <MX_TIM3_Init+0xfc>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ce6:	4829      	ldr	r0, [pc, #164]	; (8000d8c <MX_TIM3_Init+0xfc>)
 8000ce8:	f004 faec 	bl	80052c4 <HAL_TIM_Base_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000cf2:	f000 fc93 	bl	800161c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cfc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d00:	4619      	mov	r1, r3
 8000d02:	4822      	ldr	r0, [pc, #136]	; (8000d8c <MX_TIM3_Init+0xfc>)
 8000d04:	f004 fd70 	bl	80057e8 <HAL_TIM_ConfigClockSource>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000d0e:	f000 fc85 	bl	800161c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d12:	481e      	ldr	r0, [pc, #120]	; (8000d8c <MX_TIM3_Init+0xfc>)
 8000d14:	f004 fb86 	bl	8005424 <HAL_TIM_PWM_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000d1e:	f000 fc7d 	bl	800161c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d22:	2300      	movs	r3, #0
 8000d24:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d2a:	f107 0320 	add.w	r3, r7, #32
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4816      	ldr	r0, [pc, #88]	; (8000d8c <MX_TIM3_Init+0xfc>)
 8000d32:	f005 f8c3 	bl	8005ebc <HAL_TIMEx_MasterConfigSynchronization>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000d3c:	f000 fc6e 	bl	800161c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d40:	2360      	movs	r3, #96	; 0x60
 8000d42:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	2200      	movs	r2, #0
 8000d54:	4619      	mov	r1, r3
 8000d56:	480d      	ldr	r0, [pc, #52]	; (8000d8c <MX_TIM3_Init+0xfc>)
 8000d58:	f004 fc88 	bl	800566c <HAL_TIM_PWM_ConfigChannel>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000d62:	f000 fc5b 	bl	800161c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	2204      	movs	r2, #4
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4807      	ldr	r0, [pc, #28]	; (8000d8c <MX_TIM3_Init+0xfc>)
 8000d6e:	f004 fc7d 	bl	800566c <HAL_TIM_PWM_ConfigChannel>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000d78:	f000 fc50 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d7c:	4803      	ldr	r0, [pc, #12]	; (8000d8c <MX_TIM3_Init+0xfc>)
 8000d7e:	f000 fe7f 	bl	8001a80 <HAL_TIM_MspPostInit>

}
 8000d82:	bf00      	nop
 8000d84:	3738      	adds	r7, #56	; 0x38
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	200001b4 	.word	0x200001b4
 8000d90:	40000400 	.word	0x40000400

08000d94 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08e      	sub	sp, #56	; 0x38
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da8:	f107 0320 	add.w	r3, r7, #32
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
 8000dc0:	615a      	str	r2, [r3, #20]
 8000dc2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000dc4:	4b37      	ldr	r3, [pc, #220]	; (8000ea4 <MX_TIM4_Init+0x110>)
 8000dc6:	4a38      	ldr	r2, [pc, #224]	; (8000ea8 <MX_TIM4_Init+0x114>)
 8000dc8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000dca:	4b36      	ldr	r3, [pc, #216]	; (8000ea4 <MX_TIM4_Init+0x110>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd0:	4b34      	ldr	r3, [pc, #208]	; (8000ea4 <MX_TIM4_Init+0x110>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4095;
 8000dd6:	4b33      	ldr	r3, [pc, #204]	; (8000ea4 <MX_TIM4_Init+0x110>)
 8000dd8:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000ddc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dde:	4b31      	ldr	r3, [pc, #196]	; (8000ea4 <MX_TIM4_Init+0x110>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de4:	4b2f      	ldr	r3, [pc, #188]	; (8000ea4 <MX_TIM4_Init+0x110>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000dea:	482e      	ldr	r0, [pc, #184]	; (8000ea4 <MX_TIM4_Init+0x110>)
 8000dec:	f004 fa6a 	bl	80052c4 <HAL_TIM_Base_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000df6:	f000 fc11 	bl	800161c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e04:	4619      	mov	r1, r3
 8000e06:	4827      	ldr	r0, [pc, #156]	; (8000ea4 <MX_TIM4_Init+0x110>)
 8000e08:	f004 fcee 	bl	80057e8 <HAL_TIM_ConfigClockSource>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000e12:	f000 fc03 	bl	800161c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e16:	4823      	ldr	r0, [pc, #140]	; (8000ea4 <MX_TIM4_Init+0x110>)
 8000e18:	f004 fb04 	bl	8005424 <HAL_TIM_PWM_Init>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000e22:	f000 fbfb 	bl	800161c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e26:	2300      	movs	r3, #0
 8000e28:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e2e:	f107 0320 	add.w	r3, r7, #32
 8000e32:	4619      	mov	r1, r3
 8000e34:	481b      	ldr	r0, [pc, #108]	; (8000ea4 <MX_TIM4_Init+0x110>)
 8000e36:	f005 f841 	bl	8005ebc <HAL_TIMEx_MasterConfigSynchronization>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000e40:	f000 fbec 	bl	800161c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e44:	2360      	movs	r3, #96	; 0x60
 8000e46:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	2200      	movs	r2, #0
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4812      	ldr	r0, [pc, #72]	; (8000ea4 <MX_TIM4_Init+0x110>)
 8000e5c:	f004 fc06 	bl	800566c <HAL_TIM_PWM_ConfigChannel>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000e66:	f000 fbd9 	bl	800161c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	2204      	movs	r2, #4
 8000e6e:	4619      	mov	r1, r3
 8000e70:	480c      	ldr	r0, [pc, #48]	; (8000ea4 <MX_TIM4_Init+0x110>)
 8000e72:	f004 fbfb 	bl	800566c <HAL_TIM_PWM_ConfigChannel>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000e7c:	f000 fbce 	bl	800161c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	220c      	movs	r2, #12
 8000e84:	4619      	mov	r1, r3
 8000e86:	4807      	ldr	r0, [pc, #28]	; (8000ea4 <MX_TIM4_Init+0x110>)
 8000e88:	f004 fbf0 	bl	800566c <HAL_TIM_PWM_ConfigChannel>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8000e92:	f000 fbc3 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000e96:	4803      	ldr	r0, [pc, #12]	; (8000ea4 <MX_TIM4_Init+0x110>)
 8000e98:	f000 fdf2 	bl	8001a80 <HAL_TIM_MspPostInit>

}
 8000e9c:	bf00      	nop
 8000e9e:	3738      	adds	r7, #56	; 0x38
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	200000bc 	.word	0x200000bc
 8000ea8:	40000800 	.word	0x40000800

08000eac <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08e      	sub	sp, #56	; 0x38
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec0:	f107 0320 	add.w	r3, r7, #32
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
 8000ed8:	615a      	str	r2, [r3, #20]
 8000eda:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000edc:	4b37      	ldr	r3, [pc, #220]	; (8000fbc <MX_TIM5_Init+0x110>)
 8000ede:	4a38      	ldr	r2, [pc, #224]	; (8000fc0 <MX_TIM5_Init+0x114>)
 8000ee0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000ee2:	4b36      	ldr	r3, [pc, #216]	; (8000fbc <MX_TIM5_Init+0x110>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee8:	4b34      	ldr	r3, [pc, #208]	; (8000fbc <MX_TIM5_Init+0x110>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4095;
 8000eee:	4b33      	ldr	r3, [pc, #204]	; (8000fbc <MX_TIM5_Init+0x110>)
 8000ef0:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000ef4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef6:	4b31      	ldr	r3, [pc, #196]	; (8000fbc <MX_TIM5_Init+0x110>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000efc:	4b2f      	ldr	r3, [pc, #188]	; (8000fbc <MX_TIM5_Init+0x110>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000f02:	482e      	ldr	r0, [pc, #184]	; (8000fbc <MX_TIM5_Init+0x110>)
 8000f04:	f004 f9de 	bl	80052c4 <HAL_TIM_Base_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8000f0e:	f000 fb85 	bl	800161c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f16:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000f18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4827      	ldr	r0, [pc, #156]	; (8000fbc <MX_TIM5_Init+0x110>)
 8000f20:	f004 fc62 	bl	80057e8 <HAL_TIM_ConfigClockSource>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8000f2a:	f000 fb77 	bl	800161c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000f2e:	4823      	ldr	r0, [pc, #140]	; (8000fbc <MX_TIM5_Init+0x110>)
 8000f30:	f004 fa78 	bl	8005424 <HAL_TIM_PWM_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8000f3a:	f000 fb6f 	bl	800161c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f42:	2300      	movs	r3, #0
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f46:	f107 0320 	add.w	r3, r7, #32
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	481b      	ldr	r0, [pc, #108]	; (8000fbc <MX_TIM5_Init+0x110>)
 8000f4e:	f004 ffb5 	bl	8005ebc <HAL_TIMEx_MasterConfigSynchronization>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8000f58:	f000 fb60 	bl	800161c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f5c:	2360      	movs	r3, #96	; 0x60
 8000f5e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f64:	2300      	movs	r3, #0
 8000f66:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	2200      	movs	r2, #0
 8000f70:	4619      	mov	r1, r3
 8000f72:	4812      	ldr	r0, [pc, #72]	; (8000fbc <MX_TIM5_Init+0x110>)
 8000f74:	f004 fb7a 	bl	800566c <HAL_TIM_PWM_ConfigChannel>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8000f7e:	f000 fb4d 	bl	800161c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	2204      	movs	r2, #4
 8000f86:	4619      	mov	r1, r3
 8000f88:	480c      	ldr	r0, [pc, #48]	; (8000fbc <MX_TIM5_Init+0x110>)
 8000f8a:	f004 fb6f 	bl	800566c <HAL_TIM_PWM_ConfigChannel>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 8000f94:	f000 fb42 	bl	800161c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	2208      	movs	r2, #8
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4807      	ldr	r0, [pc, #28]	; (8000fbc <MX_TIM5_Init+0x110>)
 8000fa0:	f004 fb64 	bl	800566c <HAL_TIM_PWM_ConfigChannel>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_TIM5_Init+0x102>
  {
    Error_Handler();
 8000faa:	f000 fb37 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000fae:	4803      	ldr	r0, [pc, #12]	; (8000fbc <MX_TIM5_Init+0x110>)
 8000fb0:	f000 fd66 	bl	8001a80 <HAL_TIM_MspPostInit>

}
 8000fb4:	bf00      	nop
 8000fb6:	3738      	adds	r7, #56	; 0x38
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000168 	.word	0x20000168
 8000fc0:	40000c00 	.word	0x40000c00

08000fc4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fca:	463b      	mov	r3, r7
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000fd2:	4b15      	ldr	r3, [pc, #84]	; (8001028 <MX_TIM6_Init+0x64>)
 8000fd4:	4a15      	ldr	r2, [pc, #84]	; (800102c <MX_TIM6_Init+0x68>)
 8000fd6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000fd8:	4b13      	ldr	r3, [pc, #76]	; (8001028 <MX_TIM6_Init+0x64>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fde:	4b12      	ldr	r3, [pc, #72]	; (8001028 <MX_TIM6_Init+0x64>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000fe4:	4b10      	ldr	r3, [pc, #64]	; (8001028 <MX_TIM6_Init+0x64>)
 8000fe6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fea:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fec:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <MX_TIM6_Init+0x64>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ff2:	480d      	ldr	r0, [pc, #52]	; (8001028 <MX_TIM6_Init+0x64>)
 8000ff4:	f004 f966 	bl	80052c4 <HAL_TIM_Base_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000ffe:	f000 fb0d 	bl	800161c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001002:	2320      	movs	r3, #32
 8001004:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001006:	2300      	movs	r3, #0
 8001008:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800100a:	463b      	mov	r3, r7
 800100c:	4619      	mov	r1, r3
 800100e:	4806      	ldr	r0, [pc, #24]	; (8001028 <MX_TIM6_Init+0x64>)
 8001010:	f004 ff54 	bl	8005ebc <HAL_TIMEx_MasterConfigSynchronization>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800101a:	f000 faff 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000380 	.word	0x20000380
 800102c:	40001000 	.word	0x40001000

08001030 <MX_TIM19_Init>:
  * @brief TIM19 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM19_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM19_Init 0 */

  /* USER CODE END TIM19_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001036:	f107 0308 	add.w	r3, r7, #8
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001044:	463b      	mov	r3, r7
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM19_Init 1 */

  /* USER CODE END TIM19_Init 1 */
  htim19.Instance = TIM19;
 800104c:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <MX_TIM19_Init+0x94>)
 800104e:	4a1e      	ldr	r2, [pc, #120]	; (80010c8 <MX_TIM19_Init+0x98>)
 8001050:	601a      	str	r2, [r3, #0]
  htim19.Init.Prescaler = 0;
 8001052:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <MX_TIM19_Init+0x94>)
 8001054:	2200      	movs	r2, #0
 8001056:	605a      	str	r2, [r3, #4]
  htim19.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001058:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <MX_TIM19_Init+0x94>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  htim19.Init.Period = 65535;
 800105e:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <MX_TIM19_Init+0x94>)
 8001060:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001064:	60da      	str	r2, [r3, #12]
  htim19.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001066:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <MX_TIM19_Init+0x94>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  htim19.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800106c:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <MX_TIM19_Init+0x94>)
 800106e:	2200      	movs	r2, #0
 8001070:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim19) != HAL_OK)
 8001072:	4814      	ldr	r0, [pc, #80]	; (80010c4 <MX_TIM19_Init+0x94>)
 8001074:	f004 f926 	bl	80052c4 <HAL_TIM_Base_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM19_Init+0x52>
  {
    Error_Handler();
 800107e:	f000 facd 	bl	800161c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001086:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim19, &sClockSourceConfig) != HAL_OK)
 8001088:	f107 0308 	add.w	r3, r7, #8
 800108c:	4619      	mov	r1, r3
 800108e:	480d      	ldr	r0, [pc, #52]	; (80010c4 <MX_TIM19_Init+0x94>)
 8001090:	f004 fbaa 	bl	80057e8 <HAL_TIM_ConfigClockSource>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_TIM19_Init+0x6e>
  {
    Error_Handler();
 800109a:	f000 fabf 	bl	800161c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800109e:	2320      	movs	r3, #32
 80010a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a2:	2300      	movs	r3, #0
 80010a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim19, &sMasterConfig) != HAL_OK)
 80010a6:	463b      	mov	r3, r7
 80010a8:	4619      	mov	r1, r3
 80010aa:	4806      	ldr	r0, [pc, #24]	; (80010c4 <MX_TIM19_Init+0x94>)
 80010ac:	f004 ff06 	bl	8005ebc <HAL_TIMEx_MasterConfigSynchronization>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM19_Init+0x8a>
  {
    Error_Handler();
 80010b6:	f000 fab1 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN TIM19_Init 2 */

  /* USER CODE END TIM19_Init 2 */

}
 80010ba:	bf00      	nop
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	2000011c 	.word	0x2000011c
 80010c8:	40015c00 	.word	0x40015c00

080010cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <MX_USART1_UART_Init+0x58>)
 80010d2:	4a15      	ldr	r2, [pc, #84]	; (8001128 <MX_USART1_UART_Init+0x5c>)
 80010d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010d6:	4b13      	ldr	r3, [pc, #76]	; (8001124 <MX_USART1_UART_Init+0x58>)
 80010d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <MX_USART1_UART_Init+0x58>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <MX_USART1_UART_Init+0x58>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <MX_USART1_UART_Init+0x58>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <MX_USART1_UART_Init+0x58>)
 80010f2:	220c      	movs	r2, #12
 80010f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010f6:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <MX_USART1_UART_Init+0x58>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010fc:	4b09      	ldr	r3, [pc, #36]	; (8001124 <MX_USART1_UART_Init+0x58>)
 80010fe:	2200      	movs	r2, #0
 8001100:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001102:	4b08      	ldr	r3, [pc, #32]	; (8001124 <MX_USART1_UART_Init+0x58>)
 8001104:	2200      	movs	r2, #0
 8001106:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <MX_USART1_UART_Init+0x58>)
 800110a:	2200      	movs	r2, #0
 800110c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800110e:	4805      	ldr	r0, [pc, #20]	; (8001124 <MX_USART1_UART_Init+0x58>)
 8001110:	f004 ff48 	bl	8005fa4 <HAL_UART_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800111a:	f000 fa7f 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000274 	.word	0x20000274
 8001128:	40013800 	.word	0x40013800

0800112c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <MX_DMA_Init+0x48>)
 8001134:	695b      	ldr	r3, [r3, #20]
 8001136:	4a0f      	ldr	r2, [pc, #60]	; (8001174 <MX_DMA_Init+0x48>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6153      	str	r3, [r2, #20]
 800113e:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <MX_DMA_Init+0x48>)
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	2100      	movs	r1, #0
 800114e:	200b      	movs	r0, #11
 8001150:	f001 fb21 	bl	8002796 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001154:	200b      	movs	r0, #11
 8001156:	f001 fb3a 	bl	80027ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800115a:	2200      	movs	r2, #0
 800115c:	2100      	movs	r1, #0
 800115e:	200f      	movs	r0, #15
 8001160:	f001 fb19 	bl	8002796 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001164:	200f      	movs	r0, #15
 8001166:	f001 fb32 	bl	80027ce <HAL_NVIC_EnableIRQ>

}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40021000 	.word	0x40021000

08001178 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08c      	sub	sp, #48	; 0x30
 800117c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117e:	f107 031c 	add.w	r3, r7, #28
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]
 800118c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800118e:	4b39      	ldr	r3, [pc, #228]	; (8001274 <MX_GPIO_Init+0xfc>)
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	4a38      	ldr	r2, [pc, #224]	; (8001274 <MX_GPIO_Init+0xfc>)
 8001194:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001198:	6153      	str	r3, [r2, #20]
 800119a:	4b36      	ldr	r3, [pc, #216]	; (8001274 <MX_GPIO_Init+0xfc>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011a2:	61bb      	str	r3, [r7, #24]
 80011a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011a6:	4b33      	ldr	r3, [pc, #204]	; (8001274 <MX_GPIO_Init+0xfc>)
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	4a32      	ldr	r2, [pc, #200]	; (8001274 <MX_GPIO_Init+0xfc>)
 80011ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011b0:	6153      	str	r3, [r2, #20]
 80011b2:	4b30      	ldr	r3, [pc, #192]	; (8001274 <MX_GPIO_Init+0xfc>)
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011be:	4b2d      	ldr	r3, [pc, #180]	; (8001274 <MX_GPIO_Init+0xfc>)
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	4a2c      	ldr	r2, [pc, #176]	; (8001274 <MX_GPIO_Init+0xfc>)
 80011c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c8:	6153      	str	r3, [r2, #20]
 80011ca:	4b2a      	ldr	r3, [pc, #168]	; (8001274 <MX_GPIO_Init+0xfc>)
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d6:	4b27      	ldr	r3, [pc, #156]	; (8001274 <MX_GPIO_Init+0xfc>)
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	4a26      	ldr	r2, [pc, #152]	; (8001274 <MX_GPIO_Init+0xfc>)
 80011dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011e0:	6153      	str	r3, [r2, #20]
 80011e2:	4b24      	ldr	r3, [pc, #144]	; (8001274 <MX_GPIO_Init+0xfc>)
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011ee:	4b21      	ldr	r3, [pc, #132]	; (8001274 <MX_GPIO_Init+0xfc>)
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	4a20      	ldr	r2, [pc, #128]	; (8001274 <MX_GPIO_Init+0xfc>)
 80011f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011f8:	6153      	str	r3, [r2, #20]
 80011fa:	4b1e      	ldr	r3, [pc, #120]	; (8001274 <MX_GPIO_Init+0xfc>)
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001206:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <MX_GPIO_Init+0xfc>)
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	4a1a      	ldr	r2, [pc, #104]	; (8001274 <MX_GPIO_Init+0xfc>)
 800120c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001210:	6153      	str	r3, [r2, #20]
 8001212:	4b18      	ldr	r3, [pc, #96]	; (8001274 <MX_GPIO_Init+0xfc>)
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : INPUT_2_Pin INPUT_1_Pin INPUT_0_Pin */
  GPIO_InitStruct.Pin = INPUT_2_Pin|INPUT_1_Pin|INPUT_0_Pin;
 800121e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001222:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001224:	2300      	movs	r3, #0
 8001226:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001228:	2302      	movs	r3, #2
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122c:	f107 031c 	add.w	r3, r7, #28
 8001230:	4619      	mov	r1, r3
 8001232:	4811      	ldr	r0, [pc, #68]	; (8001278 <MX_GPIO_Init+0x100>)
 8001234:	f001 ff50 	bl	80030d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_5_Pin */
  GPIO_InitStruct.Pin = INPUT_5_Pin;
 8001238:	2380      	movs	r3, #128	; 0x80
 800123a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800123c:	2300      	movs	r3, #0
 800123e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001240:	2302      	movs	r3, #2
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(INPUT_5_GPIO_Port, &GPIO_InitStruct);
 8001244:	f107 031c 	add.w	r3, r7, #28
 8001248:	4619      	mov	r1, r3
 800124a:	480c      	ldr	r0, [pc, #48]	; (800127c <MX_GPIO_Init+0x104>)
 800124c:	f001 ff44 	bl	80030d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT_4_Pin INPUT_3_Pin */
  GPIO_InitStruct.Pin = INPUT_4_Pin|INPUT_3_Pin;
 8001250:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800125a:	2302      	movs	r3, #2
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125e:	f107 031c 	add.w	r3, r7, #28
 8001262:	4619      	mov	r1, r3
 8001264:	4806      	ldr	r0, [pc, #24]	; (8001280 <MX_GPIO_Init+0x108>)
 8001266:	f001 ff37 	bl	80030d8 <HAL_GPIO_Init>

}
 800126a:	bf00      	nop
 800126c:	3730      	adds	r7, #48	; 0x30
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40021000 	.word	0x40021000
 8001278:	48000800 	.word	0x48000800
 800127c:	48001400 	.word	0x48001400
 8001280:	48000400 	.word	0x48000400

08001284 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// When we got a complete RX message - This function runs
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_UART_RxCpltCallback can be implemented in the user file.
	 */

	uint8_t choice = RX_DATA[0];
 800128c:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <HAL_UART_RxCpltCallback+0x30>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	73fb      	strb	r3, [r7, #15]
	switch (choice) {
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	2b31      	cmp	r3, #49	; 0x31
 8001296:	d002      	beq.n	800129e <HAL_UART_RxCpltCallback+0x1a>
 8001298:	2b32      	cmp	r3, #50	; 0x32
 800129a:	d003      	beq.n	80012a4 <HAL_UART_RxCpltCallback+0x20>
		break;
	case 50: // "2"
		write_PWM_TIM_prescalers_to_memory();
		break;
	}
}
 800129c:	e005      	b.n	80012aa <HAL_UART_RxCpltCallback+0x26>
		read_PWM_DAC_periods_send_measurement_back();
 800129e:	f000 f83f 	bl	8001320 <read_PWM_DAC_periods_send_measurement_back>
		break;
 80012a2:	e002      	b.n	80012aa <HAL_UART_RxCpltCallback+0x26>
		write_PWM_TIM_prescalers_to_memory();
 80012a4:	f000 f976 	bl	8001594 <write_PWM_TIM_prescalers_to_memory>
		break;
 80012a8:	bf00      	nop
}
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000030 	.word	0x20000030

080012b8 <HAL_SDADC_InjectedConvCpltCallback>:


// When we got a measurement
void HAL_SDADC_InjectedConvCpltCallback(SDADC_HandleTypeDef *hsdadc){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	// CHANNEL will be 4, 6, 8 but randomly
	// SD_ADC for SDADC1 = [SDADC1_IN4, 0, SDADC1_IN6, SDADC3_IN6, SDADC1_IN8, SDADC3_IN8];
	if(hsdadc->Instance == SDADC1){
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a12      	ldr	r2, [pc, #72]	; (8001310 <HAL_SDADC_InjectedConvCpltCallback+0x58>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d10c      	bne.n	80012e4 <HAL_SDADC_InjectedConvCpltCallback+0x2c>
		SD_ADC[CHANNEL - 4] = HAL_SDADC_InjectedGetValue(hsdadc, &CHANNEL);
 80012ca:	4912      	ldr	r1, [pc, #72]	; (8001314 <HAL_SDADC_InjectedConvCpltCallback+0x5c>)
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f003 fe06 	bl	8004ede <HAL_SDADC_InjectedGetValue>
 80012d2:	4602      	mov	r2, r0
 80012d4:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <HAL_SDADC_InjectedConvCpltCallback+0x5c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	3b04      	subs	r3, #4
 80012da:	b291      	uxth	r1, r2
 80012dc:	4a0e      	ldr	r2, [pc, #56]	; (8001318 <HAL_SDADC_InjectedConvCpltCallback+0x60>)
 80012de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}else if(hsdadc->Instance == SDADC3){
		SD_ADC[CHANNEL - 4 + 1] = HAL_SDADC_InjectedGetValue(hsdadc, &CHANNEL);
	}
}
 80012e2:	e010      	b.n	8001306 <HAL_SDADC_InjectedConvCpltCallback+0x4e>
	}else if(hsdadc->Instance == SDADC3){
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a0c      	ldr	r2, [pc, #48]	; (800131c <HAL_SDADC_InjectedConvCpltCallback+0x64>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d10b      	bne.n	8001306 <HAL_SDADC_InjectedConvCpltCallback+0x4e>
		SD_ADC[CHANNEL - 4 + 1] = HAL_SDADC_InjectedGetValue(hsdadc, &CHANNEL);
 80012ee:	4909      	ldr	r1, [pc, #36]	; (8001314 <HAL_SDADC_InjectedConvCpltCallback+0x5c>)
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f003 fdf4 	bl	8004ede <HAL_SDADC_InjectedGetValue>
 80012f6:	4602      	mov	r2, r0
 80012f8:	4b06      	ldr	r3, [pc, #24]	; (8001314 <HAL_SDADC_InjectedConvCpltCallback+0x5c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	3b03      	subs	r3, #3
 80012fe:	b291      	uxth	r1, r2
 8001300:	4a05      	ldr	r2, [pc, #20]	; (8001318 <HAL_SDADC_InjectedConvCpltCallback+0x60>)
 8001302:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40016000 	.word	0x40016000
 8001314:	20000000 	.word	0x20000000
 8001318:	20000088 	.word	0x20000088
 800131c:	40016800 	.word	0x40016800

08001320 <read_PWM_DAC_periods_send_measurement_back>:

void read_PWM_DAC_periods_send_measurement_back() {
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
	// Get the PWM and DAC values
	uint8_t PWM_element_size = sizeof(PWM_PERIOD) / sizeof(PWM_PERIOD[0]);
 8001326:	2309      	movs	r3, #9
 8001328:	75fb      	strb	r3, [r7, #23]
	uint8_t DAC_element_size = sizeof(DAC_OUTPUT) / sizeof(DAC_OUTPUT[0]);
 800132a:	2303      	movs	r3, #3
 800132c:	75bb      	strb	r3, [r7, #22]
	fill_uint16_array(RX_DATA, PWM_PERIOD, 1, PWM_element_size); // 1 because the first element is the choice above
 800132e:	7dfb      	ldrb	r3, [r7, #23]
 8001330:	2201      	movs	r2, #1
 8001332:	492c      	ldr	r1, [pc, #176]	; (80013e4 <read_PWM_DAC_periods_send_measurement_back+0xc4>)
 8001334:	482c      	ldr	r0, [pc, #176]	; (80013e8 <read_PWM_DAC_periods_send_measurement_back+0xc8>)
 8001336:	f000 f865 	bl	8001404 <fill_uint16_array>
	fill_uint16_array(RX_DATA, DAC_OUTPUT, PWM_element_size * 2 + 1, DAC_element_size);
 800133a:	7dfb      	ldrb	r3, [r7, #23]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	b2db      	uxtb	r3, r3
 8001340:	3301      	adds	r3, #1
 8001342:	b2da      	uxtb	r2, r3
 8001344:	7dbb      	ldrb	r3, [r7, #22]
 8001346:	4929      	ldr	r1, [pc, #164]	; (80013ec <read_PWM_DAC_periods_send_measurement_back+0xcc>)
 8001348:	4827      	ldr	r0, [pc, #156]	; (80013e8 <read_PWM_DAC_periods_send_measurement_back+0xc8>)
 800134a:	f000 f85b 	bl	8001404 <fill_uint16_array>

	// Copy over
	uint16_t SD_ADC_VALUES[2] = {SD_ADC[0], SD_ADC[3]};
 800134e:	4b28      	ldr	r3, [pc, #160]	; (80013f0 <read_PWM_DAC_periods_send_measurement_back+0xd0>)
 8001350:	881b      	ldrh	r3, [r3, #0]
 8001352:	81bb      	strh	r3, [r7, #12]
 8001354:	4b26      	ldr	r3, [pc, #152]	; (80013f0 <read_PWM_DAC_periods_send_measurement_back+0xd0>)
 8001356:	88db      	ldrh	r3, [r3, #6]
 8001358:	81fb      	strh	r3, [r7, #14]
	uint16_t D_SD_ADC_VALUES[3] = {SD_ADC[2], SD_ADC[4], SD_ADC[5]}; // SD_ADC[1] = empty
 800135a:	4b25      	ldr	r3, [pc, #148]	; (80013f0 <read_PWM_DAC_periods_send_measurement_back+0xd0>)
 800135c:	889b      	ldrh	r3, [r3, #4]
 800135e:	80bb      	strh	r3, [r7, #4]
 8001360:	4b23      	ldr	r3, [pc, #140]	; (80013f0 <read_PWM_DAC_periods_send_measurement_back+0xd0>)
 8001362:	891b      	ldrh	r3, [r3, #8]
 8001364:	80fb      	strh	r3, [r7, #6]
 8001366:	4b22      	ldr	r3, [pc, #136]	; (80013f0 <read_PWM_DAC_periods_send_measurement_back+0xd0>)
 8001368:	895b      	ldrh	r3, [r3, #10]
 800136a:	813b      	strh	r3, [r7, #8]

	// Send the ADC, SDADC, DSDADC and DI values
	uint8_t ADC_element_size = sizeof(ADC_VALUES) / sizeof(ADC_VALUES[0]);
 800136c:	2304      	movs	r3, #4
 800136e:	757b      	strb	r3, [r7, #21]
	uint8_t SD_ADC_element_size = sizeof(SD_ADC_VALUES) / sizeof(SD_ADC_VALUES[0]);
 8001370:	2302      	movs	r3, #2
 8001372:	753b      	strb	r3, [r7, #20]
	uint8_t D_SD_ADC_element_size = sizeof(D_SD_ADC_VALUES) / sizeof(D_SD_ADC_VALUES[0]);
 8001374:	2303      	movs	r3, #3
 8001376:	74fb      	strb	r3, [r7, #19]
	uint8_t DI_element_size = sizeof(DI_VALUES) / sizeof(DI_VALUES[0]);
 8001378:	2306      	movs	r3, #6
 800137a:	74bb      	strb	r3, [r7, #18]
	uint8_t TX_DATA_element_size = sizeof(TX_DATA) / sizeof(TX_DATA[0]);
 800137c:	2318      	movs	r3, #24
 800137e:	747b      	strb	r3, [r7, #17]
	fill_TX_DATA_16(TX_DATA, ADC_VALUES, 0, ADC_element_size);
 8001380:	7d7b      	ldrb	r3, [r7, #21]
 8001382:	2200      	movs	r2, #0
 8001384:	491b      	ldr	r1, [pc, #108]	; (80013f4 <read_PWM_DAC_periods_send_measurement_back+0xd4>)
 8001386:	481c      	ldr	r0, [pc, #112]	; (80013f8 <read_PWM_DAC_periods_send_measurement_back+0xd8>)
 8001388:	f000 f873 	bl	8001472 <fill_TX_DATA_16>
	fill_TX_DATA_16(TX_DATA, SD_ADC_VALUES, ADC_element_size * 2, SD_ADC_element_size);
 800138c:	7d7b      	ldrb	r3, [r7, #21]
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	b2da      	uxtb	r2, r3
 8001392:	7d3b      	ldrb	r3, [r7, #20]
 8001394:	f107 010c 	add.w	r1, r7, #12
 8001398:	4817      	ldr	r0, [pc, #92]	; (80013f8 <read_PWM_DAC_periods_send_measurement_back+0xd8>)
 800139a:	f000 f86a 	bl	8001472 <fill_TX_DATA_16>
	fill_TX_DATA_16(TX_DATA, D_SD_ADC_VALUES, (ADC_element_size + SD_ADC_element_size) * 2, D_SD_ADC_element_size);
 800139e:	7d7a      	ldrb	r2, [r7, #21]
 80013a0:	7d3b      	ldrb	r3, [r7, #20]
 80013a2:	4413      	add	r3, r2
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	7cfb      	ldrb	r3, [r7, #19]
 80013ac:	1d39      	adds	r1, r7, #4
 80013ae:	4812      	ldr	r0, [pc, #72]	; (80013f8 <read_PWM_DAC_periods_send_measurement_back+0xd8>)
 80013b0:	f000 f85f 	bl	8001472 <fill_TX_DATA_16>
	fill_TX_DATA_8(TX_DATA, DI_VALUES, (ADC_element_size + SD_ADC_element_size + D_SD_ADC_element_size) * 2, DI_element_size);
 80013b4:	7d7a      	ldrb	r2, [r7, #21]
 80013b6:	7d3b      	ldrb	r3, [r7, #20]
 80013b8:	441a      	add	r2, r3
 80013ba:	7cfb      	ldrb	r3, [r7, #19]
 80013bc:	4413      	add	r3, r2
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	7cbb      	ldrb	r3, [r7, #18]
 80013c6:	490d      	ldr	r1, [pc, #52]	; (80013fc <read_PWM_DAC_periods_send_measurement_back+0xdc>)
 80013c8:	480b      	ldr	r0, [pc, #44]	; (80013f8 <read_PWM_DAC_periods_send_measurement_back+0xd8>)
 80013ca:	f000 f88c 	bl	80014e6 <fill_TX_DATA_8>
	HAL_UART_Transmit(&huart1, TX_DATA, TX_DATA_element_size, 10);
 80013ce:	7c7b      	ldrb	r3, [r7, #17]
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	230a      	movs	r3, #10
 80013d4:	4908      	ldr	r1, [pc, #32]	; (80013f8 <read_PWM_DAC_periods_send_measurement_back+0xd8>)
 80013d6:	480a      	ldr	r0, [pc, #40]	; (8001400 <read_PWM_DAC_periods_send_measurement_back+0xe0>)
 80013d8:	f004 fe32 	bl	8006040 <HAL_UART_Transmit>
}
 80013dc:	bf00      	nop
 80013de:	3718      	adds	r7, #24
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000064 	.word	0x20000064
 80013e8:	20000030 	.word	0x20000030
 80013ec:	20000078 	.word	0x20000078
 80013f0:	20000088 	.word	0x20000088
 80013f4:	20000080 	.word	0x20000080
 80013f8:	2000004c 	.word	0x2000004c
 80013fc:	20000094 	.word	0x20000094
 8001400:	20000274 	.word	0x20000274

08001404 <fill_uint16_array>:

void fill_uint16_array(uint8_t array8[], uint16_t array16[],
		uint8_t elements_that_has_been_written, uint8_t size) {
 8001404:	b480      	push	{r7}
 8001406:	b087      	sub	sp, #28
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	4611      	mov	r1, r2
 8001410:	461a      	mov	r2, r3
 8001412:	460b      	mov	r3, r1
 8001414:	71fb      	strb	r3, [r7, #7]
 8001416:	4613      	mov	r3, r2
 8001418:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < size; i++) {
 800141a:	2300      	movs	r3, #0
 800141c:	75fb      	strb	r3, [r7, #23]
 800141e:	e01e      	b.n	800145e <fill_uint16_array+0x5a>
		array16[i] = (array8[i + i + elements_that_has_been_written] << 8)
 8001420:	7dfb      	ldrb	r3, [r7, #23]
 8001422:	005a      	lsls	r2, r3, #1
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	4413      	add	r3, r2
 8001428:	461a      	mov	r2, r3
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4413      	add	r3, r2
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	021b      	lsls	r3, r3, #8
				| (array8[i + i + 1 + elements_that_has_been_written] & 0xFF);
 8001432:	b21a      	sxth	r2, r3
 8001434:	7dfb      	ldrb	r3, [r7, #23]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	1c59      	adds	r1, r3, #1
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	440b      	add	r3, r1
 800143e:	4619      	mov	r1, r3
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	440b      	add	r3, r1
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	b21b      	sxth	r3, r3
 8001448:	4313      	orrs	r3, r2
 800144a:	b219      	sxth	r1, r3
		array16[i] = (array8[i + i + elements_that_has_been_written] << 8)
 800144c:	7dfb      	ldrb	r3, [r7, #23]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	68ba      	ldr	r2, [r7, #8]
 8001452:	4413      	add	r3, r2
				| (array8[i + i + 1 + elements_that_has_been_written] & 0xFF);
 8001454:	b28a      	uxth	r2, r1
		array16[i] = (array8[i + i + elements_that_has_been_written] << 8)
 8001456:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < size; i++) {
 8001458:	7dfb      	ldrb	r3, [r7, #23]
 800145a:	3301      	adds	r3, #1
 800145c:	75fb      	strb	r3, [r7, #23]
 800145e:	7dfa      	ldrb	r2, [r7, #23]
 8001460:	79bb      	ldrb	r3, [r7, #6]
 8001462:	429a      	cmp	r2, r3
 8001464:	d3dc      	bcc.n	8001420 <fill_uint16_array+0x1c>
	}
}
 8001466:	bf00      	nop
 8001468:	371c      	adds	r7, #28
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <fill_TX_DATA_16>:

void fill_TX_DATA_16(uint8_t array8[], uint16_t array16[],
		uint8_t elements_that_has_been_written, uint8_t size) {
 8001472:	b480      	push	{r7}
 8001474:	b087      	sub	sp, #28
 8001476:	af00      	add	r7, sp, #0
 8001478:	60f8      	str	r0, [r7, #12]
 800147a:	60b9      	str	r1, [r7, #8]
 800147c:	4611      	mov	r1, r2
 800147e:	461a      	mov	r2, r3
 8001480:	460b      	mov	r3, r1
 8001482:	71fb      	strb	r3, [r7, #7]
 8001484:	4613      	mov	r3, r2
 8001486:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < size; i++) {
 8001488:	2300      	movs	r3, #0
 800148a:	75fb      	strb	r3, [r7, #23]
 800148c:	e021      	b.n	80014d2 <fill_TX_DATA_16+0x60>
		array8[i + i + elements_that_has_been_written] = array16[i] >> 8;
 800148e:	7dfb      	ldrb	r3, [r7, #23]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	4413      	add	r3, r2
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	0a1b      	lsrs	r3, r3, #8
 800149a:	b299      	uxth	r1, r3
 800149c:	7dfb      	ldrb	r3, [r7, #23]
 800149e:	005a      	lsls	r2, r3, #1
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	4413      	add	r3, r2
 80014a4:	461a      	mov	r2, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	4413      	add	r3, r2
 80014aa:	b2ca      	uxtb	r2, r1
 80014ac:	701a      	strb	r2, [r3, #0]
		array8[i + i + 1 + elements_that_has_been_written] = array16[i];
 80014ae:	7dfb      	ldrb	r3, [r7, #23]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	68ba      	ldr	r2, [r7, #8]
 80014b4:	4413      	add	r3, r2
 80014b6:	8819      	ldrh	r1, [r3, #0]
 80014b8:	7dfb      	ldrb	r3, [r7, #23]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	1c5a      	adds	r2, r3, #1
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	4413      	add	r3, r2
 80014c2:	461a      	mov	r2, r3
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4413      	add	r3, r2
 80014c8:	b2ca      	uxtb	r2, r1
 80014ca:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < size; i++) {
 80014cc:	7dfb      	ldrb	r3, [r7, #23]
 80014ce:	3301      	adds	r3, #1
 80014d0:	75fb      	strb	r3, [r7, #23]
 80014d2:	7dfa      	ldrb	r2, [r7, #23]
 80014d4:	79bb      	ldrb	r3, [r7, #6]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d3d9      	bcc.n	800148e <fill_TX_DATA_16+0x1c>
	}
}
 80014da:	bf00      	nop
 80014dc:	371c      	adds	r7, #28
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <fill_TX_DATA_8>:

void fill_TX_DATA_8(uint8_t array8[], uint16_t array16[],
		uint8_t elements_that_has_been_written, uint8_t size) {
 80014e6:	b480      	push	{r7}
 80014e8:	b087      	sub	sp, #28
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	60f8      	str	r0, [r7, #12]
 80014ee:	60b9      	str	r1, [r7, #8]
 80014f0:	4611      	mov	r1, r2
 80014f2:	461a      	mov	r2, r3
 80014f4:	460b      	mov	r3, r1
 80014f6:	71fb      	strb	r3, [r7, #7]
 80014f8:	4613      	mov	r3, r2
 80014fa:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < size; i++) {
 80014fc:	2300      	movs	r3, #0
 80014fe:	75fb      	strb	r3, [r7, #23]
 8001500:	e00f      	b.n	8001522 <fill_TX_DATA_8+0x3c>
		array8[i + elements_that_has_been_written] = array16[i];
 8001502:	7dfb      	ldrb	r3, [r7, #23]
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	68ba      	ldr	r2, [r7, #8]
 8001508:	4413      	add	r3, r2
 800150a:	8819      	ldrh	r1, [r3, #0]
 800150c:	7dfa      	ldrb	r2, [r7, #23]
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	4413      	add	r3, r2
 8001512:	461a      	mov	r2, r3
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	4413      	add	r3, r2
 8001518:	b2ca      	uxtb	r2, r1
 800151a:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < size; i++) {
 800151c:	7dfb      	ldrb	r3, [r7, #23]
 800151e:	3301      	adds	r3, #1
 8001520:	75fb      	strb	r3, [r7, #23]
 8001522:	7dfa      	ldrb	r2, [r7, #23]
 8001524:	79bb      	ldrb	r3, [r7, #6]
 8001526:	429a      	cmp	r2, r3
 8001528:	d3eb      	bcc.n	8001502 <fill_TX_DATA_8+0x1c>
	}
}
 800152a:	bf00      	nop
 800152c:	371c      	adds	r7, #28
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
	...

08001538 <read_PWM_TIM_prescalers_from_memory>:

void read_PWM_TIM_prescalers_from_memory() {
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
	uint32_t Nsize = sizeof(TIM_PRESCALES) / sizeof(TIM_PRESCALES[0]);
 800153e:	2304      	movs	r3, #4
 8001540:	607b      	str	r3, [r7, #4]
	FlashReadN(0, TIM_PRESCALES, Nsize, DATA_TYPE_U16);
 8001542:	2301      	movs	r3, #1
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	490e      	ldr	r1, [pc, #56]	; (8001580 <read_PWM_TIM_prescalers_from_memory+0x48>)
 8001548:	2000      	movs	r0, #0
 800154a:	f7fe ff0f 	bl	800036c <FlashReadN>
	htim2.Init.Prescaler = TIM_PRESCALES[0];
 800154e:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <read_PWM_TIM_prescalers_from_memory+0x48>)
 8001550:	881b      	ldrh	r3, [r3, #0]
 8001552:	461a      	mov	r2, r3
 8001554:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <read_PWM_TIM_prescalers_from_memory+0x4c>)
 8001556:	605a      	str	r2, [r3, #4]
	htim3.Init.Prescaler = TIM_PRESCALES[1];
 8001558:	4b09      	ldr	r3, [pc, #36]	; (8001580 <read_PWM_TIM_prescalers_from_memory+0x48>)
 800155a:	885b      	ldrh	r3, [r3, #2]
 800155c:	461a      	mov	r2, r3
 800155e:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <read_PWM_TIM_prescalers_from_memory+0x50>)
 8001560:	605a      	str	r2, [r3, #4]
	htim4.Init.Prescaler = TIM_PRESCALES[2];
 8001562:	4b07      	ldr	r3, [pc, #28]	; (8001580 <read_PWM_TIM_prescalers_from_memory+0x48>)
 8001564:	889b      	ldrh	r3, [r3, #4]
 8001566:	461a      	mov	r2, r3
 8001568:	4b08      	ldr	r3, [pc, #32]	; (800158c <read_PWM_TIM_prescalers_from_memory+0x54>)
 800156a:	605a      	str	r2, [r3, #4]
	htim5.Init.Prescaler = TIM_PRESCALES[3];
 800156c:	4b04      	ldr	r3, [pc, #16]	; (8001580 <read_PWM_TIM_prescalers_from_memory+0x48>)
 800156e:	88db      	ldrh	r3, [r3, #6]
 8001570:	461a      	mov	r2, r3
 8001572:	4b07      	ldr	r3, [pc, #28]	; (8001590 <read_PWM_TIM_prescalers_from_memory+0x58>)
 8001574:	605a      	str	r2, [r3, #4]
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	200000a0 	.word	0x200000a0
 8001584:	200003cc 	.word	0x200003cc
 8001588:	200001b4 	.word	0x200001b4
 800158c:	200000bc 	.word	0x200000bc
 8001590:	20000168 	.word	0x20000168

08001594 <write_PWM_TIM_prescalers_to_memory>:

void write_PWM_TIM_prescalers_to_memory() {
 8001594:	b5b0      	push	{r4, r5, r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	466b      	mov	r3, sp
 800159c:	461d      	mov	r5, r3
	uint32_t Nsize = sizeof(TIM_PRESCALES) / sizeof(TIM_PRESCALES[0]);
 800159e:	2304      	movs	r3, #4
 80015a0:	60fb      	str	r3, [r7, #12]
	uint16_t wrBuf[Nsize];
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	4603      	mov	r3, r0
 80015a6:	3b01      	subs	r3, #1
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	4601      	mov	r1, r0
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	f04f 0300 	mov.w	r3, #0
 80015b4:	f04f 0400 	mov.w	r4, #0
 80015b8:	0114      	lsls	r4, r2, #4
 80015ba:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80015be:	010b      	lsls	r3, r1, #4
 80015c0:	4601      	mov	r1, r0
 80015c2:	f04f 0200 	mov.w	r2, #0
 80015c6:	f04f 0300 	mov.w	r3, #0
 80015ca:	f04f 0400 	mov.w	r4, #0
 80015ce:	0114      	lsls	r4, r2, #4
 80015d0:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80015d4:	010b      	lsls	r3, r1, #4
 80015d6:	0043      	lsls	r3, r0, #1
 80015d8:	3301      	adds	r3, #1
 80015da:	3307      	adds	r3, #7
 80015dc:	08db      	lsrs	r3, r3, #3
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	ebad 0d03 	sub.w	sp, sp, r3
 80015e4:	466b      	mov	r3, sp
 80015e6:	3301      	adds	r3, #1
 80015e8:	085b      	lsrs	r3, r3, #1
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	607b      	str	r3, [r7, #4]
	fill_uint16_array(RX_DATA, wrBuf, 1, Nsize); // 1 because choice is first element
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2201      	movs	r2, #1
 80015f6:	4808      	ldr	r0, [pc, #32]	; (8001618 <write_PWM_TIM_prescalers_to_memory+0x84>)
 80015f8:	f7ff ff04 	bl	8001404 <fill_uint16_array>
	FlashWriteN(0, wrBuf, Nsize, DATA_TYPE_U16);
 80015fc:	6879      	ldr	r1, [r7, #4]
 80015fe:	2301      	movs	r3, #1
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	2000      	movs	r0, #0
 8001604:	f7fe fe0c 	bl	8000220 <FlashWriteN>
	read_PWM_TIM_prescalers_from_memory();
 8001608:	f7ff ff96 	bl	8001538 <read_PWM_TIM_prescalers_from_memory>
 800160c:	46ad      	mov	sp, r5
}
 800160e:	bf00      	nop
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bdb0      	pop	{r4, r5, r7, pc}
 8001616:	bf00      	nop
 8001618:	20000030 	.word	0x20000030

0800161c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001620:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001622:	e7fe      	b.n	8001622 <Error_Handler+0x6>

08001624 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162a:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <HAL_MspInit+0x44>)
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	4a0e      	ldr	r2, [pc, #56]	; (8001668 <HAL_MspInit+0x44>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	6193      	str	r3, [r2, #24]
 8001636:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <HAL_MspInit+0x44>)
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	607b      	str	r3, [r7, #4]
 8001640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001642:	4b09      	ldr	r3, [pc, #36]	; (8001668 <HAL_MspInit+0x44>)
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	4a08      	ldr	r2, [pc, #32]	; (8001668 <HAL_MspInit+0x44>)
 8001648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800164c:	61d3      	str	r3, [r2, #28]
 800164e:	4b06      	ldr	r3, [pc, #24]	; (8001668 <HAL_MspInit+0x44>)
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001656:	603b      	str	r3, [r7, #0]
 8001658:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	40021000 	.word	0x40021000

0800166c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08a      	sub	sp, #40	; 0x28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a29      	ldr	r2, [pc, #164]	; (8001730 <HAL_ADC_MspInit+0xc4>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d14c      	bne.n	8001728 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800168e:	4b29      	ldr	r3, [pc, #164]	; (8001734 <HAL_ADC_MspInit+0xc8>)
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	4a28      	ldr	r2, [pc, #160]	; (8001734 <HAL_ADC_MspInit+0xc8>)
 8001694:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001698:	6193      	str	r3, [r2, #24]
 800169a:	4b26      	ldr	r3, [pc, #152]	; (8001734 <HAL_ADC_MspInit+0xc8>)
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a6:	4b23      	ldr	r3, [pc, #140]	; (8001734 <HAL_ADC_MspInit+0xc8>)
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	4a22      	ldr	r2, [pc, #136]	; (8001734 <HAL_ADC_MspInit+0xc8>)
 80016ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b0:	6153      	str	r3, [r2, #20]
 80016b2:	4b20      	ldr	r3, [pc, #128]	; (8001734 <HAL_ADC_MspInit+0xc8>)
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80016be:	230f      	movs	r3, #15
 80016c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016c2:	2303      	movs	r3, #3
 80016c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ca:	f107 0314 	add.w	r3, r7, #20
 80016ce:	4619      	mov	r1, r3
 80016d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d4:	f001 fd00 	bl	80030d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80016d8:	4b17      	ldr	r3, [pc, #92]	; (8001738 <HAL_ADC_MspInit+0xcc>)
 80016da:	4a18      	ldr	r2, [pc, #96]	; (800173c <HAL_ADC_MspInit+0xd0>)
 80016dc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016de:	4b16      	ldr	r3, [pc, #88]	; (8001738 <HAL_ADC_MspInit+0xcc>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016e4:	4b14      	ldr	r3, [pc, #80]	; (8001738 <HAL_ADC_MspInit+0xcc>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80016ea:	4b13      	ldr	r3, [pc, #76]	; (8001738 <HAL_ADC_MspInit+0xcc>)
 80016ec:	2280      	movs	r2, #128	; 0x80
 80016ee:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016f0:	4b11      	ldr	r3, [pc, #68]	; (8001738 <HAL_ADC_MspInit+0xcc>)
 80016f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016f6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016f8:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <HAL_ADC_MspInit+0xcc>)
 80016fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016fe:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001700:	4b0d      	ldr	r3, [pc, #52]	; (8001738 <HAL_ADC_MspInit+0xcc>)
 8001702:	2220      	movs	r2, #32
 8001704:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001706:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <HAL_ADC_MspInit+0xcc>)
 8001708:	2200      	movs	r2, #0
 800170a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800170c:	480a      	ldr	r0, [pc, #40]	; (8001738 <HAL_ADC_MspInit+0xcc>)
 800170e:	f001 f957 	bl	80029c0 <HAL_DMA_Init>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8001718:	f7ff ff80 	bl	800161c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4a06      	ldr	r2, [pc, #24]	; (8001738 <HAL_ADC_MspInit+0xcc>)
 8001720:	621a      	str	r2, [r3, #32]
 8001722:	4a05      	ldr	r2, [pc, #20]	; (8001738 <HAL_ADC_MspInit+0xcc>)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001728:	bf00      	nop
 800172a:	3728      	adds	r7, #40	; 0x28
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40012400 	.word	0x40012400
 8001734:	40021000 	.word	0x40021000
 8001738:	2000033c 	.word	0x2000033c
 800173c:	40020008 	.word	0x40020008

08001740 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08c      	sub	sp, #48	; 0x30
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001748:	f107 031c 	add.w	r3, r7, #28
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a2b      	ldr	r2, [pc, #172]	; (800180c <HAL_DAC_MspInit+0xcc>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d125      	bne.n	80017ae <HAL_DAC_MspInit+0x6e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001762:	4b2b      	ldr	r3, [pc, #172]	; (8001810 <HAL_DAC_MspInit+0xd0>)
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	4a2a      	ldr	r2, [pc, #168]	; (8001810 <HAL_DAC_MspInit+0xd0>)
 8001768:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800176c:	61d3      	str	r3, [r2, #28]
 800176e:	4b28      	ldr	r3, [pc, #160]	; (8001810 <HAL_DAC_MspInit+0xd0>)
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001776:	61bb      	str	r3, [r7, #24]
 8001778:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177a:	4b25      	ldr	r3, [pc, #148]	; (8001810 <HAL_DAC_MspInit+0xd0>)
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	4a24      	ldr	r2, [pc, #144]	; (8001810 <HAL_DAC_MspInit+0xd0>)
 8001780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001784:	6153      	str	r3, [r2, #20]
 8001786:	4b22      	ldr	r3, [pc, #136]	; (8001810 <HAL_DAC_MspInit+0xd0>)
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178e:	617b      	str	r3, [r7, #20]
 8001790:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001792:	2330      	movs	r3, #48	; 0x30
 8001794:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001796:	2303      	movs	r3, #3
 8001798:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179e:	f107 031c 	add.w	r3, r7, #28
 80017a2:	4619      	mov	r1, r3
 80017a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a8:	f001 fc96 	bl	80030d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
 80017ac:	e029      	b.n	8001802 <HAL_DAC_MspInit+0xc2>
  else if(hdac->Instance==DAC2)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a18      	ldr	r2, [pc, #96]	; (8001814 <HAL_DAC_MspInit+0xd4>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d124      	bne.n	8001802 <HAL_DAC_MspInit+0xc2>
    __HAL_RCC_DAC2_CLK_ENABLE();
 80017b8:	4b15      	ldr	r3, [pc, #84]	; (8001810 <HAL_DAC_MspInit+0xd0>)
 80017ba:	69db      	ldr	r3, [r3, #28]
 80017bc:	4a14      	ldr	r2, [pc, #80]	; (8001810 <HAL_DAC_MspInit+0xd0>)
 80017be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80017c2:	61d3      	str	r3, [r2, #28]
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <HAL_DAC_MspInit+0xd0>)
 80017c6:	69db      	ldr	r3, [r3, #28]
 80017c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d0:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <HAL_DAC_MspInit+0xd0>)
 80017d2:	695b      	ldr	r3, [r3, #20]
 80017d4:	4a0e      	ldr	r2, [pc, #56]	; (8001810 <HAL_DAC_MspInit+0xd0>)
 80017d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017da:	6153      	str	r3, [r2, #20]
 80017dc:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <HAL_DAC_MspInit+0xd0>)
 80017de:	695b      	ldr	r3, [r3, #20]
 80017e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017e8:	2340      	movs	r3, #64	; 0x40
 80017ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ec:	2303      	movs	r3, #3
 80017ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f4:	f107 031c 	add.w	r3, r7, #28
 80017f8:	4619      	mov	r1, r3
 80017fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017fe:	f001 fc6b 	bl	80030d8 <HAL_GPIO_Init>
}
 8001802:	bf00      	nop
 8001804:	3730      	adds	r7, #48	; 0x30
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40007400 	.word	0x40007400
 8001810:	40021000 	.word	0x40021000
 8001814:	40009800 	.word	0x40009800

08001818 <HAL_SDADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hsdadc: SDADC handle pointer
* @retval None
*/
void HAL_SDADC_MspInit(SDADC_HandleTypeDef* hsdadc)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08e      	sub	sp, #56	; 0x38
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001820:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
  if(hsdadc->Instance==SDADC1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a4b      	ldr	r2, [pc, #300]	; (8001964 <HAL_SDADC_MspInit+0x14c>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d145      	bne.n	80018c6 <HAL_SDADC_MspInit+0xae>
  {
  /* USER CODE BEGIN SDADC1_MspInit 0 */

  /* USER CODE END SDADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDADC1_CLK_ENABLE();
 800183a:	4b4b      	ldr	r3, [pc, #300]	; (8001968 <HAL_SDADC_MspInit+0x150>)
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	4a4a      	ldr	r2, [pc, #296]	; (8001968 <HAL_SDADC_MspInit+0x150>)
 8001840:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001844:	6193      	str	r3, [r2, #24]
 8001846:	4b48      	ldr	r3, [pc, #288]	; (8001968 <HAL_SDADC_MspInit+0x150>)
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800184e:	623b      	str	r3, [r7, #32]
 8001850:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001852:	4b45      	ldr	r3, [pc, #276]	; (8001968 <HAL_SDADC_MspInit+0x150>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	4a44      	ldr	r2, [pc, #272]	; (8001968 <HAL_SDADC_MspInit+0x150>)
 8001858:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800185c:	6153      	str	r3, [r2, #20]
 800185e:	4b42      	ldr	r3, [pc, #264]	; (8001968 <HAL_SDADC_MspInit+0x150>)
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001866:	61fb      	str	r3, [r7, #28]
 8001868:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800186a:	4b3f      	ldr	r3, [pc, #252]	; (8001968 <HAL_SDADC_MspInit+0x150>)
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	4a3e      	ldr	r2, [pc, #248]	; (8001968 <HAL_SDADC_MspInit+0x150>)
 8001870:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001874:	6153      	str	r3, [r2, #20]
 8001876:	4b3c      	ldr	r3, [pc, #240]	; (8001968 <HAL_SDADC_MspInit+0x150>)
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800187e:	61bb      	str	r3, [r7, #24]
 8001880:	69bb      	ldr	r3, [r7, #24]
    PB1     ------> SDADC1_AIN6M
    PB2     ------> SDADC1_AIN4P
    PE8     ------> SDADC1_AIN8P
    PE9     ------> SDADC1_AIN8M
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001882:	2307      	movs	r3, #7
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001886:	2303      	movs	r3, #3
 8001888:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001892:	4619      	mov	r1, r3
 8001894:	4835      	ldr	r0, [pc, #212]	; (800196c <HAL_SDADC_MspInit+0x154>)
 8001896:	f001 fc1f 	bl	80030d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800189a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018a0:	2303      	movs	r3, #3
 80018a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ac:	4619      	mov	r1, r3
 80018ae:	4830      	ldr	r0, [pc, #192]	; (8001970 <HAL_SDADC_MspInit+0x158>)
 80018b0:	f001 fc12 	bl	80030d8 <HAL_GPIO_Init>

    /* SDADC1 interrupt Init */
    HAL_NVIC_SetPriority(SDADC1_IRQn, 0, 0);
 80018b4:	2200      	movs	r2, #0
 80018b6:	2100      	movs	r1, #0
 80018b8:	203d      	movs	r0, #61	; 0x3d
 80018ba:	f000 ff6c 	bl	8002796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDADC1_IRQn);
 80018be:	203d      	movs	r0, #61	; 0x3d
 80018c0:	f000 ff85 	bl	80027ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDADC3_MspInit 1 */

  /* USER CODE END SDADC3_MspInit 1 */
  }

}
 80018c4:	e04a      	b.n	800195c <HAL_SDADC_MspInit+0x144>
  else if(hsdadc->Instance==SDADC3)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a2a      	ldr	r2, [pc, #168]	; (8001974 <HAL_SDADC_MspInit+0x15c>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d145      	bne.n	800195c <HAL_SDADC_MspInit+0x144>
    __HAL_RCC_SDADC3_CLK_ENABLE();
 80018d0:	4b25      	ldr	r3, [pc, #148]	; (8001968 <HAL_SDADC_MspInit+0x150>)
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	4a24      	ldr	r2, [pc, #144]	; (8001968 <HAL_SDADC_MspInit+0x150>)
 80018d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80018da:	6193      	str	r3, [r2, #24]
 80018dc:	4b22      	ldr	r3, [pc, #136]	; (8001968 <HAL_SDADC_MspInit+0x150>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018e4:	617b      	str	r3, [r7, #20]
 80018e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e8:	4b1f      	ldr	r3, [pc, #124]	; (8001968 <HAL_SDADC_MspInit+0x150>)
 80018ea:	695b      	ldr	r3, [r3, #20]
 80018ec:	4a1e      	ldr	r2, [pc, #120]	; (8001968 <HAL_SDADC_MspInit+0x150>)
 80018ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018f2:	6153      	str	r3, [r2, #20]
 80018f4:	4b1c      	ldr	r3, [pc, #112]	; (8001968 <HAL_SDADC_MspInit+0x150>)
 80018f6:	695b      	ldr	r3, [r3, #20]
 80018f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001900:	4b19      	ldr	r3, [pc, #100]	; (8001968 <HAL_SDADC_MspInit+0x150>)
 8001902:	695b      	ldr	r3, [r3, #20]
 8001904:	4a18      	ldr	r2, [pc, #96]	; (8001968 <HAL_SDADC_MspInit+0x150>)
 8001906:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800190a:	6153      	str	r3, [r2, #20]
 800190c:	4b16      	ldr	r3, [pc, #88]	; (8001968 <HAL_SDADC_MspInit+0x150>)
 800190e:	695b      	ldr	r3, [r3, #20]
 8001910:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001918:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800191e:	2303      	movs	r3, #3
 8001920:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800192a:	4619      	mov	r1, r3
 800192c:	480f      	ldr	r0, [pc, #60]	; (800196c <HAL_SDADC_MspInit+0x154>)
 800192e:	f001 fbd3 	bl	80030d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001932:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001936:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001938:	2303      	movs	r3, #3
 800193a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001944:	4619      	mov	r1, r3
 8001946:	480c      	ldr	r0, [pc, #48]	; (8001978 <HAL_SDADC_MspInit+0x160>)
 8001948:	f001 fbc6 	bl	80030d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDADC3_IRQn, 0, 0);
 800194c:	2200      	movs	r2, #0
 800194e:	2100      	movs	r1, #0
 8001950:	203f      	movs	r0, #63	; 0x3f
 8001952:	f000 ff20 	bl	8002796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDADC3_IRQn);
 8001956:	203f      	movs	r0, #63	; 0x3f
 8001958:	f000 ff39 	bl	80027ce <HAL_NVIC_EnableIRQ>
}
 800195c:	bf00      	nop
 800195e:	3738      	adds	r7, #56	; 0x38
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40016000 	.word	0x40016000
 8001968:	40021000 	.word	0x40021000
 800196c:	48000400 	.word	0x48000400
 8001970:	48001000 	.word	0x48001000
 8001974:	40016800 	.word	0x40016800
 8001978:	48000c00 	.word	0x48000c00

0800197c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800197c:	b480      	push	{r7}
 800197e:	b089      	sub	sp, #36	; 0x24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800198c:	d10c      	bne.n	80019a8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800198e:	4b36      	ldr	r3, [pc, #216]	; (8001a68 <HAL_TIM_Base_MspInit+0xec>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	4a35      	ldr	r2, [pc, #212]	; (8001a68 <HAL_TIM_Base_MspInit+0xec>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	61d3      	str	r3, [r2, #28]
 800199a:	4b33      	ldr	r3, [pc, #204]	; (8001a68 <HAL_TIM_Base_MspInit+0xec>)
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	61fb      	str	r3, [r7, #28]
 80019a4:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM19_MspInit 1 */

  /* USER CODE END TIM19_MspInit 1 */
  }

}
 80019a6:	e058      	b.n	8001a5a <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a2f      	ldr	r2, [pc, #188]	; (8001a6c <HAL_TIM_Base_MspInit+0xf0>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d10c      	bne.n	80019cc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019b2:	4b2d      	ldr	r3, [pc, #180]	; (8001a68 <HAL_TIM_Base_MspInit+0xec>)
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	4a2c      	ldr	r2, [pc, #176]	; (8001a68 <HAL_TIM_Base_MspInit+0xec>)
 80019b8:	f043 0302 	orr.w	r3, r3, #2
 80019bc:	61d3      	str	r3, [r2, #28]
 80019be:	4b2a      	ldr	r3, [pc, #168]	; (8001a68 <HAL_TIM_Base_MspInit+0xec>)
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	61bb      	str	r3, [r7, #24]
 80019c8:	69bb      	ldr	r3, [r7, #24]
}
 80019ca:	e046      	b.n	8001a5a <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM4)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a27      	ldr	r2, [pc, #156]	; (8001a70 <HAL_TIM_Base_MspInit+0xf4>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d10c      	bne.n	80019f0 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019d6:	4b24      	ldr	r3, [pc, #144]	; (8001a68 <HAL_TIM_Base_MspInit+0xec>)
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	4a23      	ldr	r2, [pc, #140]	; (8001a68 <HAL_TIM_Base_MspInit+0xec>)
 80019dc:	f043 0304 	orr.w	r3, r3, #4
 80019e0:	61d3      	str	r3, [r2, #28]
 80019e2:	4b21      	ldr	r3, [pc, #132]	; (8001a68 <HAL_TIM_Base_MspInit+0xec>)
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	f003 0304 	and.w	r3, r3, #4
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	697b      	ldr	r3, [r7, #20]
}
 80019ee:	e034      	b.n	8001a5a <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM5)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a1f      	ldr	r2, [pc, #124]	; (8001a74 <HAL_TIM_Base_MspInit+0xf8>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d10c      	bne.n	8001a14 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80019fa:	4b1b      	ldr	r3, [pc, #108]	; (8001a68 <HAL_TIM_Base_MspInit+0xec>)
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	4a1a      	ldr	r2, [pc, #104]	; (8001a68 <HAL_TIM_Base_MspInit+0xec>)
 8001a00:	f043 0308 	orr.w	r3, r3, #8
 8001a04:	61d3      	str	r3, [r2, #28]
 8001a06:	4b18      	ldr	r3, [pc, #96]	; (8001a68 <HAL_TIM_Base_MspInit+0xec>)
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	f003 0308 	and.w	r3, r3, #8
 8001a0e:	613b      	str	r3, [r7, #16]
 8001a10:	693b      	ldr	r3, [r7, #16]
}
 8001a12:	e022      	b.n	8001a5a <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM6)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a17      	ldr	r2, [pc, #92]	; (8001a78 <HAL_TIM_Base_MspInit+0xfc>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d10c      	bne.n	8001a38 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a1e:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <HAL_TIM_Base_MspInit+0xec>)
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	4a11      	ldr	r2, [pc, #68]	; (8001a68 <HAL_TIM_Base_MspInit+0xec>)
 8001a24:	f043 0310 	orr.w	r3, r3, #16
 8001a28:	61d3      	str	r3, [r2, #28]
 8001a2a:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <HAL_TIM_Base_MspInit+0xec>)
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	f003 0310 	and.w	r3, r3, #16
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
}
 8001a36:	e010      	b.n	8001a5a <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM19)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a0f      	ldr	r2, [pc, #60]	; (8001a7c <HAL_TIM_Base_MspInit+0x100>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d10b      	bne.n	8001a5a <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM19_CLK_ENABLE();
 8001a42:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <HAL_TIM_Base_MspInit+0xec>)
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	4a08      	ldr	r2, [pc, #32]	; (8001a68 <HAL_TIM_Base_MspInit+0xec>)
 8001a48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a4c:	6193      	str	r3, [r2, #24]
 8001a4e:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <HAL_TIM_Base_MspInit+0xec>)
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a56:	60bb      	str	r3, [r7, #8]
 8001a58:	68bb      	ldr	r3, [r7, #8]
}
 8001a5a:	bf00      	nop
 8001a5c:	3724      	adds	r7, #36	; 0x24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	40000400 	.word	0x40000400
 8001a70:	40000800 	.word	0x40000800
 8001a74:	40000c00 	.word	0x40000c00
 8001a78:	40001000 	.word	0x40001000
 8001a7c:	40015c00 	.word	0x40015c00

08001a80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08c      	sub	sp, #48	; 0x30
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	f107 031c 	add.w	r3, r7, #28
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aa0:	d11e      	bne.n	8001ae0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa2:	4b53      	ldr	r3, [pc, #332]	; (8001bf0 <HAL_TIM_MspPostInit+0x170>)
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	4a52      	ldr	r2, [pc, #328]	; (8001bf0 <HAL_TIM_MspPostInit+0x170>)
 8001aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aac:	6153      	str	r3, [r2, #20]
 8001aae:	4b50      	ldr	r3, [pc, #320]	; (8001bf0 <HAL_TIM_MspPostInit+0x170>)
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab6:	61bb      	str	r3, [r7, #24]
 8001ab8:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001aba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001acc:	2301      	movs	r3, #1
 8001ace:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad0:	f107 031c 	add.w	r3, r7, #28
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ada:	f001 fafd 	bl	80030d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001ade:	e082      	b.n	8001be6 <HAL_TIM_MspPostInit+0x166>
  else if(htim->Instance==TIM3)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a43      	ldr	r2, [pc, #268]	; (8001bf4 <HAL_TIM_MspPostInit+0x174>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d11c      	bne.n	8001b24 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aea:	4b41      	ldr	r3, [pc, #260]	; (8001bf0 <HAL_TIM_MspPostInit+0x170>)
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	4a40      	ldr	r2, [pc, #256]	; (8001bf0 <HAL_TIM_MspPostInit+0x170>)
 8001af0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001af4:	6153      	str	r3, [r2, #20]
 8001af6:	4b3e      	ldr	r3, [pc, #248]	; (8001bf0 <HAL_TIM_MspPostInit+0x170>)
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001afe:	617b      	str	r3, [r7, #20]
 8001b00:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001b02:	2330      	movs	r3, #48	; 0x30
 8001b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b06:	2302      	movs	r3, #2
 8001b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b12:	2302      	movs	r3, #2
 8001b14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b16:	f107 031c 	add.w	r3, r7, #28
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4836      	ldr	r0, [pc, #216]	; (8001bf8 <HAL_TIM_MspPostInit+0x178>)
 8001b1e:	f001 fadb 	bl	80030d8 <HAL_GPIO_Init>
}
 8001b22:	e060      	b.n	8001be6 <HAL_TIM_MspPostInit+0x166>
  else if(htim->Instance==TIM4)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a34      	ldr	r2, [pc, #208]	; (8001bfc <HAL_TIM_MspPostInit+0x17c>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d138      	bne.n	8001ba0 <HAL_TIM_MspPostInit+0x120>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b2e:	4b30      	ldr	r3, [pc, #192]	; (8001bf0 <HAL_TIM_MspPostInit+0x170>)
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	4a2f      	ldr	r2, [pc, #188]	; (8001bf0 <HAL_TIM_MspPostInit+0x170>)
 8001b34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b38:	6153      	str	r3, [r2, #20]
 8001b3a:	4b2d      	ldr	r3, [pc, #180]	; (8001bf0 <HAL_TIM_MspPostInit+0x170>)
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b42:	613b      	str	r3, [r7, #16]
 8001b44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b46:	4b2a      	ldr	r3, [pc, #168]	; (8001bf0 <HAL_TIM_MspPostInit+0x170>)
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	4a29      	ldr	r2, [pc, #164]	; (8001bf0 <HAL_TIM_MspPostInit+0x170>)
 8001b4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b50:	6153      	str	r3, [r2, #20]
 8001b52:	4b27      	ldr	r3, [pc, #156]	; (8001bf0 <HAL_TIM_MspPostInit+0x170>)
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b5e:	2340      	movs	r3, #64	; 0x40
 8001b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b62:	2302      	movs	r3, #2
 8001b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b72:	f107 031c 	add.w	r3, r7, #28
 8001b76:	4619      	mov	r1, r3
 8001b78:	4821      	ldr	r0, [pc, #132]	; (8001c00 <HAL_TIM_MspPostInit+0x180>)
 8001b7a:	f001 faad 	bl	80030d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b7e:	23c0      	movs	r3, #192	; 0xc0
 8001b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b82:	2302      	movs	r3, #2
 8001b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b92:	f107 031c 	add.w	r3, r7, #28
 8001b96:	4619      	mov	r1, r3
 8001b98:	4817      	ldr	r0, [pc, #92]	; (8001bf8 <HAL_TIM_MspPostInit+0x178>)
 8001b9a:	f001 fa9d 	bl	80030d8 <HAL_GPIO_Init>
}
 8001b9e:	e022      	b.n	8001be6 <HAL_TIM_MspPostInit+0x166>
  else if(htim->Instance==TIM5)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a17      	ldr	r2, [pc, #92]	; (8001c04 <HAL_TIM_MspPostInit+0x184>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d11d      	bne.n	8001be6 <HAL_TIM_MspPostInit+0x166>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001baa:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <HAL_TIM_MspPostInit+0x170>)
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	4a10      	ldr	r2, [pc, #64]	; (8001bf0 <HAL_TIM_MspPostInit+0x170>)
 8001bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb4:	6153      	str	r3, [r2, #20]
 8001bb6:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <HAL_TIM_MspPostInit+0x170>)
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbe:	60bb      	str	r3, [r7, #8]
 8001bc0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001bc2:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd8:	f107 031c 	add.w	r3, r7, #28
 8001bdc:	4619      	mov	r1, r3
 8001bde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be2:	f001 fa79 	bl	80030d8 <HAL_GPIO_Init>
}
 8001be6:	bf00      	nop
 8001be8:	3730      	adds	r7, #48	; 0x30
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40000400 	.word	0x40000400
 8001bf8:	48000400 	.word	0x48000400
 8001bfc:	40000800 	.word	0x40000800
 8001c00:	48001400 	.word	0x48001400
 8001c04:	40000c00 	.word	0x40000c00

08001c08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08a      	sub	sp, #40	; 0x28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c10:	f107 0314 	add.w	r3, r7, #20
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a2b      	ldr	r2, [pc, #172]	; (8001cd4 <HAL_UART_MspInit+0xcc>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d14f      	bne.n	8001cca <HAL_UART_MspInit+0xc2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c2a:	4b2b      	ldr	r3, [pc, #172]	; (8001cd8 <HAL_UART_MspInit+0xd0>)
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	4a2a      	ldr	r2, [pc, #168]	; (8001cd8 <HAL_UART_MspInit+0xd0>)
 8001c30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c34:	6193      	str	r3, [r2, #24]
 8001c36:	4b28      	ldr	r3, [pc, #160]	; (8001cd8 <HAL_UART_MspInit+0xd0>)
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c42:	4b25      	ldr	r3, [pc, #148]	; (8001cd8 <HAL_UART_MspInit+0xd0>)
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	4a24      	ldr	r2, [pc, #144]	; (8001cd8 <HAL_UART_MspInit+0xd0>)
 8001c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c4c:	6153      	str	r3, [r2, #20]
 8001c4e:	4b22      	ldr	r3, [pc, #136]	; (8001cd8 <HAL_UART_MspInit+0xd0>)
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c5a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c60:	2302      	movs	r3, #2
 8001c62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c6c:	2307      	movs	r3, #7
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	4619      	mov	r1, r3
 8001c76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c7a:	f001 fa2d 	bl	80030d8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001c7e:	4b17      	ldr	r3, [pc, #92]	; (8001cdc <HAL_UART_MspInit+0xd4>)
 8001c80:	4a17      	ldr	r2, [pc, #92]	; (8001ce0 <HAL_UART_MspInit+0xd8>)
 8001c82:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c84:	4b15      	ldr	r3, [pc, #84]	; (8001cdc <HAL_UART_MspInit+0xd4>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c8a:	4b14      	ldr	r3, [pc, #80]	; (8001cdc <HAL_UART_MspInit+0xd4>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c90:	4b12      	ldr	r3, [pc, #72]	; (8001cdc <HAL_UART_MspInit+0xd4>)
 8001c92:	2280      	movs	r2, #128	; 0x80
 8001c94:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c96:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <HAL_UART_MspInit+0xd4>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c9c:	4b0f      	ldr	r3, [pc, #60]	; (8001cdc <HAL_UART_MspInit+0xd4>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001ca2:	4b0e      	ldr	r3, [pc, #56]	; (8001cdc <HAL_UART_MspInit+0xd4>)
 8001ca4:	2220      	movs	r2, #32
 8001ca6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <HAL_UART_MspInit+0xd4>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001cae:	480b      	ldr	r0, [pc, #44]	; (8001cdc <HAL_UART_MspInit+0xd4>)
 8001cb0:	f000 fe86 	bl	80029c0 <HAL_DMA_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8001cba:	f7ff fcaf 	bl	800161c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a06      	ldr	r2, [pc, #24]	; (8001cdc <HAL_UART_MspInit+0xd4>)
 8001cc2:	671a      	str	r2, [r3, #112]	; 0x70
 8001cc4:	4a05      	ldr	r2, [pc, #20]	; (8001cdc <HAL_UART_MspInit+0xd4>)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001cca:	bf00      	nop
 8001ccc:	3728      	adds	r7, #40	; 0x28
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40013800 	.word	0x40013800
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	20000230 	.word	0x20000230
 8001ce0:	40020058 	.word	0x40020058

08001ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ce8:	e7fe      	b.n	8001ce8 <NMI_Handler+0x4>

08001cea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cee:	e7fe      	b.n	8001cee <HardFault_Handler+0x4>

08001cf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cf4:	e7fe      	b.n	8001cf4 <MemManage_Handler+0x4>

08001cf6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cfa:	e7fe      	b.n	8001cfa <BusFault_Handler+0x4>

08001cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d00:	e7fe      	b.n	8001d00 <UsageFault_Handler+0x4>

08001d02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d02:	b480      	push	{r7}
 8001d04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d30:	f000 f8ac 	bl	8001e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d34:	bf00      	nop
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d3c:	4802      	ldr	r0, [pc, #8]	; (8001d48 <DMA1_Channel1_IRQHandler+0x10>)
 8001d3e:	f000 fee5 	bl	8002b0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	2000033c 	.word	0x2000033c

08001d4c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001d50:	4802      	ldr	r0, [pc, #8]	; (8001d5c <DMA1_Channel5_IRQHandler+0x10>)
 8001d52:	f000 fedb 	bl	8002b0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20000230 	.word	0x20000230

08001d60 <SDADC1_IRQHandler>:

/**
  * @brief This function handles SDADC1 global interrupt.
  */
void SDADC1_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDADC1_IRQn 0 */

  /* USER CODE END SDADC1_IRQn 0 */
  HAL_SDADC_IRQHandler(&hsdadc1);
 8001d64:	4802      	ldr	r0, [pc, #8]	; (8001d70 <SDADC1_IRQHandler+0x10>)
 8001d66:	f003 f8d3 	bl	8004f10 <HAL_SDADC_IRQHandler>
  /* USER CODE BEGIN SDADC1_IRQn 1 */

  /* USER CODE END SDADC1_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200002f8 	.word	0x200002f8

08001d74 <SDADC3_IRQHandler>:

/**
  * @brief This function handles SDADC3 global interrupt.
  */
void SDADC3_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDADC3_IRQn 0 */

  /* USER CODE END SDADC3_IRQn 0 */
  HAL_SDADC_IRQHandler(&hsdadc3);
 8001d78:	4802      	ldr	r0, [pc, #8]	; (8001d84 <SDADC3_IRQHandler+0x10>)
 8001d7a:	f003 f8c9 	bl	8004f10 <HAL_SDADC_IRQHandler>
  /* USER CODE BEGIN SDADC3_IRQn 1 */

  /* USER CODE END SDADC3_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000418 	.word	0x20000418

08001d88 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <SystemInit+0x20>)
 8001d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d92:	4a05      	ldr	r2, [pc, #20]	; (8001da8 <SystemInit+0x20>)
 8001d94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001dac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001de4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001db0:	480d      	ldr	r0, [pc, #52]	; (8001de8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001db2:	490e      	ldr	r1, [pc, #56]	; (8001dec <LoopForever+0xa>)
  ldr r2, =_sidata
 8001db4:	4a0e      	ldr	r2, [pc, #56]	; (8001df0 <LoopForever+0xe>)
  movs r3, #0
 8001db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001db8:	e002      	b.n	8001dc0 <LoopCopyDataInit>

08001dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dbe:	3304      	adds	r3, #4

08001dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dc4:	d3f9      	bcc.n	8001dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dc6:	4a0b      	ldr	r2, [pc, #44]	; (8001df4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dc8:	4c0b      	ldr	r4, [pc, #44]	; (8001df8 <LoopForever+0x16>)
  movs r3, #0
 8001dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dcc:	e001      	b.n	8001dd2 <LoopFillZerobss>

08001dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dd0:	3204      	adds	r2, #4

08001dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dd4:	d3fb      	bcc.n	8001dce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001dd6:	f7ff ffd7 	bl	8001d88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dda:	f004 fe59 	bl	8006a90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dde:	f7fe fb51 	bl	8000484 <main>

08001de2 <LoopForever>:

LoopForever:
    b LoopForever
 8001de2:	e7fe      	b.n	8001de2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001de4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dec:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001df0:	08006b40 	.word	0x08006b40
  ldr r2, =_sbss
 8001df4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001df8:	20000480 	.word	0x20000480

08001dfc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001dfc:	e7fe      	b.n	8001dfc <ADC1_IRQHandler>
	...

08001e00 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e04:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <HAL_Init+0x28>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a07      	ldr	r2, [pc, #28]	; (8001e28 <HAL_Init+0x28>)
 8001e0a:	f043 0310 	orr.w	r3, r3, #16
 8001e0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e10:	2003      	movs	r0, #3
 8001e12:	f000 fcb5 	bl	8002780 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e16:	2000      	movs	r0, #0
 8001e18:	f000 f808 	bl	8001e2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e1c:	f7ff fc02 	bl	8001624 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40022000 	.word	0x40022000

08001e2c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e34:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <HAL_InitTick+0x54>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <HAL_InitTick+0x58>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 fccd 	bl	80027ea <HAL_SYSTICK_Config>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e00e      	b.n	8001e78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b0f      	cmp	r3, #15
 8001e5e:	d80a      	bhi.n	8001e76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e60:	2200      	movs	r2, #0
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e68:	f000 fc95 	bl	8002796 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e6c:	4a06      	ldr	r2, [pc, #24]	; (8001e88 <HAL_InitTick+0x5c>)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
 8001e74:	e000      	b.n	8001e78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20000004 	.word	0x20000004
 8001e84:	2000000c 	.word	0x2000000c
 8001e88:	20000008 	.word	0x20000008

08001e8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e90:	4b06      	ldr	r3, [pc, #24]	; (8001eac <HAL_IncTick+0x20>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <HAL_IncTick+0x24>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <HAL_IncTick+0x24>)
 8001e9e:	6013      	str	r3, [r2, #0]
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	2000000c 	.word	0x2000000c
 8001eb0:	2000045c 	.word	0x2000045c

08001eb4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return uwTick;  
 8001eb8:	4b03      	ldr	r3, [pc, #12]	; (8001ec8 <HAL_GetTick+0x14>)
 8001eba:	681b      	ldr	r3, [r3, #0]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	2000045c 	.word	0x2000045c

08001ecc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ed4:	f7ff ffee 	bl	8001eb4 <HAL_GetTick>
 8001ed8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ee4:	d005      	beq.n	8001ef2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ee6:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <HAL_Delay+0x40>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	461a      	mov	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4413      	add	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001ef2:	bf00      	nop
 8001ef4:	f7ff ffde 	bl	8001eb4 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d8f7      	bhi.n	8001ef4 <HAL_Delay+0x28>
  {
  }
}
 8001f04:	bf00      	nop
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	2000000c 	.word	0x2000000c

08001f10 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f54:	2300      	movs	r3, #0
 8001f56:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e0be      	b.n	80020ec <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d109      	bne.n	8001f90 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7ff fb6e 	bl	800166c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 faeb 	bl	800256c <ADC_ConversionStop_Disable>
 8001f96:	4603      	mov	r3, r0
 8001f98:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9e:	f003 0310 	and.w	r3, r3, #16
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f040 8099 	bne.w	80020da <HAL_ADC_Init+0x18e>
 8001fa8:	7dfb      	ldrb	r3, [r7, #23]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f040 8095 	bne.w	80020da <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fb8:	f023 0302 	bic.w	r3, r3, #2
 8001fbc:	f043 0202 	orr.w	r2, r3, #2
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685a      	ldr	r2, [r3, #4]
                hadc->Init.ExternalTrigConv                      |
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 8001fcc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) );
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	7b1b      	ldrb	r3, [r3, #12]
 8001fd2:	005b      	lsls	r3, r3, #1
                hadc->Init.ExternalTrigConv                      |
 8001fd4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fe4:	d003      	beq.n	8001fee <HAL_ADC_Init+0xa2>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d102      	bne.n	8001ff4 <HAL_ADC_Init+0xa8>
 8001fee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ff2:	e000      	b.n	8001ff6 <HAL_ADC_Init+0xaa>
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]

    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	7d1b      	ldrb	r3, [r3, #20]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d119      	bne.n	8002038 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	7b1b      	ldrb	r3, [r3, #12]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d109      	bne.n	8002020 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
      tmp_cr1 |= (ADC_CR1_DISCEN                                           |
                  ADC_CR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion) );
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	3b01      	subs	r3, #1
 8002012:	035a      	lsls	r2, r3, #13
      tmp_cr1 |= (ADC_CR1_DISCEN                                           |
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	4313      	orrs	r3, r2
 8002018:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800201c:	613b      	str	r3, [r7, #16]
 800201e:	e00b      	b.n	8002038 <HAL_ADC_Init+0xec>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002024:	f043 0220 	orr.w	r2, r3, #32
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002030:	f043 0201 	orr.w	r2, r3, #1
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	430a      	orrs	r2, r1
 800204a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	689a      	ldr	r2, [r3, #8]
 8002052:	4b28      	ldr	r3, [pc, #160]	; (80020f4 <HAL_ADC_Init+0x1a8>)
 8002054:	4013      	ands	r3, r2
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	6812      	ldr	r2, [r2, #0]
 800205a:	68b9      	ldr	r1, [r7, #8]
 800205c:	430b      	orrs	r3, r1
 800205e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002068:	d003      	beq.n	8002072 <HAL_ADC_Init+0x126>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d104      	bne.n	800207c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	3b01      	subs	r3, #1
 8002078:	051b      	lsls	r3, r3, #20
 800207a:	60fb      	str	r3, [r7, #12]
    }
    
    MODIFY_REG(hadc->Instance->SQR1,
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002082:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	430a      	orrs	r2, r1
 800208e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689a      	ldr	r2, [r3, #8]
 8002096:	4b18      	ldr	r3, [pc, #96]	; (80020f8 <HAL_ADC_Init+0x1ac>)
 8002098:	4013      	ands	r3, r2
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	429a      	cmp	r2, r3
 800209e:	d10b      	bne.n	80020b8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020aa:	f023 0303 	bic.w	r3, r3, #3
 80020ae:	f043 0201 	orr.w	r2, r3, #1
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020b6:	e018      	b.n	80020ea <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020bc:	f023 0312 	bic.w	r3, r3, #18
 80020c0:	f043 0210 	orr.w	r2, r3, #16
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020cc:	f043 0201 	orr.w	r2, r3, #1
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020d8:	e007      	b.n	80020ea <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020de:	f043 0210 	orr.w	r2, r3, #16
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	ffe1f7fd 	.word	0xffe1f7fd
 80020f8:	ff1f0efe 	.word	0xff1f0efe

080020fc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002108:	2300      	movs	r3, #0
 800210a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002112:	2b01      	cmp	r3, #1
 8002114:	d101      	bne.n	800211a <HAL_ADC_Start_DMA+0x1e>
 8002116:	2302      	movs	r3, #2
 8002118:	e076      	b.n	8002208 <HAL_ADC_Start_DMA+0x10c>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f000 f9d0 	bl	80024c8 <ADC_Enable>
 8002128:	4603      	mov	r3, r0
 800212a:	75fb      	strb	r3, [r7, #23]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800212c:	7dfb      	ldrb	r3, [r7, #23]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d169      	bne.n	8002206 <HAL_ADC_Start_DMA+0x10a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002136:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800213a:	f023 0301 	bic.w	r3, r3, #1
 800213e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) */
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002150:	2b00      	cmp	r3, #0
 8002152:	d007      	beq.n	8002164 <HAL_ADC_Start_DMA+0x68>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002158:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800215c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	629a      	str	r2, [r3, #40]	; 0x28
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002168:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800216c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002170:	d106      	bne.n	8002180 <HAL_ADC_Start_DMA+0x84>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002176:	f023 0206 	bic.w	r2, r3, #6
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	62da      	str	r2, [r3, #44]	; 0x2c
 800217e:	e002      	b.n	8002186 <HAL_ADC_Start_DMA+0x8a>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2200      	movs	r2, #0
 8002184:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	4a1f      	ldr	r2, [pc, #124]	; (8002210 <HAL_ADC_Start_DMA+0x114>)
 8002194:	629a      	str	r2, [r3, #40]	; 0x28
       
    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	4a1e      	ldr	r2, [pc, #120]	; (8002214 <HAL_ADC_Start_DMA+0x118>)
 800219c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	4a1d      	ldr	r2, [pc, #116]	; (8002218 <HAL_ADC_Start_DMA+0x11c>)
 80021a4:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f06f 0202 	mvn.w	r2, #2
 80021ae:	601a      	str	r2, [r3, #0]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021be:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6a18      	ldr	r0, [r3, #32]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	334c      	adds	r3, #76	; 0x4c
 80021ca:	4619      	mov	r1, r3
 80021cc:	68ba      	ldr	r2, [r7, #8]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f000 fc3d 	bl	8002a4e <HAL_DMA_Start_IT>
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80021de:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80021e2:	d108      	bne.n	80021f6 <HAL_ADC_Start_DMA+0xfa>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	e007      	b.n	8002206 <HAL_ADC_Start_DMA+0x10a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002204:	609a      	str	r2, [r3, #8]
    }
  }

  /* Return function status */
  return tmp_hal_status;
 8002206:	7dfb      	ldrb	r3, [r7, #23]
}
 8002208:	4618      	mov	r0, r3
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	080023fd 	.word	0x080023fd
 8002214:	08002479 	.word	0x08002479
 8002218:	08002495 	.word	0x08002495

0800221c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002226:	2300      	movs	r3, #0
 8002228:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800222a:	2300      	movs	r3, #0
 800222c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002234:	2b01      	cmp	r3, #1
 8002236:	d101      	bne.n	800223c <HAL_ADC_ConfigChannel+0x20>
 8002238:	2302      	movs	r3, #2
 800223a:	e0d2      	b.n	80023e2 <HAL_ADC_ConfigChannel+0x1c6>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6U */
  if (sConfig->Rank < 7U)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b06      	cmp	r3, #6
 800224a:	d81c      	bhi.n	8002286 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685a      	ldr	r2, [r3, #4]
 8002256:	4613      	mov	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4413      	add	r3, r2
 800225c:	3b05      	subs	r3, #5
 800225e:	221f      	movs	r2, #31
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	4019      	ands	r1, r3
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	6818      	ldr	r0, [r3, #0]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	3b05      	subs	r3, #5
 8002278:	fa00 f203 	lsl.w	r2, r0, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	430a      	orrs	r2, r1
 8002282:	635a      	str	r2, [r3, #52]	; 0x34
 8002284:	e03c      	b.n	8002300 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12U */
  else if (sConfig->Rank < 13U)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b0c      	cmp	r3, #12
 800228c:	d81c      	bhi.n	80022c8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	4613      	mov	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	3b23      	subs	r3, #35	; 0x23
 80022a0:	221f      	movs	r2, #31
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	43db      	mvns	r3, r3
 80022a8:	4019      	ands	r1, r3
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	6818      	ldr	r0, [r3, #0]
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	3b23      	subs	r3, #35	; 0x23
 80022ba:	fa00 f203 	lsl.w	r2, r0, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	631a      	str	r2, [r3, #48]	; 0x30
 80022c6:	e01b      	b.n	8002300 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16U */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	4613      	mov	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	3b41      	subs	r3, #65	; 0x41
 80022da:	221f      	movs	r2, #31
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	4019      	ands	r1, r3
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	6818      	ldr	r0, [r3, #0]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	4613      	mov	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	3b41      	subs	r3, #65	; 0x41
 80022f4:	fa00 f203 	lsl.w	r2, r0, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	430a      	orrs	r2, r1
 80022fe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 18U */
  if (sConfig->Channel > ADC_CHANNEL_10)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2b0a      	cmp	r3, #10
 8002306:	d91c      	bls.n	8002342 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68d9      	ldr	r1, [r3, #12]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	4613      	mov	r3, r2
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	4413      	add	r3, r2
 8002318:	3b1e      	subs	r3, #30
 800231a:	2207      	movs	r2, #7
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	4019      	ands	r1, r3
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	6898      	ldr	r0, [r3, #8]
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	4613      	mov	r3, r2
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	4413      	add	r3, r2
 8002332:	3b1e      	subs	r3, #30
 8002334:	fa00 f203 	lsl.w	r2, r0, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	430a      	orrs	r2, r1
 800233e:	60da      	str	r2, [r3, #12]
 8002340:	e019      	b.n	8002376 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else   /* For channels 0 to 9U */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6919      	ldr	r1, [r3, #16]
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4613      	mov	r3, r2
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	4413      	add	r3, r2
 8002352:	2207      	movs	r2, #7
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	4019      	ands	r1, r3
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	6898      	ldr	r0, [r3, #8]
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	4613      	mov	r3, r2
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4413      	add	r3, r2
 800236a:	fa00 f203 	lsl.w	r2, r0, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	430a      	orrs	r2, r1
 8002374:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2b10      	cmp	r3, #16
 800237c:	d003      	beq.n	8002386 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002382:	2b11      	cmp	r3, #17
 8002384:	d11e      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x1a8>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002394:	609a      	str	r2, [r3, #8]
    
    if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2b10      	cmp	r3, #16
 800239c:	d11c      	bne.n	80023d8 <HAL_ADC_ConfigChannel+0x1bc>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800239e:	4b14      	ldr	r3, [pc, #80]	; (80023f0 <HAL_ADC_ConfigChannel+0x1d4>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a14      	ldr	r2, [pc, #80]	; (80023f4 <HAL_ADC_ConfigChannel+0x1d8>)
 80023a4:	fba2 2303 	umull	r2, r3, r2, r3
 80023a8:	0c9a      	lsrs	r2, r3, #18
 80023aa:	4613      	mov	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0U)
 80023b4:	e002      	b.n	80023bc <HAL_ADC_ConfigChannel+0x1a0>
      {
        wait_loop_index--;
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	3b01      	subs	r3, #1
 80023ba:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0U)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f9      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x19a>
    if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80023c2:	e009      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x1bc>
      }
    }
  }
  /* if ADC1 Channel_18 is selected, enable VBAT measurement path */
  else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b12      	cmp	r3, #18
 80023ca:	d105      	bne.n	80023d8 <HAL_ADC_ConfigChannel+0x1bc>
  {
    SET_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_VBAT);
 80023cc:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <HAL_ADC_ConfigChannel+0x1dc>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a09      	ldr	r2, [pc, #36]	; (80023f8 <HAL_ADC_ConfigChannel+0x1dc>)
 80023d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023d6:	6013      	str	r3, [r2, #0]
  }

   
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	20000004 	.word	0x20000004
 80023f4:	431bde83 	.word	0x431bde83
 80023f8:	40010000 	.word	0x40010000

080023fc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002408:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002412:	2b00      	cmp	r3, #0
 8002414:	d127      	bne.n	8002466 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800242c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002430:	d115      	bne.n	800245e <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002436:	2b00      	cmp	r3, #0
 8002438:	d111      	bne.n	800245e <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d105      	bne.n	800245e <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002456:	f043 0201 	orr.w	r2, r3, #1
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f7ff fd56 	bl	8001f10 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002464:	e004      	b.n	8002470 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	4798      	blx	r3
}
 8002470:	bf00      	nop
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f7ff fd4c 	bl	8001f24 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800248c:	bf00      	nop
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a0:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b2:	f043 0204 	orr.w	r2, r3, #4
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f7ff fd3c 	bl	8001f38 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024c0:	bf00      	nop
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d039      	beq.n	800255a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f042 0201 	orr.w	r2, r2, #1
 80024f4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024f6:	4b1b      	ldr	r3, [pc, #108]	; (8002564 <ADC_Enable+0x9c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a1b      	ldr	r2, [pc, #108]	; (8002568 <ADC_Enable+0xa0>)
 80024fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002500:	0c9b      	lsrs	r3, r3, #18
 8002502:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002504:	e002      	b.n	800250c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	3b01      	subs	r3, #1
 800250a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1f9      	bne.n	8002506 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002512:	f7ff fccf 	bl	8001eb4 <HAL_GetTick>
 8002516:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002518:	e018      	b.n	800254c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800251a:	f7ff fccb 	bl	8001eb4 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d911      	bls.n	800254c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252c:	f043 0210 	orr.w	r2, r3, #16
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002538:	f043 0201 	orr.w	r2, r3, #1
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e007      	b.n	800255c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b01      	cmp	r3, #1
 8002558:	d1df      	bne.n	800251a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	20000004 	.word	0x20000004
 8002568:	431bde83 	.word	0x431bde83

0800256c <ADC_ConversionStop_Disable>:
  * @brief  Stop ADC conversion and disable the selected ADC
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002574:	2300      	movs	r3, #0
 8002576:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b01      	cmp	r3, #1
 8002584:	d127      	bne.n	80025d6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 0201 	bic.w	r2, r2, #1
 8002594:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002596:	f7ff fc8d 	bl	8001eb4 <HAL_GetTick>
 800259a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800259c:	e014      	b.n	80025c8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800259e:	f7ff fc89 	bl	8001eb4 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d90d      	bls.n	80025c8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b0:	f043 0210 	orr.w	r2, r3, #16
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025bc:	f043 0201 	orr.w	r2, r3, #1
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e007      	b.n	80025d8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d0e3      	beq.n	800259e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025f0:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <__NVIC_SetPriorityGrouping+0x44>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025fc:	4013      	ands	r3, r2
 80025fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002608:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800260c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002612:	4a04      	ldr	r2, [pc, #16]	; (8002624 <__NVIC_SetPriorityGrouping+0x44>)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	60d3      	str	r3, [r2, #12]
}
 8002618:	bf00      	nop
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800262c:	4b04      	ldr	r3, [pc, #16]	; (8002640 <__NVIC_GetPriorityGrouping+0x18>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	0a1b      	lsrs	r3, r3, #8
 8002632:	f003 0307 	and.w	r3, r3, #7
}
 8002636:	4618      	mov	r0, r3
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800264e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002652:	2b00      	cmp	r3, #0
 8002654:	db0b      	blt.n	800266e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	f003 021f 	and.w	r2, r3, #31
 800265c:	4907      	ldr	r1, [pc, #28]	; (800267c <__NVIC_EnableIRQ+0x38>)
 800265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002662:	095b      	lsrs	r3, r3, #5
 8002664:	2001      	movs	r0, #1
 8002666:	fa00 f202 	lsl.w	r2, r0, r2
 800266a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	e000e100 	.word	0xe000e100

08002680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	6039      	str	r1, [r7, #0]
 800268a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800268c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002690:	2b00      	cmp	r3, #0
 8002692:	db0a      	blt.n	80026aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	b2da      	uxtb	r2, r3
 8002698:	490c      	ldr	r1, [pc, #48]	; (80026cc <__NVIC_SetPriority+0x4c>)
 800269a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269e:	0112      	lsls	r2, r2, #4
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	440b      	add	r3, r1
 80026a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026a8:	e00a      	b.n	80026c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	4908      	ldr	r1, [pc, #32]	; (80026d0 <__NVIC_SetPriority+0x50>)
 80026b0:	79fb      	ldrb	r3, [r7, #7]
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	3b04      	subs	r3, #4
 80026b8:	0112      	lsls	r2, r2, #4
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	440b      	add	r3, r1
 80026be:	761a      	strb	r2, [r3, #24]
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	e000e100 	.word	0xe000e100
 80026d0:	e000ed00 	.word	0xe000ed00

080026d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b089      	sub	sp, #36	; 0x24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f1c3 0307 	rsb	r3, r3, #7
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	bf28      	it	cs
 80026f2:	2304      	movcs	r3, #4
 80026f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3304      	adds	r3, #4
 80026fa:	2b06      	cmp	r3, #6
 80026fc:	d902      	bls.n	8002704 <NVIC_EncodePriority+0x30>
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	3b03      	subs	r3, #3
 8002702:	e000      	b.n	8002706 <NVIC_EncodePriority+0x32>
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002708:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43da      	mvns	r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	401a      	ands	r2, r3
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800271c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	fa01 f303 	lsl.w	r3, r1, r3
 8002726:	43d9      	mvns	r1, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800272c:	4313      	orrs	r3, r2
         );
}
 800272e:	4618      	mov	r0, r3
 8002730:	3724      	adds	r7, #36	; 0x24
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
	...

0800273c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3b01      	subs	r3, #1
 8002748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800274c:	d301      	bcc.n	8002752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800274e:	2301      	movs	r3, #1
 8002750:	e00f      	b.n	8002772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002752:	4a0a      	ldr	r2, [pc, #40]	; (800277c <SysTick_Config+0x40>)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3b01      	subs	r3, #1
 8002758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800275a:	210f      	movs	r1, #15
 800275c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002760:	f7ff ff8e 	bl	8002680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002764:	4b05      	ldr	r3, [pc, #20]	; (800277c <SysTick_Config+0x40>)
 8002766:	2200      	movs	r2, #0
 8002768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800276a:	4b04      	ldr	r3, [pc, #16]	; (800277c <SysTick_Config+0x40>)
 800276c:	2207      	movs	r2, #7
 800276e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	e000e010 	.word	0xe000e010

08002780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f7ff ff29 	bl	80025e0 <__NVIC_SetPriorityGrouping>
}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b086      	sub	sp, #24
 800279a:	af00      	add	r7, sp, #0
 800279c:	4603      	mov	r3, r0
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	607a      	str	r2, [r7, #4]
 80027a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027a8:	f7ff ff3e 	bl	8002628 <__NVIC_GetPriorityGrouping>
 80027ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	68b9      	ldr	r1, [r7, #8]
 80027b2:	6978      	ldr	r0, [r7, #20]
 80027b4:	f7ff ff8e 	bl	80026d4 <NVIC_EncodePriority>
 80027b8:	4602      	mov	r2, r0
 80027ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027be:	4611      	mov	r1, r2
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff ff5d 	bl	8002680 <__NVIC_SetPriority>
}
 80027c6:	bf00      	nop
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	4603      	mov	r3, r0
 80027d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff ff31 	bl	8002644 <__NVIC_EnableIRQ>
}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b082      	sub	sp, #8
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7ff ffa2 	bl	800273c <SysTick_Config>
 80027f8:	4603      	mov	r3, r0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002802:	b580      	push	{r7, lr}
 8002804:	b082      	sub	sp, #8
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e014      	b.n	800283e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	791b      	ldrb	r3, [r3, #4]
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d105      	bne.n	800282a <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f7fe ff8b 	bl	8001740 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2202      	movs	r2, #2
 800282e:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8002846:	b480      	push	{r7}
 8002848:	b087      	sub	sp, #28
 800284a:	af00      	add	r7, sp, #0
 800284c:	60f8      	str	r0, [r7, #12]
 800284e:	60b9      	str	r1, [r7, #8]
 8002850:	607a      	str	r2, [r7, #4]
 8002852:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8002854:	2300      	movs	r3, #0
 8002856:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d105      	bne.n	8002870 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4413      	add	r3, r2
 800286a:	3308      	adds	r3, #8
 800286c:	617b      	str	r3, [r7, #20]
 800286e:	e004      	b.n	800287a <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4413      	add	r3, r2
 8002876:	3314      	adds	r3, #20
 8002878:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	461a      	mov	r2, r3
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	371c      	adds	r7, #28
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	795b      	ldrb	r3, [r3, #5]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d101      	bne.n	80028a6 <HAL_DAC_Start+0x16>
 80028a2:	2302      	movs	r3, #2
 80028a4:	e039      	b.n	800291a <HAL_DAC_Start+0x8a>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2202      	movs	r2, #2
 80028b0:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6819      	ldr	r1, [r3, #0]
 80028b8:	2201      	movs	r2, #1
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	409a      	lsls	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	430a      	orrs	r2, r1
 80028c4:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10f      	bne.n	80028ec <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80028d6:	2b3c      	cmp	r3, #60	; 0x3c
 80028d8:	d118      	bne.n	800290c <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f042 0201 	orr.w	r2, r2, #1
 80028e8:	605a      	str	r2, [r3, #4]
 80028ea:	e00f      	b.n	800290c <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80028f6:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 80028fa:	d107      	bne.n	800290c <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f042 0202 	orr.w	r2, r2, #2
 800290a:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002926:	b480      	push	{r7}
 8002928:	b087      	sub	sp, #28
 800292a:	af00      	add	r7, sp, #0
 800292c:	60f8      	str	r0, [r7, #12]
 800292e:	60b9      	str	r1, [r7, #8]
 8002930:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002932:	2300      	movs	r3, #0
 8002934:	617b      	str	r3, [r7, #20]
 8002936:	2300      	movs	r3, #0
 8002938:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	795b      	ldrb	r3, [r3, #5]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d101      	bne.n	8002946 <HAL_DAC_ConfigChannel+0x20>
 8002942:	2302      	movs	r3, #2
 8002944:	e036      	b.n	80029b4 <HAL_DAC_ConfigChannel+0x8e>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2201      	movs	r2, #1
 800294a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2202      	movs	r2, #2
 8002950:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800295a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	4013      	ands	r3, r2
 800296a:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	4313      	orrs	r3, r2
 8002976:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	4313      	orrs	r3, r2
 8002984:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6819      	ldr	r1, [r3, #0]
 8002994:	22c0      	movs	r2, #192	; 0xc0
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	43da      	mvns	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	400a      	ands	r2, r1
 80029a4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2201      	movs	r2, #1
 80029aa:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	371c      	adds	r7, #28
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e037      	b.n	8002a46 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2202      	movs	r2, #2
 80029da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80029ec:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80029f0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80029fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 f941 	bl	8002cb0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}  
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b086      	sub	sp, #24
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	60f8      	str	r0, [r7, #12]
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	607a      	str	r2, [r7, #4]
 8002a5a:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d101      	bne.n	8002a6e <HAL_DMA_Start_IT+0x20>
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	e04a      	b.n	8002b04 <HAL_DMA_Start_IT+0xb6>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d13a      	bne.n	8002af6 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2202      	movs	r2, #2
 8002a84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 0201 	bic.w	r2, r2, #1
 8002a9c:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	68b9      	ldr	r1, [r7, #8]
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f000 f8d4 	bl	8002c52 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d008      	beq.n	8002ac4 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f042 020e 	orr.w	r2, r2, #14
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	e00f      	b.n	8002ae4 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f042 020a 	orr.w	r2, r2, #10
 8002ad2:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0204 	bic.w	r2, r2, #4
 8002ae2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f042 0201 	orr.w	r2, r2, #1
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	e005      	b.n	8002b02 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002afe:	2302      	movs	r3, #2
 8002b00:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002b02:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002b04:	4618      	mov	r0, r3
 8002b06:	3718      	adds	r7, #24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	2204      	movs	r2, #4
 8002b2a:	409a      	lsls	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d024      	beq.n	8002b7e <HAL_DMA_IRQHandler+0x72>
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	f003 0304 	and.w	r3, r3, #4
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d01f      	beq.n	8002b7e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0320 	and.w	r3, r3, #32
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d107      	bne.n	8002b5c <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0204 	bic.w	r2, r2, #4
 8002b5a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b64:	2104      	movs	r1, #4
 8002b66:	fa01 f202 	lsl.w	r2, r1, r2
 8002b6a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d06a      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002b7c:	e065      	b.n	8002c4a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	2202      	movs	r2, #2
 8002b84:	409a      	lsls	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d02c      	beq.n	8002be8 <HAL_DMA_IRQHandler+0xdc>
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d027      	beq.n	8002be8 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0320 	and.w	r3, r3, #32
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10b      	bne.n	8002bbe <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 020a 	bic.w	r2, r2, #10
 8002bb4:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc6:	2102      	movs	r1, #2
 8002bc8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bcc:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d035      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002be6:	e030      	b.n	8002c4a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bec:	2208      	movs	r2, #8
 8002bee:	409a      	lsls	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d028      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x13e>
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d023      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 020e 	bic.w	r2, r2, #14
 8002c10:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c20:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d004      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	4798      	blx	r3
    }
  }
}  
 8002c48:	e7ff      	b.n	8002c4a <HAL_DMA_IRQHandler+0x13e>
 8002c4a:	bf00      	nop
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b085      	sub	sp, #20
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	60f8      	str	r0, [r7, #12]
 8002c5a:	60b9      	str	r1, [r7, #8]
 8002c5c:	607a      	str	r2, [r7, #4]
 8002c5e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c68:	2101      	movs	r1, #1
 8002c6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c6e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2b10      	cmp	r3, #16
 8002c7e:	d108      	bne.n	8002c92 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68ba      	ldr	r2, [r7, #8]
 8002c8e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c90:	e007      	b.n	8002ca2 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	60da      	str	r2, [r3, #12]
}
 8002ca2:	bf00      	nop
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
	...

08002cb0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	4b14      	ldr	r3, [pc, #80]	; (8002d10 <DMA_CalcBaseAndBitshift+0x60>)
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d80f      	bhi.n	8002ce4 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	461a      	mov	r2, r3
 8002cca:	4b12      	ldr	r3, [pc, #72]	; (8002d14 <DMA_CalcBaseAndBitshift+0x64>)
 8002ccc:	4413      	add	r3, r2
 8002cce:	4a12      	ldr	r2, [pc, #72]	; (8002d18 <DMA_CalcBaseAndBitshift+0x68>)
 8002cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd4:	091b      	lsrs	r3, r3, #4
 8002cd6:	009a      	lsls	r2, r3, #2
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a0f      	ldr	r2, [pc, #60]	; (8002d1c <DMA_CalcBaseAndBitshift+0x6c>)
 8002ce0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002ce2:	e00e      	b.n	8002d02 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	461a      	mov	r2, r3
 8002cea:	4b0d      	ldr	r3, [pc, #52]	; (8002d20 <DMA_CalcBaseAndBitshift+0x70>)
 8002cec:	4413      	add	r3, r2
 8002cee:	4a0a      	ldr	r2, [pc, #40]	; (8002d18 <DMA_CalcBaseAndBitshift+0x68>)
 8002cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf4:	091b      	lsrs	r3, r3, #4
 8002cf6:	009a      	lsls	r2, r3, #2
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a09      	ldr	r2, [pc, #36]	; (8002d24 <DMA_CalcBaseAndBitshift+0x74>)
 8002d00:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	40020407 	.word	0x40020407
 8002d14:	bffdfff8 	.word	0xbffdfff8
 8002d18:	cccccccd 	.word	0xcccccccd
 8002d1c:	40020000 	.word	0x40020000
 8002d20:	bffdfbf8 	.word	0xbffdfbf8
 8002d24:	40020400 	.word	0x40020400

08002d28 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d2a:	b087      	sub	sp, #28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002d42:	4b2f      	ldr	r3, [pc, #188]	; (8002e00 <HAL_FLASH_Program+0xd8>)
 8002d44:	7e1b      	ldrb	r3, [r3, #24]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d101      	bne.n	8002d4e <HAL_FLASH_Program+0x26>
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	e054      	b.n	8002df8 <HAL_FLASH_Program+0xd0>
 8002d4e:	4b2c      	ldr	r3, [pc, #176]	; (8002e00 <HAL_FLASH_Program+0xd8>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002d54:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002d58:	f000 f8a8 	bl	8002eac <FLASH_WaitForLastOperation>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002d60:	7dfb      	ldrb	r3, [r7, #23]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d144      	bne.n	8002df0 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d102      	bne.n	8002d72 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	757b      	strb	r3, [r7, #21]
 8002d70:	e007      	b.n	8002d82 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d102      	bne.n	8002d7e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002d78:	2302      	movs	r3, #2
 8002d7a:	757b      	strb	r3, [r7, #21]
 8002d7c:	e001      	b.n	8002d82 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002d7e:	2304      	movs	r3, #4
 8002d80:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002d82:	2300      	movs	r3, #0
 8002d84:	75bb      	strb	r3, [r7, #22]
 8002d86:	e02d      	b.n	8002de4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002d88:	7dbb      	ldrb	r3, [r7, #22]
 8002d8a:	005a      	lsls	r2, r3, #1
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	eb02 0c03 	add.w	ip, r2, r3
 8002d92:	7dbb      	ldrb	r3, [r7, #22]
 8002d94:	0119      	lsls	r1, r3, #4
 8002d96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d9a:	f1c1 0620 	rsb	r6, r1, #32
 8002d9e:	f1a1 0020 	sub.w	r0, r1, #32
 8002da2:	fa22 f401 	lsr.w	r4, r2, r1
 8002da6:	fa03 f606 	lsl.w	r6, r3, r6
 8002daa:	4334      	orrs	r4, r6
 8002dac:	fa23 f000 	lsr.w	r0, r3, r0
 8002db0:	4304      	orrs	r4, r0
 8002db2:	fa23 f501 	lsr.w	r5, r3, r1
 8002db6:	b2a3      	uxth	r3, r4
 8002db8:	4619      	mov	r1, r3
 8002dba:	4660      	mov	r0, ip
 8002dbc:	f000 f85a 	bl	8002e74 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002dc0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002dc4:	f000 f872 	bl	8002eac <FLASH_WaitForLastOperation>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002dcc:	4b0d      	ldr	r3, [pc, #52]	; (8002e04 <HAL_FLASH_Program+0xdc>)
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	4a0c      	ldr	r2, [pc, #48]	; (8002e04 <HAL_FLASH_Program+0xdc>)
 8002dd2:	f023 0301 	bic.w	r3, r3, #1
 8002dd6:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8002dd8:	7dfb      	ldrb	r3, [r7, #23]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d107      	bne.n	8002dee <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002dde:	7dbb      	ldrb	r3, [r7, #22]
 8002de0:	3301      	adds	r3, #1
 8002de2:	75bb      	strb	r3, [r7, #22]
 8002de4:	7dba      	ldrb	r2, [r7, #22]
 8002de6:	7d7b      	ldrb	r3, [r7, #21]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d3cd      	bcc.n	8002d88 <HAL_FLASH_Program+0x60>
 8002dec:	e000      	b.n	8002df0 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002dee:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002df0:	4b03      	ldr	r3, [pc, #12]	; (8002e00 <HAL_FLASH_Program+0xd8>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	761a      	strb	r2, [r3, #24]

  return status;
 8002df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	371c      	adds	r7, #28
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e00:	20000460 	.word	0x20000460
 8002e04:	40022000 	.word	0x40022000

08002e08 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002e12:	4b0d      	ldr	r3, [pc, #52]	; (8002e48 <HAL_FLASH_Unlock+0x40>)
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00d      	beq.n	8002e3a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002e1e:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <HAL_FLASH_Unlock+0x40>)
 8002e20:	4a0a      	ldr	r2, [pc, #40]	; (8002e4c <HAL_FLASH_Unlock+0x44>)
 8002e22:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002e24:	4b08      	ldr	r3, [pc, #32]	; (8002e48 <HAL_FLASH_Unlock+0x40>)
 8002e26:	4a0a      	ldr	r2, [pc, #40]	; (8002e50 <HAL_FLASH_Unlock+0x48>)
 8002e28:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002e2a:	4b07      	ldr	r3, [pc, #28]	; (8002e48 <HAL_FLASH_Unlock+0x40>)
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002e3a:	79fb      	ldrb	r3, [r7, #7]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	40022000 	.word	0x40022000
 8002e4c:	45670123 	.word	0x45670123
 8002e50:	cdef89ab 	.word	0xcdef89ab

08002e54 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002e58:	4b05      	ldr	r3, [pc, #20]	; (8002e70 <HAL_FLASH_Lock+0x1c>)
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	4a04      	ldr	r2, [pc, #16]	; (8002e70 <HAL_FLASH_Lock+0x1c>)
 8002e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e62:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	40022000 	.word	0x40022000

08002e74 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002e80:	4b08      	ldr	r3, [pc, #32]	; (8002ea4 <FLASH_Program_HalfWord+0x30>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002e86:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <FLASH_Program_HalfWord+0x34>)
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	4a07      	ldr	r2, [pc, #28]	; (8002ea8 <FLASH_Program_HalfWord+0x34>)
 8002e8c:	f043 0301 	orr.w	r3, r3, #1
 8002e90:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	887a      	ldrh	r2, [r7, #2]
 8002e96:	801a      	strh	r2, [r3, #0]
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	20000460 	.word	0x20000460
 8002ea8:	40022000 	.word	0x40022000

08002eac <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002eb4:	f7fe fffe 	bl	8001eb4 <HAL_GetTick>
 8002eb8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002eba:	e010      	b.n	8002ede <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ec2:	d00c      	beq.n	8002ede <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d007      	beq.n	8002eda <FLASH_WaitForLastOperation+0x2e>
 8002eca:	f7fe fff3 	bl	8001eb4 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d201      	bcs.n	8002ede <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e01f      	b.n	8002f1e <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002ede:	4b12      	ldr	r3, [pc, #72]	; (8002f28 <FLASH_WaitForLastOperation+0x7c>)
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d0e8      	beq.n	8002ebc <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002eea:	4b0f      	ldr	r3, [pc, #60]	; (8002f28 <FLASH_WaitForLastOperation+0x7c>)
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	f003 0320 	and.w	r3, r3, #32
 8002ef2:	2b20      	cmp	r3, #32
 8002ef4:	d102      	bne.n	8002efc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002ef6:	4b0c      	ldr	r3, [pc, #48]	; (8002f28 <FLASH_WaitForLastOperation+0x7c>)
 8002ef8:	2220      	movs	r2, #32
 8002efa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002efc:	4b0a      	ldr	r3, [pc, #40]	; (8002f28 <FLASH_WaitForLastOperation+0x7c>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	f003 0310 	and.w	r3, r3, #16
 8002f04:	2b10      	cmp	r3, #16
 8002f06:	d005      	beq.n	8002f14 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002f08:	4b07      	ldr	r3, [pc, #28]	; (8002f28 <FLASH_WaitForLastOperation+0x7c>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	d103      	bne.n	8002f1c <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002f14:	f000 f80a 	bl	8002f2c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e000      	b.n	8002f1e <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40022000 	.word	0x40022000

08002f2c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002f32:	2300      	movs	r3, #0
 8002f34:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002f36:	4b14      	ldr	r3, [pc, #80]	; (8002f88 <FLASH_SetErrorCode+0x5c>)
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	f003 0310 	and.w	r3, r3, #16
 8002f3e:	2b10      	cmp	r3, #16
 8002f40:	d109      	bne.n	8002f56 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002f42:	4b12      	ldr	r3, [pc, #72]	; (8002f8c <FLASH_SetErrorCode+0x60>)
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	f043 0302 	orr.w	r3, r3, #2
 8002f4a:	4a10      	ldr	r2, [pc, #64]	; (8002f8c <FLASH_SetErrorCode+0x60>)
 8002f4c:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f043 0310 	orr.w	r3, r3, #16
 8002f54:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002f56:	4b0c      	ldr	r3, [pc, #48]	; (8002f88 <FLASH_SetErrorCode+0x5c>)
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	f003 0304 	and.w	r3, r3, #4
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d109      	bne.n	8002f76 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002f62:	4b0a      	ldr	r3, [pc, #40]	; (8002f8c <FLASH_SetErrorCode+0x60>)
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	f043 0301 	orr.w	r3, r3, #1
 8002f6a:	4a08      	ldr	r2, [pc, #32]	; (8002f8c <FLASH_SetErrorCode+0x60>)
 8002f6c:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f043 0304 	orr.w	r3, r3, #4
 8002f74:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002f76:	4a04      	ldr	r2, [pc, #16]	; (8002f88 <FLASH_SetErrorCode+0x5c>)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	60d3      	str	r3, [r2, #12]
}  
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	40022000 	.word	0x40022000
 8002f8c:	20000460 	.word	0x20000460

08002f90 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002fa2:	4b2e      	ldr	r3, [pc, #184]	; (800305c <HAL_FLASHEx_Erase+0xcc>)
 8002fa4:	7e1b      	ldrb	r3, [r3, #24]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d101      	bne.n	8002fae <HAL_FLASHEx_Erase+0x1e>
 8002faa:	2302      	movs	r3, #2
 8002fac:	e052      	b.n	8003054 <HAL_FLASHEx_Erase+0xc4>
 8002fae:	4b2b      	ldr	r3, [pc, #172]	; (800305c <HAL_FLASHEx_Erase+0xcc>)
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d115      	bne.n	8002fe8 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002fbc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002fc0:	f7ff ff74 	bl	8002eac <FLASH_WaitForLastOperation>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d140      	bne.n	800304c <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8002fca:	f000 f84b 	bl	8003064 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002fce:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002fd2:	f7ff ff6b 	bl	8002eac <FLASH_WaitForLastOperation>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002fda:	4b21      	ldr	r3, [pc, #132]	; (8003060 <HAL_FLASHEx_Erase+0xd0>)
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	4a20      	ldr	r2, [pc, #128]	; (8003060 <HAL_FLASHEx_Erase+0xd0>)
 8002fe0:	f023 0304 	bic.w	r3, r3, #4
 8002fe4:	6113      	str	r3, [r2, #16]
 8002fe6:	e031      	b.n	800304c <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002fe8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002fec:	f7ff ff5e 	bl	8002eac <FLASH_WaitForLastOperation>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d12a      	bne.n	800304c <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ffc:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	60bb      	str	r3, [r7, #8]
 8003004:	e019      	b.n	800303a <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003006:	68b8      	ldr	r0, [r7, #8]
 8003008:	f000 f846 	bl	8003098 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800300c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003010:	f7ff ff4c 	bl	8002eac <FLASH_WaitForLastOperation>
 8003014:	4603      	mov	r3, r0
 8003016:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003018:	4b11      	ldr	r3, [pc, #68]	; (8003060 <HAL_FLASHEx_Erase+0xd0>)
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	4a10      	ldr	r2, [pc, #64]	; (8003060 <HAL_FLASHEx_Erase+0xd0>)
 800301e:	f023 0302 	bic.w	r3, r3, #2
 8003022:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003024:	7bfb      	ldrb	r3, [r7, #15]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	68ba      	ldr	r2, [r7, #8]
 800302e:	601a      	str	r2, [r3, #0]
            break;
 8003030:	e00c      	b.n	800304c <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003038:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	02da      	lsls	r2, r3, #11
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8003046:	68ba      	ldr	r2, [r7, #8]
 8003048:	429a      	cmp	r2, r3
 800304a:	d3dc      	bcc.n	8003006 <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800304c:	4b03      	ldr	r3, [pc, #12]	; (800305c <HAL_FLASHEx_Erase+0xcc>)
 800304e:	2200      	movs	r2, #0
 8003050:	761a      	strb	r2, [r3, #24]

  return status;
 8003052:	7bfb      	ldrb	r3, [r7, #15]
}
 8003054:	4618      	mov	r0, r3
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	20000460 	.word	0x20000460
 8003060:	40022000 	.word	0x40022000

08003064 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003068:	4b09      	ldr	r3, [pc, #36]	; (8003090 <FLASH_MassErase+0x2c>)
 800306a:	2200      	movs	r2, #0
 800306c:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800306e:	4b09      	ldr	r3, [pc, #36]	; (8003094 <FLASH_MassErase+0x30>)
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	4a08      	ldr	r2, [pc, #32]	; (8003094 <FLASH_MassErase+0x30>)
 8003074:	f043 0304 	orr.w	r3, r3, #4
 8003078:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800307a:	4b06      	ldr	r3, [pc, #24]	; (8003094 <FLASH_MassErase+0x30>)
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	4a05      	ldr	r2, [pc, #20]	; (8003094 <FLASH_MassErase+0x30>)
 8003080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003084:	6113      	str	r3, [r2, #16]
}
 8003086:	bf00      	nop
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	20000460 	.word	0x20000460
 8003094:	40022000 	.word	0x40022000

08003098 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80030a0:	4b0b      	ldr	r3, [pc, #44]	; (80030d0 <FLASH_PageErase+0x38>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80030a6:	4b0b      	ldr	r3, [pc, #44]	; (80030d4 <FLASH_PageErase+0x3c>)
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	4a0a      	ldr	r2, [pc, #40]	; (80030d4 <FLASH_PageErase+0x3c>)
 80030ac:	f043 0302 	orr.w	r3, r3, #2
 80030b0:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80030b2:	4a08      	ldr	r2, [pc, #32]	; (80030d4 <FLASH_PageErase+0x3c>)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80030b8:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <FLASH_PageErase+0x3c>)
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	4a05      	ldr	r2, [pc, #20]	; (80030d4 <FLASH_PageErase+0x3c>)
 80030be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030c2:	6113      	str	r3, [r2, #16]
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	20000460 	.word	0x20000460
 80030d4:	40022000 	.word	0x40022000

080030d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030d8:	b480      	push	{r7}
 80030da:	b087      	sub	sp, #28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030e2:	2300      	movs	r3, #0
 80030e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030e6:	e154      	b.n	8003392 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	2101      	movs	r1, #1
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	fa01 f303 	lsl.w	r3, r1, r3
 80030f4:	4013      	ands	r3, r2
 80030f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f000 8146 	beq.w	800338c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d00b      	beq.n	8003120 <HAL_GPIO_Init+0x48>
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2b02      	cmp	r3, #2
 800310e:	d007      	beq.n	8003120 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003114:	2b11      	cmp	r3, #17
 8003116:	d003      	beq.n	8003120 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b12      	cmp	r3, #18
 800311e:	d130      	bne.n	8003182 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	2203      	movs	r2, #3
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	43db      	mvns	r3, r3
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	4013      	ands	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	68da      	ldr	r2, [r3, #12]
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	4313      	orrs	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003156:	2201      	movs	r2, #1
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	43db      	mvns	r3, r3
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	4013      	ands	r3, r2
 8003164:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	091b      	lsrs	r3, r3, #4
 800316c:	f003 0201 	and.w	r2, r3, #1
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	4313      	orrs	r3, r2
 800317a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	2203      	movs	r2, #3
 800318e:	fa02 f303 	lsl.w	r3, r2, r3
 8003192:	43db      	mvns	r3, r3
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	4013      	ands	r3, r2
 8003198:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	689a      	ldr	r2, [r3, #8]
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d003      	beq.n	80031c2 <HAL_GPIO_Init+0xea>
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	2b12      	cmp	r3, #18
 80031c0:	d123      	bne.n	800320a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	08da      	lsrs	r2, r3, #3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	3208      	adds	r2, #8
 80031ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f003 0307 	and.w	r3, r3, #7
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	220f      	movs	r2, #15
 80031da:	fa02 f303 	lsl.w	r3, r2, r3
 80031de:	43db      	mvns	r3, r3
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	4013      	ands	r3, r2
 80031e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	691a      	ldr	r2, [r3, #16]
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	08da      	lsrs	r2, r3, #3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3208      	adds	r2, #8
 8003204:	6939      	ldr	r1, [r7, #16]
 8003206:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	2203      	movs	r2, #3
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	43db      	mvns	r3, r3
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	4013      	ands	r3, r2
 8003220:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f003 0203 	and.w	r2, r3, #3
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	fa02 f303 	lsl.w	r3, r2, r3
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	4313      	orrs	r3, r2
 8003236:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 80a0 	beq.w	800338c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800324c:	4b58      	ldr	r3, [pc, #352]	; (80033b0 <HAL_GPIO_Init+0x2d8>)
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	4a57      	ldr	r2, [pc, #348]	; (80033b0 <HAL_GPIO_Init+0x2d8>)
 8003252:	f043 0301 	orr.w	r3, r3, #1
 8003256:	6193      	str	r3, [r2, #24]
 8003258:	4b55      	ldr	r3, [pc, #340]	; (80033b0 <HAL_GPIO_Init+0x2d8>)
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	60bb      	str	r3, [r7, #8]
 8003262:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003264:	4a53      	ldr	r2, [pc, #332]	; (80033b4 <HAL_GPIO_Init+0x2dc>)
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	089b      	lsrs	r3, r3, #2
 800326a:	3302      	adds	r3, #2
 800326c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003270:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f003 0303 	and.w	r3, r3, #3
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	220f      	movs	r2, #15
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	43db      	mvns	r3, r3
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	4013      	ands	r3, r2
 8003286:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800328e:	d019      	beq.n	80032c4 <HAL_GPIO_Init+0x1ec>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a49      	ldr	r2, [pc, #292]	; (80033b8 <HAL_GPIO_Init+0x2e0>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d013      	beq.n	80032c0 <HAL_GPIO_Init+0x1e8>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a48      	ldr	r2, [pc, #288]	; (80033bc <HAL_GPIO_Init+0x2e4>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d00d      	beq.n	80032bc <HAL_GPIO_Init+0x1e4>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a47      	ldr	r2, [pc, #284]	; (80033c0 <HAL_GPIO_Init+0x2e8>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d007      	beq.n	80032b8 <HAL_GPIO_Init+0x1e0>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a46      	ldr	r2, [pc, #280]	; (80033c4 <HAL_GPIO_Init+0x2ec>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d101      	bne.n	80032b4 <HAL_GPIO_Init+0x1dc>
 80032b0:	2304      	movs	r3, #4
 80032b2:	e008      	b.n	80032c6 <HAL_GPIO_Init+0x1ee>
 80032b4:	2305      	movs	r3, #5
 80032b6:	e006      	b.n	80032c6 <HAL_GPIO_Init+0x1ee>
 80032b8:	2303      	movs	r3, #3
 80032ba:	e004      	b.n	80032c6 <HAL_GPIO_Init+0x1ee>
 80032bc:	2302      	movs	r3, #2
 80032be:	e002      	b.n	80032c6 <HAL_GPIO_Init+0x1ee>
 80032c0:	2301      	movs	r3, #1
 80032c2:	e000      	b.n	80032c6 <HAL_GPIO_Init+0x1ee>
 80032c4:	2300      	movs	r3, #0
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	f002 0203 	and.w	r2, r2, #3
 80032cc:	0092      	lsls	r2, r2, #2
 80032ce:	4093      	lsls	r3, r2
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032d6:	4937      	ldr	r1, [pc, #220]	; (80033b4 <HAL_GPIO_Init+0x2dc>)
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	089b      	lsrs	r3, r3, #2
 80032dc:	3302      	adds	r3, #2
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032e4:	4b38      	ldr	r3, [pc, #224]	; (80033c8 <HAL_GPIO_Init+0x2f0>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	43db      	mvns	r3, r3
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	4013      	ands	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d003      	beq.n	8003308 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4313      	orrs	r3, r2
 8003306:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003308:	4a2f      	ldr	r2, [pc, #188]	; (80033c8 <HAL_GPIO_Init+0x2f0>)
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800330e:	4b2e      	ldr	r3, [pc, #184]	; (80033c8 <HAL_GPIO_Init+0x2f0>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	43db      	mvns	r3, r3
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	4013      	ands	r3, r2
 800331c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4313      	orrs	r3, r2
 8003330:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003332:	4a25      	ldr	r2, [pc, #148]	; (80033c8 <HAL_GPIO_Init+0x2f0>)
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003338:	4b23      	ldr	r3, [pc, #140]	; (80033c8 <HAL_GPIO_Init+0x2f0>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	43db      	mvns	r3, r3
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	4013      	ands	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d003      	beq.n	800335c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	4313      	orrs	r3, r2
 800335a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800335c:	4a1a      	ldr	r2, [pc, #104]	; (80033c8 <HAL_GPIO_Init+0x2f0>)
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003362:	4b19      	ldr	r3, [pc, #100]	; (80033c8 <HAL_GPIO_Init+0x2f0>)
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	43db      	mvns	r3, r3
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	4013      	ands	r3, r2
 8003370:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4313      	orrs	r3, r2
 8003384:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003386:	4a10      	ldr	r2, [pc, #64]	; (80033c8 <HAL_GPIO_Init+0x2f0>)
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	3301      	adds	r3, #1
 8003390:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	fa22 f303 	lsr.w	r3, r2, r3
 800339c:	2b00      	cmp	r3, #0
 800339e:	f47f aea3 	bne.w	80030e8 <HAL_GPIO_Init+0x10>
  }
}
 80033a2:	bf00      	nop
 80033a4:	371c      	adds	r7, #28
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	40021000 	.word	0x40021000
 80033b4:	40010000 	.word	0x40010000
 80033b8:	48000400 	.word	0x48000400
 80033bc:	48000800 	.word	0x48000800
 80033c0:	48000c00 	.word	0x48000c00
 80033c4:	48001000 	.word	0x48001000
 80033c8:	40010400 	.word	0x40010400

080033cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	460b      	mov	r3, r1
 80033d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	691a      	ldr	r2, [r3, #16]
 80033dc:	887b      	ldrh	r3, [r7, #2]
 80033de:	4013      	ands	r3, r2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d002      	beq.n	80033ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033e4:	2301      	movs	r3, #1
 80033e6:	73fb      	strb	r3, [r7, #15]
 80033e8:	e001      	b.n	80033ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033ea:	2300      	movs	r3, #0
 80033ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3714      	adds	r7, #20
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <HAL_PWREx_EnableSDADC>:
  * @param  Analogx specifies the SDADC peripheral instance.
  *   This parameter can be: PWR_SDADC_ANALOG1, PWR_SDADC_ANALOG2 or PWR_SDADC_ANALOG3.
  * @retval None
  */
void HAL_PWREx_EnableSDADC(uint32_t Analogx)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_SDADC_ANALOG(Analogx));

  /* Enable PWR clock interface for SDADC use */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003404:	4b0b      	ldr	r3, [pc, #44]	; (8003434 <HAL_PWREx_EnableSDADC+0x38>)
 8003406:	69db      	ldr	r3, [r3, #28]
 8003408:	4a0a      	ldr	r2, [pc, #40]	; (8003434 <HAL_PWREx_EnableSDADC+0x38>)
 800340a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800340e:	61d3      	str	r3, [r2, #28]
 8003410:	4b08      	ldr	r3, [pc, #32]	; (8003434 <HAL_PWREx_EnableSDADC+0x38>)
 8003412:	69db      	ldr	r3, [r3, #28]
 8003414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003418:	60fb      	str	r3, [r7, #12]
 800341a:	68fb      	ldr	r3, [r7, #12]
    
  PWR->CR |= Analogx;
 800341c:	4b06      	ldr	r3, [pc, #24]	; (8003438 <HAL_PWREx_EnableSDADC+0x3c>)
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	4905      	ldr	r1, [pc, #20]	; (8003438 <HAL_PWREx_EnableSDADC+0x3c>)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4313      	orrs	r3, r2
 8003426:	600b      	str	r3, [r1, #0]
}
 8003428:	bf00      	nop
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr
 8003434:	40021000 	.word	0x40021000
 8003438:	40007000 	.word	0x40007000

0800343c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003442:	af00      	add	r7, sp, #0
 8003444:	1d3b      	adds	r3, r7, #4
 8003446:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003448:	1d3b      	adds	r3, r7, #4
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d102      	bne.n	8003456 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	f000 bef4 	b.w	800423e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003456:	1d3b      	adds	r3, r7, #4
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 816a 	beq.w	800373a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003466:	4bb3      	ldr	r3, [pc, #716]	; (8003734 <HAL_RCC_OscConfig+0x2f8>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f003 030c 	and.w	r3, r3, #12
 800346e:	2b04      	cmp	r3, #4
 8003470:	d00c      	beq.n	800348c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003472:	4bb0      	ldr	r3, [pc, #704]	; (8003734 <HAL_RCC_OscConfig+0x2f8>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f003 030c 	and.w	r3, r3, #12
 800347a:	2b08      	cmp	r3, #8
 800347c:	d159      	bne.n	8003532 <HAL_RCC_OscConfig+0xf6>
 800347e:	4bad      	ldr	r3, [pc, #692]	; (8003734 <HAL_RCC_OscConfig+0x2f8>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800348a:	d152      	bne.n	8003532 <HAL_RCC_OscConfig+0xf6>
 800348c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003490:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003494:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003498:	fa93 f3a3 	rbit	r3, r3
 800349c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80034a0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034a4:	fab3 f383 	clz	r3, r3
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	095b      	lsrs	r3, r3, #5
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	f043 0301 	orr.w	r3, r3, #1
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d102      	bne.n	80034be <HAL_RCC_OscConfig+0x82>
 80034b8:	4b9e      	ldr	r3, [pc, #632]	; (8003734 <HAL_RCC_OscConfig+0x2f8>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	e015      	b.n	80034ea <HAL_RCC_OscConfig+0xae>
 80034be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034c2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80034ca:	fa93 f3a3 	rbit	r3, r3
 80034ce:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80034d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034d6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80034da:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80034de:	fa93 f3a3 	rbit	r3, r3
 80034e2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80034e6:	4b93      	ldr	r3, [pc, #588]	; (8003734 <HAL_RCC_OscConfig+0x2f8>)
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034ee:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80034f2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80034f6:	fa92 f2a2 	rbit	r2, r2
 80034fa:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80034fe:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003502:	fab2 f282 	clz	r2, r2
 8003506:	b2d2      	uxtb	r2, r2
 8003508:	f042 0220 	orr.w	r2, r2, #32
 800350c:	b2d2      	uxtb	r2, r2
 800350e:	f002 021f 	and.w	r2, r2, #31
 8003512:	2101      	movs	r1, #1
 8003514:	fa01 f202 	lsl.w	r2, r1, r2
 8003518:	4013      	ands	r3, r2
 800351a:	2b00      	cmp	r3, #0
 800351c:	f000 810c 	beq.w	8003738 <HAL_RCC_OscConfig+0x2fc>
 8003520:	1d3b      	adds	r3, r7, #4
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	f040 8106 	bne.w	8003738 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	f000 be86 	b.w	800423e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003532:	1d3b      	adds	r3, r7, #4
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800353c:	d106      	bne.n	800354c <HAL_RCC_OscConfig+0x110>
 800353e:	4b7d      	ldr	r3, [pc, #500]	; (8003734 <HAL_RCC_OscConfig+0x2f8>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a7c      	ldr	r2, [pc, #496]	; (8003734 <HAL_RCC_OscConfig+0x2f8>)
 8003544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003548:	6013      	str	r3, [r2, #0]
 800354a:	e030      	b.n	80035ae <HAL_RCC_OscConfig+0x172>
 800354c:	1d3b      	adds	r3, r7, #4
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10c      	bne.n	8003570 <HAL_RCC_OscConfig+0x134>
 8003556:	4b77      	ldr	r3, [pc, #476]	; (8003734 <HAL_RCC_OscConfig+0x2f8>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a76      	ldr	r2, [pc, #472]	; (8003734 <HAL_RCC_OscConfig+0x2f8>)
 800355c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003560:	6013      	str	r3, [r2, #0]
 8003562:	4b74      	ldr	r3, [pc, #464]	; (8003734 <HAL_RCC_OscConfig+0x2f8>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a73      	ldr	r2, [pc, #460]	; (8003734 <HAL_RCC_OscConfig+0x2f8>)
 8003568:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	e01e      	b.n	80035ae <HAL_RCC_OscConfig+0x172>
 8003570:	1d3b      	adds	r3, r7, #4
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800357a:	d10c      	bne.n	8003596 <HAL_RCC_OscConfig+0x15a>
 800357c:	4b6d      	ldr	r3, [pc, #436]	; (8003734 <HAL_RCC_OscConfig+0x2f8>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a6c      	ldr	r2, [pc, #432]	; (8003734 <HAL_RCC_OscConfig+0x2f8>)
 8003582:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	4b6a      	ldr	r3, [pc, #424]	; (8003734 <HAL_RCC_OscConfig+0x2f8>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a69      	ldr	r2, [pc, #420]	; (8003734 <HAL_RCC_OscConfig+0x2f8>)
 800358e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003592:	6013      	str	r3, [r2, #0]
 8003594:	e00b      	b.n	80035ae <HAL_RCC_OscConfig+0x172>
 8003596:	4b67      	ldr	r3, [pc, #412]	; (8003734 <HAL_RCC_OscConfig+0x2f8>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a66      	ldr	r2, [pc, #408]	; (8003734 <HAL_RCC_OscConfig+0x2f8>)
 800359c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	4b64      	ldr	r3, [pc, #400]	; (8003734 <HAL_RCC_OscConfig+0x2f8>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a63      	ldr	r2, [pc, #396]	; (8003734 <HAL_RCC_OscConfig+0x2f8>)
 80035a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ac:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035ae:	4b61      	ldr	r3, [pc, #388]	; (8003734 <HAL_RCC_OscConfig+0x2f8>)
 80035b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b2:	f023 020f 	bic.w	r2, r3, #15
 80035b6:	1d3b      	adds	r3, r7, #4
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	495d      	ldr	r1, [pc, #372]	; (8003734 <HAL_RCC_OscConfig+0x2f8>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035c2:	1d3b      	adds	r3, r7, #4
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d059      	beq.n	8003680 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035cc:	f7fe fc72 	bl	8001eb4 <HAL_GetTick>
 80035d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d4:	e00a      	b.n	80035ec <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035d6:	f7fe fc6d 	bl	8001eb4 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b64      	cmp	r3, #100	; 0x64
 80035e4:	d902      	bls.n	80035ec <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	f000 be29 	b.w	800423e <HAL_RCC_OscConfig+0xe02>
 80035ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035f0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80035f8:	fa93 f3a3 	rbit	r3, r3
 80035fc:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003600:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003604:	fab3 f383 	clz	r3, r3
 8003608:	b2db      	uxtb	r3, r3
 800360a:	095b      	lsrs	r3, r3, #5
 800360c:	b2db      	uxtb	r3, r3
 800360e:	f043 0301 	orr.w	r3, r3, #1
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b01      	cmp	r3, #1
 8003616:	d102      	bne.n	800361e <HAL_RCC_OscConfig+0x1e2>
 8003618:	4b46      	ldr	r3, [pc, #280]	; (8003734 <HAL_RCC_OscConfig+0x2f8>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	e015      	b.n	800364a <HAL_RCC_OscConfig+0x20e>
 800361e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003622:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003626:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800362a:	fa93 f3a3 	rbit	r3, r3
 800362e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003632:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003636:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800363a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800363e:	fa93 f3a3 	rbit	r3, r3
 8003642:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003646:	4b3b      	ldr	r3, [pc, #236]	; (8003734 <HAL_RCC_OscConfig+0x2f8>)
 8003648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800364e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003652:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003656:	fa92 f2a2 	rbit	r2, r2
 800365a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800365e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003662:	fab2 f282 	clz	r2, r2
 8003666:	b2d2      	uxtb	r2, r2
 8003668:	f042 0220 	orr.w	r2, r2, #32
 800366c:	b2d2      	uxtb	r2, r2
 800366e:	f002 021f 	and.w	r2, r2, #31
 8003672:	2101      	movs	r1, #1
 8003674:	fa01 f202 	lsl.w	r2, r1, r2
 8003678:	4013      	ands	r3, r2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0ab      	beq.n	80035d6 <HAL_RCC_OscConfig+0x19a>
 800367e:	e05c      	b.n	800373a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003680:	f7fe fc18 	bl	8001eb4 <HAL_GetTick>
 8003684:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003688:	e00a      	b.n	80036a0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800368a:	f7fe fc13 	bl	8001eb4 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b64      	cmp	r3, #100	; 0x64
 8003698:	d902      	bls.n	80036a0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	f000 bdcf 	b.w	800423e <HAL_RCC_OscConfig+0xe02>
 80036a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036a4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80036ac:	fa93 f3a3 	rbit	r3, r3
 80036b0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80036b4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036b8:	fab3 f383 	clz	r3, r3
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	095b      	lsrs	r3, r3, #5
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	f043 0301 	orr.w	r3, r3, #1
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d102      	bne.n	80036d2 <HAL_RCC_OscConfig+0x296>
 80036cc:	4b19      	ldr	r3, [pc, #100]	; (8003734 <HAL_RCC_OscConfig+0x2f8>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	e015      	b.n	80036fe <HAL_RCC_OscConfig+0x2c2>
 80036d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036d6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036da:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80036de:	fa93 f3a3 	rbit	r3, r3
 80036e2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80036e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036ea:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80036ee:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80036f2:	fa93 f3a3 	rbit	r3, r3
 80036f6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80036fa:	4b0e      	ldr	r3, [pc, #56]	; (8003734 <HAL_RCC_OscConfig+0x2f8>)
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003702:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003706:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800370a:	fa92 f2a2 	rbit	r2, r2
 800370e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003712:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003716:	fab2 f282 	clz	r2, r2
 800371a:	b2d2      	uxtb	r2, r2
 800371c:	f042 0220 	orr.w	r2, r2, #32
 8003720:	b2d2      	uxtb	r2, r2
 8003722:	f002 021f 	and.w	r2, r2, #31
 8003726:	2101      	movs	r1, #1
 8003728:	fa01 f202 	lsl.w	r2, r1, r2
 800372c:	4013      	ands	r3, r2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1ab      	bne.n	800368a <HAL_RCC_OscConfig+0x24e>
 8003732:	e002      	b.n	800373a <HAL_RCC_OscConfig+0x2fe>
 8003734:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003738:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800373a:	1d3b      	adds	r3, r7, #4
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 816f 	beq.w	8003a28 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800374a:	4bd0      	ldr	r3, [pc, #832]	; (8003a8c <HAL_RCC_OscConfig+0x650>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f003 030c 	and.w	r3, r3, #12
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00b      	beq.n	800376e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003756:	4bcd      	ldr	r3, [pc, #820]	; (8003a8c <HAL_RCC_OscConfig+0x650>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f003 030c 	and.w	r3, r3, #12
 800375e:	2b08      	cmp	r3, #8
 8003760:	d16c      	bne.n	800383c <HAL_RCC_OscConfig+0x400>
 8003762:	4bca      	ldr	r3, [pc, #808]	; (8003a8c <HAL_RCC_OscConfig+0x650>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d166      	bne.n	800383c <HAL_RCC_OscConfig+0x400>
 800376e:	2302      	movs	r3, #2
 8003770:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003774:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003778:	fa93 f3a3 	rbit	r3, r3
 800377c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003780:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003784:	fab3 f383 	clz	r3, r3
 8003788:	b2db      	uxtb	r3, r3
 800378a:	095b      	lsrs	r3, r3, #5
 800378c:	b2db      	uxtb	r3, r3
 800378e:	f043 0301 	orr.w	r3, r3, #1
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b01      	cmp	r3, #1
 8003796:	d102      	bne.n	800379e <HAL_RCC_OscConfig+0x362>
 8003798:	4bbc      	ldr	r3, [pc, #752]	; (8003a8c <HAL_RCC_OscConfig+0x650>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	e013      	b.n	80037c6 <HAL_RCC_OscConfig+0x38a>
 800379e:	2302      	movs	r3, #2
 80037a0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80037a8:	fa93 f3a3 	rbit	r3, r3
 80037ac:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80037b0:	2302      	movs	r3, #2
 80037b2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80037b6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80037ba:	fa93 f3a3 	rbit	r3, r3
 80037be:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80037c2:	4bb2      	ldr	r3, [pc, #712]	; (8003a8c <HAL_RCC_OscConfig+0x650>)
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	2202      	movs	r2, #2
 80037c8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80037cc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80037d0:	fa92 f2a2 	rbit	r2, r2
 80037d4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80037d8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80037dc:	fab2 f282 	clz	r2, r2
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	f042 0220 	orr.w	r2, r2, #32
 80037e6:	b2d2      	uxtb	r2, r2
 80037e8:	f002 021f 	and.w	r2, r2, #31
 80037ec:	2101      	movs	r1, #1
 80037ee:	fa01 f202 	lsl.w	r2, r1, r2
 80037f2:	4013      	ands	r3, r2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d007      	beq.n	8003808 <HAL_RCC_OscConfig+0x3cc>
 80037f8:	1d3b      	adds	r3, r7, #4
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d002      	beq.n	8003808 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	f000 bd1b 	b.w	800423e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003808:	4ba0      	ldr	r3, [pc, #640]	; (8003a8c <HAL_RCC_OscConfig+0x650>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003810:	1d3b      	adds	r3, r7, #4
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	21f8      	movs	r1, #248	; 0xf8
 8003818:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003820:	fa91 f1a1 	rbit	r1, r1
 8003824:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003828:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800382c:	fab1 f181 	clz	r1, r1
 8003830:	b2c9      	uxtb	r1, r1
 8003832:	408b      	lsls	r3, r1
 8003834:	4995      	ldr	r1, [pc, #596]	; (8003a8c <HAL_RCC_OscConfig+0x650>)
 8003836:	4313      	orrs	r3, r2
 8003838:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800383a:	e0f5      	b.n	8003a28 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800383c:	1d3b      	adds	r3, r7, #4
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	2b00      	cmp	r3, #0
 8003844:	f000 8085 	beq.w	8003952 <HAL_RCC_OscConfig+0x516>
 8003848:	2301      	movs	r3, #1
 800384a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003852:	fa93 f3a3 	rbit	r3, r3
 8003856:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800385a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800385e:	fab3 f383 	clz	r3, r3
 8003862:	b2db      	uxtb	r3, r3
 8003864:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003868:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	461a      	mov	r2, r3
 8003870:	2301      	movs	r3, #1
 8003872:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003874:	f7fe fb1e 	bl	8001eb4 <HAL_GetTick>
 8003878:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800387c:	e00a      	b.n	8003894 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800387e:	f7fe fb19 	bl	8001eb4 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d902      	bls.n	8003894 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	f000 bcd5 	b.w	800423e <HAL_RCC_OscConfig+0xe02>
 8003894:	2302      	movs	r3, #2
 8003896:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800389e:	fa93 f3a3 	rbit	r3, r3
 80038a2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80038a6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038aa:	fab3 f383 	clz	r3, r3
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	095b      	lsrs	r3, r3, #5
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	f043 0301 	orr.w	r3, r3, #1
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d102      	bne.n	80038c4 <HAL_RCC_OscConfig+0x488>
 80038be:	4b73      	ldr	r3, [pc, #460]	; (8003a8c <HAL_RCC_OscConfig+0x650>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	e013      	b.n	80038ec <HAL_RCC_OscConfig+0x4b0>
 80038c4:	2302      	movs	r3, #2
 80038c6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ca:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80038ce:	fa93 f3a3 	rbit	r3, r3
 80038d2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80038d6:	2302      	movs	r3, #2
 80038d8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80038dc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80038e0:	fa93 f3a3 	rbit	r3, r3
 80038e4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80038e8:	4b68      	ldr	r3, [pc, #416]	; (8003a8c <HAL_RCC_OscConfig+0x650>)
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	2202      	movs	r2, #2
 80038ee:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80038f2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80038f6:	fa92 f2a2 	rbit	r2, r2
 80038fa:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80038fe:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003902:	fab2 f282 	clz	r2, r2
 8003906:	b2d2      	uxtb	r2, r2
 8003908:	f042 0220 	orr.w	r2, r2, #32
 800390c:	b2d2      	uxtb	r2, r2
 800390e:	f002 021f 	and.w	r2, r2, #31
 8003912:	2101      	movs	r1, #1
 8003914:	fa01 f202 	lsl.w	r2, r1, r2
 8003918:	4013      	ands	r3, r2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0af      	beq.n	800387e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800391e:	4b5b      	ldr	r3, [pc, #364]	; (8003a8c <HAL_RCC_OscConfig+0x650>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003926:	1d3b      	adds	r3, r7, #4
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	695b      	ldr	r3, [r3, #20]
 800392c:	21f8      	movs	r1, #248	; 0xf8
 800392e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003932:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003936:	fa91 f1a1 	rbit	r1, r1
 800393a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800393e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003942:	fab1 f181 	clz	r1, r1
 8003946:	b2c9      	uxtb	r1, r1
 8003948:	408b      	lsls	r3, r1
 800394a:	4950      	ldr	r1, [pc, #320]	; (8003a8c <HAL_RCC_OscConfig+0x650>)
 800394c:	4313      	orrs	r3, r2
 800394e:	600b      	str	r3, [r1, #0]
 8003950:	e06a      	b.n	8003a28 <HAL_RCC_OscConfig+0x5ec>
 8003952:	2301      	movs	r3, #1
 8003954:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003958:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800395c:	fa93 f3a3 	rbit	r3, r3
 8003960:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003964:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003968:	fab3 f383 	clz	r3, r3
 800396c:	b2db      	uxtb	r3, r3
 800396e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003972:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	461a      	mov	r2, r3
 800397a:	2300      	movs	r3, #0
 800397c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397e:	f7fe fa99 	bl	8001eb4 <HAL_GetTick>
 8003982:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003986:	e00a      	b.n	800399e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003988:	f7fe fa94 	bl	8001eb4 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d902      	bls.n	800399e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	f000 bc50 	b.w	800423e <HAL_RCC_OscConfig+0xe02>
 800399e:	2302      	movs	r3, #2
 80039a0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80039a8:	fa93 f3a3 	rbit	r3, r3
 80039ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80039b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039b4:	fab3 f383 	clz	r3, r3
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	095b      	lsrs	r3, r3, #5
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	f043 0301 	orr.w	r3, r3, #1
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d102      	bne.n	80039ce <HAL_RCC_OscConfig+0x592>
 80039c8:	4b30      	ldr	r3, [pc, #192]	; (8003a8c <HAL_RCC_OscConfig+0x650>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	e013      	b.n	80039f6 <HAL_RCC_OscConfig+0x5ba>
 80039ce:	2302      	movs	r3, #2
 80039d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80039d8:	fa93 f3a3 	rbit	r3, r3
 80039dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80039e0:	2302      	movs	r3, #2
 80039e2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80039e6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80039ea:	fa93 f3a3 	rbit	r3, r3
 80039ee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80039f2:	4b26      	ldr	r3, [pc, #152]	; (8003a8c <HAL_RCC_OscConfig+0x650>)
 80039f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f6:	2202      	movs	r2, #2
 80039f8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80039fc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003a00:	fa92 f2a2 	rbit	r2, r2
 8003a04:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003a08:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003a0c:	fab2 f282 	clz	r2, r2
 8003a10:	b2d2      	uxtb	r2, r2
 8003a12:	f042 0220 	orr.w	r2, r2, #32
 8003a16:	b2d2      	uxtb	r2, r2
 8003a18:	f002 021f 	and.w	r2, r2, #31
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a22:	4013      	ands	r3, r2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1af      	bne.n	8003988 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a28:	1d3b      	adds	r3, r7, #4
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0308 	and.w	r3, r3, #8
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 80da 	beq.w	8003bec <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a38:	1d3b      	adds	r3, r7, #4
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d069      	beq.n	8003b16 <HAL_RCC_OscConfig+0x6da>
 8003a42:	2301      	movs	r3, #1
 8003a44:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a48:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003a4c:	fa93 f3a3 	rbit	r3, r3
 8003a50:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003a54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a58:	fab3 f383 	clz	r3, r3
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	461a      	mov	r2, r3
 8003a60:	4b0b      	ldr	r3, [pc, #44]	; (8003a90 <HAL_RCC_OscConfig+0x654>)
 8003a62:	4413      	add	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	461a      	mov	r2, r3
 8003a68:	2301      	movs	r3, #1
 8003a6a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a6c:	f7fe fa22 	bl	8001eb4 <HAL_GetTick>
 8003a70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a74:	e00e      	b.n	8003a94 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a76:	f7fe fa1d 	bl	8001eb4 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d906      	bls.n	8003a94 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e3d9      	b.n	800423e <HAL_RCC_OscConfig+0xe02>
 8003a8a:	bf00      	nop
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	10908120 	.word	0x10908120
 8003a94:	2302      	movs	r3, #2
 8003a96:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003a9e:	fa93 f3a3 	rbit	r3, r3
 8003aa2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003aa6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003aaa:	2202      	movs	r2, #2
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	fa93 f2a3 	rbit	r2, r3
 8003ab8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	601a      	str	r2, [r3, #0]
 8003ac6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	fa93 f2a3 	rbit	r2, r3
 8003ad0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003ad4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ad6:	4ba5      	ldr	r3, [pc, #660]	; (8003d6c <HAL_RCC_OscConfig+0x930>)
 8003ad8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ada:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003ade:	2102      	movs	r1, #2
 8003ae0:	6019      	str	r1, [r3, #0]
 8003ae2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	fa93 f1a3 	rbit	r1, r3
 8003aec:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003af0:	6019      	str	r1, [r3, #0]
  return result;
 8003af2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	fab3 f383 	clz	r3, r3
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	f003 031f 	and.w	r3, r3, #31
 8003b08:	2101      	movs	r1, #1
 8003b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b0e:	4013      	ands	r3, r2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0b0      	beq.n	8003a76 <HAL_RCC_OscConfig+0x63a>
 8003b14:	e06a      	b.n	8003bec <HAL_RCC_OscConfig+0x7b0>
 8003b16:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	fa93 f2a3 	rbit	r2, r3
 8003b28:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003b2c:	601a      	str	r2, [r3, #0]
  return result;
 8003b2e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003b32:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b34:	fab3 f383 	clz	r3, r3
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	4b8c      	ldr	r3, [pc, #560]	; (8003d70 <HAL_RCC_OscConfig+0x934>)
 8003b3e:	4413      	add	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	461a      	mov	r2, r3
 8003b44:	2300      	movs	r3, #0
 8003b46:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b48:	f7fe f9b4 	bl	8001eb4 <HAL_GetTick>
 8003b4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b50:	e009      	b.n	8003b66 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b52:	f7fe f9af 	bl	8001eb4 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e36b      	b.n	800423e <HAL_RCC_OscConfig+0xe02>
 8003b66:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	fa93 f2a3 	rbit	r2, r3
 8003b78:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003b7c:	601a      	str	r2, [r3, #0]
 8003b7e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003b82:	2202      	movs	r2, #2
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	fa93 f2a3 	rbit	r2, r3
 8003b90:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	fa93 f2a3 	rbit	r2, r3
 8003ba8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003bac:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bae:	4b6f      	ldr	r3, [pc, #444]	; (8003d6c <HAL_RCC_OscConfig+0x930>)
 8003bb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bb2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003bb6:	2102      	movs	r1, #2
 8003bb8:	6019      	str	r1, [r3, #0]
 8003bba:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	fa93 f1a3 	rbit	r1, r3
 8003bc4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003bc8:	6019      	str	r1, [r3, #0]
  return result;
 8003bca:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	fab3 f383 	clz	r3, r3
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	f003 031f 	and.w	r3, r3, #31
 8003be0:	2101      	movs	r1, #1
 8003be2:	fa01 f303 	lsl.w	r3, r1, r3
 8003be6:	4013      	ands	r3, r2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1b2      	bne.n	8003b52 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bec:	1d3b      	adds	r3, r7, #4
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0304 	and.w	r3, r3, #4
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f000 8158 	beq.w	8003eac <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c02:	4b5a      	ldr	r3, [pc, #360]	; (8003d6c <HAL_RCC_OscConfig+0x930>)
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d112      	bne.n	8003c34 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c0e:	4b57      	ldr	r3, [pc, #348]	; (8003d6c <HAL_RCC_OscConfig+0x930>)
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	4a56      	ldr	r2, [pc, #344]	; (8003d6c <HAL_RCC_OscConfig+0x930>)
 8003c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c18:	61d3      	str	r3, [r2, #28]
 8003c1a:	4b54      	ldr	r3, [pc, #336]	; (8003d6c <HAL_RCC_OscConfig+0x930>)
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003c22:	f107 0308 	add.w	r3, r7, #8
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	f107 0308 	add.w	r3, r7, #8
 8003c2c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c34:	4b4f      	ldr	r3, [pc, #316]	; (8003d74 <HAL_RCC_OscConfig+0x938>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d11a      	bne.n	8003c76 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c40:	4b4c      	ldr	r3, [pc, #304]	; (8003d74 <HAL_RCC_OscConfig+0x938>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a4b      	ldr	r2, [pc, #300]	; (8003d74 <HAL_RCC_OscConfig+0x938>)
 8003c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c4a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c4c:	f7fe f932 	bl	8001eb4 <HAL_GetTick>
 8003c50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c54:	e009      	b.n	8003c6a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c56:	f7fe f92d 	bl	8001eb4 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b64      	cmp	r3, #100	; 0x64
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e2e9      	b.n	800423e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c6a:	4b42      	ldr	r3, [pc, #264]	; (8003d74 <HAL_RCC_OscConfig+0x938>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d0ef      	beq.n	8003c56 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c76:	1d3b      	adds	r3, r7, #4
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d106      	bne.n	8003c8e <HAL_RCC_OscConfig+0x852>
 8003c80:	4b3a      	ldr	r3, [pc, #232]	; (8003d6c <HAL_RCC_OscConfig+0x930>)
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	4a39      	ldr	r2, [pc, #228]	; (8003d6c <HAL_RCC_OscConfig+0x930>)
 8003c86:	f043 0301 	orr.w	r3, r3, #1
 8003c8a:	6213      	str	r3, [r2, #32]
 8003c8c:	e02f      	b.n	8003cee <HAL_RCC_OscConfig+0x8b2>
 8003c8e:	1d3b      	adds	r3, r7, #4
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d10c      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x876>
 8003c98:	4b34      	ldr	r3, [pc, #208]	; (8003d6c <HAL_RCC_OscConfig+0x930>)
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	4a33      	ldr	r2, [pc, #204]	; (8003d6c <HAL_RCC_OscConfig+0x930>)
 8003c9e:	f023 0301 	bic.w	r3, r3, #1
 8003ca2:	6213      	str	r3, [r2, #32]
 8003ca4:	4b31      	ldr	r3, [pc, #196]	; (8003d6c <HAL_RCC_OscConfig+0x930>)
 8003ca6:	6a1b      	ldr	r3, [r3, #32]
 8003ca8:	4a30      	ldr	r2, [pc, #192]	; (8003d6c <HAL_RCC_OscConfig+0x930>)
 8003caa:	f023 0304 	bic.w	r3, r3, #4
 8003cae:	6213      	str	r3, [r2, #32]
 8003cb0:	e01d      	b.n	8003cee <HAL_RCC_OscConfig+0x8b2>
 8003cb2:	1d3b      	adds	r3, r7, #4
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	2b05      	cmp	r3, #5
 8003cba:	d10c      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x89a>
 8003cbc:	4b2b      	ldr	r3, [pc, #172]	; (8003d6c <HAL_RCC_OscConfig+0x930>)
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	4a2a      	ldr	r2, [pc, #168]	; (8003d6c <HAL_RCC_OscConfig+0x930>)
 8003cc2:	f043 0304 	orr.w	r3, r3, #4
 8003cc6:	6213      	str	r3, [r2, #32]
 8003cc8:	4b28      	ldr	r3, [pc, #160]	; (8003d6c <HAL_RCC_OscConfig+0x930>)
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	4a27      	ldr	r2, [pc, #156]	; (8003d6c <HAL_RCC_OscConfig+0x930>)
 8003cce:	f043 0301 	orr.w	r3, r3, #1
 8003cd2:	6213      	str	r3, [r2, #32]
 8003cd4:	e00b      	b.n	8003cee <HAL_RCC_OscConfig+0x8b2>
 8003cd6:	4b25      	ldr	r3, [pc, #148]	; (8003d6c <HAL_RCC_OscConfig+0x930>)
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	4a24      	ldr	r2, [pc, #144]	; (8003d6c <HAL_RCC_OscConfig+0x930>)
 8003cdc:	f023 0301 	bic.w	r3, r3, #1
 8003ce0:	6213      	str	r3, [r2, #32]
 8003ce2:	4b22      	ldr	r3, [pc, #136]	; (8003d6c <HAL_RCC_OscConfig+0x930>)
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	4a21      	ldr	r2, [pc, #132]	; (8003d6c <HAL_RCC_OscConfig+0x930>)
 8003ce8:	f023 0304 	bic.w	r3, r3, #4
 8003cec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cee:	1d3b      	adds	r3, r7, #4
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d06b      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cf8:	f7fe f8dc 	bl	8001eb4 <HAL_GetTick>
 8003cfc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d00:	e00b      	b.n	8003d1a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d02:	f7fe f8d7 	bl	8001eb4 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e291      	b.n	800423e <HAL_RCC_OscConfig+0xe02>
 8003d1a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003d1e:	2202      	movs	r2, #2
 8003d20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d22:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	fa93 f2a3 	rbit	r2, r3
 8003d2c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003d36:	2202      	movs	r2, #2
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	fa93 f2a3 	rbit	r2, r3
 8003d44:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003d48:	601a      	str	r2, [r3, #0]
  return result;
 8003d4a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003d4e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d50:	fab3 f383 	clz	r3, r3
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	095b      	lsrs	r3, r3, #5
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	f043 0302 	orr.w	r3, r3, #2
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d109      	bne.n	8003d78 <HAL_RCC_OscConfig+0x93c>
 8003d64:	4b01      	ldr	r3, [pc, #4]	; (8003d6c <HAL_RCC_OscConfig+0x930>)
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	e014      	b.n	8003d94 <HAL_RCC_OscConfig+0x958>
 8003d6a:	bf00      	nop
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	10908120 	.word	0x10908120
 8003d74:	40007000 	.word	0x40007000
 8003d78:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003d7c:	2202      	movs	r2, #2
 8003d7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d80:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	fa93 f2a3 	rbit	r2, r3
 8003d8a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003d8e:	601a      	str	r2, [r3, #0]
 8003d90:	4bbb      	ldr	r3, [pc, #748]	; (8004080 <HAL_RCC_OscConfig+0xc44>)
 8003d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d94:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003d98:	2102      	movs	r1, #2
 8003d9a:	6011      	str	r1, [r2, #0]
 8003d9c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003da0:	6812      	ldr	r2, [r2, #0]
 8003da2:	fa92 f1a2 	rbit	r1, r2
 8003da6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003daa:	6011      	str	r1, [r2, #0]
  return result;
 8003dac:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003db0:	6812      	ldr	r2, [r2, #0]
 8003db2:	fab2 f282 	clz	r2, r2
 8003db6:	b2d2      	uxtb	r2, r2
 8003db8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dbc:	b2d2      	uxtb	r2, r2
 8003dbe:	f002 021f 	and.w	r2, r2, #31
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8003dc8:	4013      	ands	r3, r2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d099      	beq.n	8003d02 <HAL_RCC_OscConfig+0x8c6>
 8003dce:	e063      	b.n	8003e98 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dd0:	f7fe f870 	bl	8001eb4 <HAL_GetTick>
 8003dd4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dd8:	e00b      	b.n	8003df2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dda:	f7fe f86b 	bl	8001eb4 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e225      	b.n	800423e <HAL_RCC_OscConfig+0xe02>
 8003df2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003df6:	2202      	movs	r2, #2
 8003df8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	fa93 f2a3 	rbit	r2, r3
 8003e04:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003e08:	601a      	str	r2, [r3, #0]
 8003e0a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003e0e:	2202      	movs	r2, #2
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	fa93 f2a3 	rbit	r2, r3
 8003e1c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003e20:	601a      	str	r2, [r3, #0]
  return result;
 8003e22:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003e26:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e28:	fab3 f383 	clz	r3, r3
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	095b      	lsrs	r3, r3, #5
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	f043 0302 	orr.w	r3, r3, #2
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d102      	bne.n	8003e42 <HAL_RCC_OscConfig+0xa06>
 8003e3c:	4b90      	ldr	r3, [pc, #576]	; (8004080 <HAL_RCC_OscConfig+0xc44>)
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	e00d      	b.n	8003e5e <HAL_RCC_OscConfig+0xa22>
 8003e42:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003e46:	2202      	movs	r2, #2
 8003e48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	fa93 f2a3 	rbit	r2, r3
 8003e54:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	4b89      	ldr	r3, [pc, #548]	; (8004080 <HAL_RCC_OscConfig+0xc44>)
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003e62:	2102      	movs	r1, #2
 8003e64:	6011      	str	r1, [r2, #0]
 8003e66:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003e6a:	6812      	ldr	r2, [r2, #0]
 8003e6c:	fa92 f1a2 	rbit	r1, r2
 8003e70:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003e74:	6011      	str	r1, [r2, #0]
  return result;
 8003e76:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003e7a:	6812      	ldr	r2, [r2, #0]
 8003e7c:	fab2 f282 	clz	r2, r2
 8003e80:	b2d2      	uxtb	r2, r2
 8003e82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e86:	b2d2      	uxtb	r2, r2
 8003e88:	f002 021f 	and.w	r2, r2, #31
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	fa01 f202 	lsl.w	r2, r1, r2
 8003e92:	4013      	ands	r3, r2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1a0      	bne.n	8003dda <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e98:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d105      	bne.n	8003eac <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ea0:	4b77      	ldr	r3, [pc, #476]	; (8004080 <HAL_RCC_OscConfig+0xc44>)
 8003ea2:	69db      	ldr	r3, [r3, #28]
 8003ea4:	4a76      	ldr	r2, [pc, #472]	; (8004080 <HAL_RCC_OscConfig+0xc44>)
 8003ea6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eaa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eac:	1d3b      	adds	r3, r7, #4
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 81c2 	beq.w	800423c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003eb8:	4b71      	ldr	r3, [pc, #452]	; (8004080 <HAL_RCC_OscConfig+0xc44>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f003 030c 	and.w	r3, r3, #12
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	f000 819c 	beq.w	80041fe <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ec6:	1d3b      	adds	r3, r7, #4
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	f040 8114 	bne.w	80040fa <HAL_RCC_OscConfig+0xcbe>
 8003ed2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003ed6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003eda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003edc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	fa93 f2a3 	rbit	r2, r3
 8003ee6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003eea:	601a      	str	r2, [r3, #0]
  return result;
 8003eec:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003ef0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ef2:	fab3 f383 	clz	r3, r3
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003efc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	461a      	mov	r2, r3
 8003f04:	2300      	movs	r3, #0
 8003f06:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f08:	f7fd ffd4 	bl	8001eb4 <HAL_GetTick>
 8003f0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f10:	e009      	b.n	8003f26 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f12:	f7fd ffcf 	bl	8001eb4 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e18b      	b.n	800423e <HAL_RCC_OscConfig+0xe02>
 8003f26:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003f2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f30:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	fa93 f2a3 	rbit	r2, r3
 8003f3a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003f3e:	601a      	str	r2, [r3, #0]
  return result;
 8003f40:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003f44:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f46:	fab3 f383 	clz	r3, r3
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	095b      	lsrs	r3, r3, #5
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	f043 0301 	orr.w	r3, r3, #1
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d102      	bne.n	8003f60 <HAL_RCC_OscConfig+0xb24>
 8003f5a:	4b49      	ldr	r3, [pc, #292]	; (8004080 <HAL_RCC_OscConfig+0xc44>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	e01b      	b.n	8003f98 <HAL_RCC_OscConfig+0xb5c>
 8003f60:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003f64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f6a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	fa93 f2a3 	rbit	r2, r3
 8003f74:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003f7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f82:	601a      	str	r2, [r3, #0]
 8003f84:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	fa93 f2a3 	rbit	r2, r3
 8003f8e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	4b3a      	ldr	r3, [pc, #232]	; (8004080 <HAL_RCC_OscConfig+0xc44>)
 8003f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f98:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003f9c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003fa0:	6011      	str	r1, [r2, #0]
 8003fa2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003fa6:	6812      	ldr	r2, [r2, #0]
 8003fa8:	fa92 f1a2 	rbit	r1, r2
 8003fac:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003fb0:	6011      	str	r1, [r2, #0]
  return result;
 8003fb2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003fb6:	6812      	ldr	r2, [r2, #0]
 8003fb8:	fab2 f282 	clz	r2, r2
 8003fbc:	b2d2      	uxtb	r2, r2
 8003fbe:	f042 0220 	orr.w	r2, r2, #32
 8003fc2:	b2d2      	uxtb	r2, r2
 8003fc4:	f002 021f 	and.w	r2, r2, #31
 8003fc8:	2101      	movs	r1, #1
 8003fca:	fa01 f202 	lsl.w	r2, r1, r2
 8003fce:	4013      	ands	r3, r2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d19e      	bne.n	8003f12 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fd4:	4b2a      	ldr	r3, [pc, #168]	; (8004080 <HAL_RCC_OscConfig+0xc44>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003fdc:	1d3b      	adds	r3, r7, #4
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003fe2:	1d3b      	adds	r3, r7, #4
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6a1b      	ldr	r3, [r3, #32]
 8003fe8:	430b      	orrs	r3, r1
 8003fea:	4925      	ldr	r1, [pc, #148]	; (8004080 <HAL_RCC_OscConfig+0xc44>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	604b      	str	r3, [r1, #4]
 8003ff0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003ff4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ff8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	fa93 f2a3 	rbit	r2, r3
 8004004:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004008:	601a      	str	r2, [r3, #0]
  return result;
 800400a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800400e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004010:	fab3 f383 	clz	r3, r3
 8004014:	b2db      	uxtb	r3, r3
 8004016:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800401a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	461a      	mov	r2, r3
 8004022:	2301      	movs	r3, #1
 8004024:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004026:	f7fd ff45 	bl	8001eb4 <HAL_GetTick>
 800402a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800402e:	e009      	b.n	8004044 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004030:	f7fd ff40 	bl	8001eb4 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d901      	bls.n	8004044 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e0fc      	b.n	800423e <HAL_RCC_OscConfig+0xe02>
 8004044:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004048:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800404c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	fa93 f2a3 	rbit	r2, r3
 8004058:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800405c:	601a      	str	r2, [r3, #0]
  return result;
 800405e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004062:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004064:	fab3 f383 	clz	r3, r3
 8004068:	b2db      	uxtb	r3, r3
 800406a:	095b      	lsrs	r3, r3, #5
 800406c:	b2db      	uxtb	r3, r3
 800406e:	f043 0301 	orr.w	r3, r3, #1
 8004072:	b2db      	uxtb	r3, r3
 8004074:	2b01      	cmp	r3, #1
 8004076:	d105      	bne.n	8004084 <HAL_RCC_OscConfig+0xc48>
 8004078:	4b01      	ldr	r3, [pc, #4]	; (8004080 <HAL_RCC_OscConfig+0xc44>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	e01e      	b.n	80040bc <HAL_RCC_OscConfig+0xc80>
 800407e:	bf00      	nop
 8004080:	40021000 	.word	0x40021000
 8004084:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004088:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800408c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800408e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	fa93 f2a3 	rbit	r2, r3
 8004098:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800409c:	601a      	str	r2, [r3, #0]
 800409e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80040a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	fa93 f2a3 	rbit	r2, r3
 80040b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	4b63      	ldr	r3, [pc, #396]	; (8004248 <HAL_RCC_OscConfig+0xe0c>)
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80040c0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80040c4:	6011      	str	r1, [r2, #0]
 80040c6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80040ca:	6812      	ldr	r2, [r2, #0]
 80040cc:	fa92 f1a2 	rbit	r1, r2
 80040d0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80040d4:	6011      	str	r1, [r2, #0]
  return result;
 80040d6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80040da:	6812      	ldr	r2, [r2, #0]
 80040dc:	fab2 f282 	clz	r2, r2
 80040e0:	b2d2      	uxtb	r2, r2
 80040e2:	f042 0220 	orr.w	r2, r2, #32
 80040e6:	b2d2      	uxtb	r2, r2
 80040e8:	f002 021f 	and.w	r2, r2, #31
 80040ec:	2101      	movs	r1, #1
 80040ee:	fa01 f202 	lsl.w	r2, r1, r2
 80040f2:	4013      	ands	r3, r2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d09b      	beq.n	8004030 <HAL_RCC_OscConfig+0xbf4>
 80040f8:	e0a0      	b.n	800423c <HAL_RCC_OscConfig+0xe00>
 80040fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004102:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004104:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	fa93 f2a3 	rbit	r2, r3
 800410e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004112:	601a      	str	r2, [r3, #0]
  return result;
 8004114:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004118:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800411a:	fab3 f383 	clz	r3, r3
 800411e:	b2db      	uxtb	r3, r3
 8004120:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004124:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	461a      	mov	r2, r3
 800412c:	2300      	movs	r3, #0
 800412e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004130:	f7fd fec0 	bl	8001eb4 <HAL_GetTick>
 8004134:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004138:	e009      	b.n	800414e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800413a:	f7fd febb 	bl	8001eb4 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e077      	b.n	800423e <HAL_RCC_OscConfig+0xe02>
 800414e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004152:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004156:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004158:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	fa93 f2a3 	rbit	r2, r3
 8004162:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004166:	601a      	str	r2, [r3, #0]
  return result;
 8004168:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800416c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800416e:	fab3 f383 	clz	r3, r3
 8004172:	b2db      	uxtb	r3, r3
 8004174:	095b      	lsrs	r3, r3, #5
 8004176:	b2db      	uxtb	r3, r3
 8004178:	f043 0301 	orr.w	r3, r3, #1
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b01      	cmp	r3, #1
 8004180:	d102      	bne.n	8004188 <HAL_RCC_OscConfig+0xd4c>
 8004182:	4b31      	ldr	r3, [pc, #196]	; (8004248 <HAL_RCC_OscConfig+0xe0c>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	e01b      	b.n	80041c0 <HAL_RCC_OscConfig+0xd84>
 8004188:	f107 0320 	add.w	r3, r7, #32
 800418c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004190:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004192:	f107 0320 	add.w	r3, r7, #32
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	fa93 f2a3 	rbit	r2, r3
 800419c:	f107 031c 	add.w	r3, r7, #28
 80041a0:	601a      	str	r2, [r3, #0]
 80041a2:	f107 0318 	add.w	r3, r7, #24
 80041a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	f107 0318 	add.w	r3, r7, #24
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	fa93 f2a3 	rbit	r2, r3
 80041b6:	f107 0314 	add.w	r3, r7, #20
 80041ba:	601a      	str	r2, [r3, #0]
 80041bc:	4b22      	ldr	r3, [pc, #136]	; (8004248 <HAL_RCC_OscConfig+0xe0c>)
 80041be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c0:	f107 0210 	add.w	r2, r7, #16
 80041c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80041c8:	6011      	str	r1, [r2, #0]
 80041ca:	f107 0210 	add.w	r2, r7, #16
 80041ce:	6812      	ldr	r2, [r2, #0]
 80041d0:	fa92 f1a2 	rbit	r1, r2
 80041d4:	f107 020c 	add.w	r2, r7, #12
 80041d8:	6011      	str	r1, [r2, #0]
  return result;
 80041da:	f107 020c 	add.w	r2, r7, #12
 80041de:	6812      	ldr	r2, [r2, #0]
 80041e0:	fab2 f282 	clz	r2, r2
 80041e4:	b2d2      	uxtb	r2, r2
 80041e6:	f042 0220 	orr.w	r2, r2, #32
 80041ea:	b2d2      	uxtb	r2, r2
 80041ec:	f002 021f 	and.w	r2, r2, #31
 80041f0:	2101      	movs	r1, #1
 80041f2:	fa01 f202 	lsl.w	r2, r1, r2
 80041f6:	4013      	ands	r3, r2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d19e      	bne.n	800413a <HAL_RCC_OscConfig+0xcfe>
 80041fc:	e01e      	b.n	800423c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041fe:	1d3b      	adds	r3, r7, #4
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	69db      	ldr	r3, [r3, #28]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d101      	bne.n	800420c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e018      	b.n	800423e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800420c:	4b0e      	ldr	r3, [pc, #56]	; (8004248 <HAL_RCC_OscConfig+0xe0c>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004214:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004218:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800421c:	1d3b      	adds	r3, r7, #4
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	429a      	cmp	r2, r3
 8004224:	d108      	bne.n	8004238 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004226:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800422a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800422e:	1d3b      	adds	r3, r7, #4
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004234:	429a      	cmp	r2, r3
 8004236:	d001      	beq.n	800423c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e000      	b.n	800423e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	40021000 	.word	0x40021000

0800424c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b09e      	sub	sp, #120	; 0x78
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004256:	2300      	movs	r3, #0
 8004258:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e162      	b.n	800452a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004264:	4b90      	ldr	r3, [pc, #576]	; (80044a8 <HAL_RCC_ClockConfig+0x25c>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	429a      	cmp	r2, r3
 8004270:	d910      	bls.n	8004294 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004272:	4b8d      	ldr	r3, [pc, #564]	; (80044a8 <HAL_RCC_ClockConfig+0x25c>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f023 0207 	bic.w	r2, r3, #7
 800427a:	498b      	ldr	r1, [pc, #556]	; (80044a8 <HAL_RCC_ClockConfig+0x25c>)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	4313      	orrs	r3, r2
 8004280:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004282:	4b89      	ldr	r3, [pc, #548]	; (80044a8 <HAL_RCC_ClockConfig+0x25c>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0307 	and.w	r3, r3, #7
 800428a:	683a      	ldr	r2, [r7, #0]
 800428c:	429a      	cmp	r2, r3
 800428e:	d001      	beq.n	8004294 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e14a      	b.n	800452a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	2b00      	cmp	r3, #0
 800429e:	d008      	beq.n	80042b2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042a0:	4b82      	ldr	r3, [pc, #520]	; (80044ac <HAL_RCC_ClockConfig+0x260>)
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	497f      	ldr	r1, [pc, #508]	; (80044ac <HAL_RCC_ClockConfig+0x260>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f000 80dc 	beq.w	8004478 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d13c      	bne.n	8004342 <HAL_RCC_ClockConfig+0xf6>
 80042c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042cc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042d0:	fa93 f3a3 	rbit	r3, r3
 80042d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80042d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042d8:	fab3 f383 	clz	r3, r3
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	095b      	lsrs	r3, r3, #5
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	f043 0301 	orr.w	r3, r3, #1
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d102      	bne.n	80042f2 <HAL_RCC_ClockConfig+0xa6>
 80042ec:	4b6f      	ldr	r3, [pc, #444]	; (80044ac <HAL_RCC_ClockConfig+0x260>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	e00f      	b.n	8004312 <HAL_RCC_ClockConfig+0xc6>
 80042f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042fa:	fa93 f3a3 	rbit	r3, r3
 80042fe:	667b      	str	r3, [r7, #100]	; 0x64
 8004300:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004304:	663b      	str	r3, [r7, #96]	; 0x60
 8004306:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004308:	fa93 f3a3 	rbit	r3, r3
 800430c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800430e:	4b67      	ldr	r3, [pc, #412]	; (80044ac <HAL_RCC_ClockConfig+0x260>)
 8004310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004312:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004316:	65ba      	str	r2, [r7, #88]	; 0x58
 8004318:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800431a:	fa92 f2a2 	rbit	r2, r2
 800431e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004320:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004322:	fab2 f282 	clz	r2, r2
 8004326:	b2d2      	uxtb	r2, r2
 8004328:	f042 0220 	orr.w	r2, r2, #32
 800432c:	b2d2      	uxtb	r2, r2
 800432e:	f002 021f 	and.w	r2, r2, #31
 8004332:	2101      	movs	r1, #1
 8004334:	fa01 f202 	lsl.w	r2, r1, r2
 8004338:	4013      	ands	r3, r2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d17b      	bne.n	8004436 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e0f3      	b.n	800452a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	2b02      	cmp	r3, #2
 8004348:	d13c      	bne.n	80043c4 <HAL_RCC_ClockConfig+0x178>
 800434a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800434e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004350:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004352:	fa93 f3a3 	rbit	r3, r3
 8004356:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800435a:	fab3 f383 	clz	r3, r3
 800435e:	b2db      	uxtb	r3, r3
 8004360:	095b      	lsrs	r3, r3, #5
 8004362:	b2db      	uxtb	r3, r3
 8004364:	f043 0301 	orr.w	r3, r3, #1
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b01      	cmp	r3, #1
 800436c:	d102      	bne.n	8004374 <HAL_RCC_ClockConfig+0x128>
 800436e:	4b4f      	ldr	r3, [pc, #316]	; (80044ac <HAL_RCC_ClockConfig+0x260>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	e00f      	b.n	8004394 <HAL_RCC_ClockConfig+0x148>
 8004374:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004378:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800437c:	fa93 f3a3 	rbit	r3, r3
 8004380:	647b      	str	r3, [r7, #68]	; 0x44
 8004382:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004386:	643b      	str	r3, [r7, #64]	; 0x40
 8004388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800438a:	fa93 f3a3 	rbit	r3, r3
 800438e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004390:	4b46      	ldr	r3, [pc, #280]	; (80044ac <HAL_RCC_ClockConfig+0x260>)
 8004392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004394:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004398:	63ba      	str	r2, [r7, #56]	; 0x38
 800439a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800439c:	fa92 f2a2 	rbit	r2, r2
 80043a0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80043a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043a4:	fab2 f282 	clz	r2, r2
 80043a8:	b2d2      	uxtb	r2, r2
 80043aa:	f042 0220 	orr.w	r2, r2, #32
 80043ae:	b2d2      	uxtb	r2, r2
 80043b0:	f002 021f 	and.w	r2, r2, #31
 80043b4:	2101      	movs	r1, #1
 80043b6:	fa01 f202 	lsl.w	r2, r1, r2
 80043ba:	4013      	ands	r3, r2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d13a      	bne.n	8004436 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e0b2      	b.n	800452a <HAL_RCC_ClockConfig+0x2de>
 80043c4:	2302      	movs	r3, #2
 80043c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ca:	fa93 f3a3 	rbit	r3, r3
 80043ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80043d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043d2:	fab3 f383 	clz	r3, r3
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	095b      	lsrs	r3, r3, #5
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	f043 0301 	orr.w	r3, r3, #1
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d102      	bne.n	80043ec <HAL_RCC_ClockConfig+0x1a0>
 80043e6:	4b31      	ldr	r3, [pc, #196]	; (80044ac <HAL_RCC_ClockConfig+0x260>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	e00d      	b.n	8004408 <HAL_RCC_ClockConfig+0x1bc>
 80043ec:	2302      	movs	r3, #2
 80043ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f2:	fa93 f3a3 	rbit	r3, r3
 80043f6:	627b      	str	r3, [r7, #36]	; 0x24
 80043f8:	2302      	movs	r3, #2
 80043fa:	623b      	str	r3, [r7, #32]
 80043fc:	6a3b      	ldr	r3, [r7, #32]
 80043fe:	fa93 f3a3 	rbit	r3, r3
 8004402:	61fb      	str	r3, [r7, #28]
 8004404:	4b29      	ldr	r3, [pc, #164]	; (80044ac <HAL_RCC_ClockConfig+0x260>)
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	2202      	movs	r2, #2
 800440a:	61ba      	str	r2, [r7, #24]
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	fa92 f2a2 	rbit	r2, r2
 8004412:	617a      	str	r2, [r7, #20]
  return result;
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	fab2 f282 	clz	r2, r2
 800441a:	b2d2      	uxtb	r2, r2
 800441c:	f042 0220 	orr.w	r2, r2, #32
 8004420:	b2d2      	uxtb	r2, r2
 8004422:	f002 021f 	and.w	r2, r2, #31
 8004426:	2101      	movs	r1, #1
 8004428:	fa01 f202 	lsl.w	r2, r1, r2
 800442c:	4013      	ands	r3, r2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e079      	b.n	800452a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004436:	4b1d      	ldr	r3, [pc, #116]	; (80044ac <HAL_RCC_ClockConfig+0x260>)
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f023 0203 	bic.w	r2, r3, #3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	491a      	ldr	r1, [pc, #104]	; (80044ac <HAL_RCC_ClockConfig+0x260>)
 8004444:	4313      	orrs	r3, r2
 8004446:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004448:	f7fd fd34 	bl	8001eb4 <HAL_GetTick>
 800444c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800444e:	e00a      	b.n	8004466 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004450:	f7fd fd30 	bl	8001eb4 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	f241 3288 	movw	r2, #5000	; 0x1388
 800445e:	4293      	cmp	r3, r2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e061      	b.n	800452a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004466:	4b11      	ldr	r3, [pc, #68]	; (80044ac <HAL_RCC_ClockConfig+0x260>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f003 020c 	and.w	r2, r3, #12
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	429a      	cmp	r2, r3
 8004476:	d1eb      	bne.n	8004450 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004478:	4b0b      	ldr	r3, [pc, #44]	; (80044a8 <HAL_RCC_ClockConfig+0x25c>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0307 	and.w	r3, r3, #7
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	429a      	cmp	r2, r3
 8004484:	d214      	bcs.n	80044b0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004486:	4b08      	ldr	r3, [pc, #32]	; (80044a8 <HAL_RCC_ClockConfig+0x25c>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f023 0207 	bic.w	r2, r3, #7
 800448e:	4906      	ldr	r1, [pc, #24]	; (80044a8 <HAL_RCC_ClockConfig+0x25c>)
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	4313      	orrs	r3, r2
 8004494:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004496:	4b04      	ldr	r3, [pc, #16]	; (80044a8 <HAL_RCC_ClockConfig+0x25c>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0307 	and.w	r3, r3, #7
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d005      	beq.n	80044b0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e040      	b.n	800452a <HAL_RCC_ClockConfig+0x2de>
 80044a8:	40022000 	.word	0x40022000
 80044ac:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0304 	and.w	r3, r3, #4
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d008      	beq.n	80044ce <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044bc:	4b1d      	ldr	r3, [pc, #116]	; (8004534 <HAL_RCC_ClockConfig+0x2e8>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	491a      	ldr	r1, [pc, #104]	; (8004534 <HAL_RCC_ClockConfig+0x2e8>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0308 	and.w	r3, r3, #8
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d009      	beq.n	80044ee <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044da:	4b16      	ldr	r3, [pc, #88]	; (8004534 <HAL_RCC_ClockConfig+0x2e8>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	00db      	lsls	r3, r3, #3
 80044e8:	4912      	ldr	r1, [pc, #72]	; (8004534 <HAL_RCC_ClockConfig+0x2e8>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80044ee:	f000 f829 	bl	8004544 <HAL_RCC_GetSysClockFreq>
 80044f2:	4601      	mov	r1, r0
 80044f4:	4b0f      	ldr	r3, [pc, #60]	; (8004534 <HAL_RCC_ClockConfig+0x2e8>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044fc:	22f0      	movs	r2, #240	; 0xf0
 80044fe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	fa92 f2a2 	rbit	r2, r2
 8004506:	60fa      	str	r2, [r7, #12]
  return result;
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	fab2 f282 	clz	r2, r2
 800450e:	b2d2      	uxtb	r2, r2
 8004510:	40d3      	lsrs	r3, r2
 8004512:	4a09      	ldr	r2, [pc, #36]	; (8004538 <HAL_RCC_ClockConfig+0x2ec>)
 8004514:	5cd3      	ldrb	r3, [r2, r3]
 8004516:	fa21 f303 	lsr.w	r3, r1, r3
 800451a:	4a08      	ldr	r2, [pc, #32]	; (800453c <HAL_RCC_ClockConfig+0x2f0>)
 800451c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800451e:	4b08      	ldr	r3, [pc, #32]	; (8004540 <HAL_RCC_ClockConfig+0x2f4>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4618      	mov	r0, r3
 8004524:	f7fd fc82 	bl	8001e2c <HAL_InitTick>
  
  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3778      	adds	r7, #120	; 0x78
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	40021000 	.word	0x40021000
 8004538:	08006b00 	.word	0x08006b00
 800453c:	20000004 	.word	0x20000004
 8004540:	20000008 	.word	0x20000008

08004544 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004544:	b480      	push	{r7}
 8004546:	b08b      	sub	sp, #44	; 0x2c
 8004548:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800454a:	2300      	movs	r3, #0
 800454c:	61fb      	str	r3, [r7, #28]
 800454e:	2300      	movs	r3, #0
 8004550:	61bb      	str	r3, [r7, #24]
 8004552:	2300      	movs	r3, #0
 8004554:	627b      	str	r3, [r7, #36]	; 0x24
 8004556:	2300      	movs	r3, #0
 8004558:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800455a:	2300      	movs	r3, #0
 800455c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800455e:	4b29      	ldr	r3, [pc, #164]	; (8004604 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	f003 030c 	and.w	r3, r3, #12
 800456a:	2b04      	cmp	r3, #4
 800456c:	d002      	beq.n	8004574 <HAL_RCC_GetSysClockFreq+0x30>
 800456e:	2b08      	cmp	r3, #8
 8004570:	d003      	beq.n	800457a <HAL_RCC_GetSysClockFreq+0x36>
 8004572:	e03c      	b.n	80045ee <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004574:	4b24      	ldr	r3, [pc, #144]	; (8004608 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004576:	623b      	str	r3, [r7, #32]
      break;
 8004578:	e03c      	b.n	80045f4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004580:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004584:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	fa92 f2a2 	rbit	r2, r2
 800458c:	607a      	str	r2, [r7, #4]
  return result;
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	fab2 f282 	clz	r2, r2
 8004594:	b2d2      	uxtb	r2, r2
 8004596:	40d3      	lsrs	r3, r2
 8004598:	4a1c      	ldr	r2, [pc, #112]	; (800460c <HAL_RCC_GetSysClockFreq+0xc8>)
 800459a:	5cd3      	ldrb	r3, [r2, r3]
 800459c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800459e:	4b19      	ldr	r3, [pc, #100]	; (8004604 <HAL_RCC_GetSysClockFreq+0xc0>)
 80045a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a2:	f003 030f 	and.w	r3, r3, #15
 80045a6:	220f      	movs	r2, #15
 80045a8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	fa92 f2a2 	rbit	r2, r2
 80045b0:	60fa      	str	r2, [r7, #12]
  return result;
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	fab2 f282 	clz	r2, r2
 80045b8:	b2d2      	uxtb	r2, r2
 80045ba:	40d3      	lsrs	r3, r2
 80045bc:	4a14      	ldr	r2, [pc, #80]	; (8004610 <HAL_RCC_GetSysClockFreq+0xcc>)
 80045be:	5cd3      	ldrb	r3, [r2, r3]
 80045c0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d008      	beq.n	80045de <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80045cc:	4a0e      	ldr	r2, [pc, #56]	; (8004608 <HAL_RCC_GetSysClockFreq+0xc4>)
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	fb02 f303 	mul.w	r3, r2, r3
 80045da:	627b      	str	r3, [r7, #36]	; 0x24
 80045dc:	e004      	b.n	80045e8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	4a0c      	ldr	r2, [pc, #48]	; (8004614 <HAL_RCC_GetSysClockFreq+0xd0>)
 80045e2:	fb02 f303 	mul.w	r3, r2, r3
 80045e6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	623b      	str	r3, [r7, #32]
      break;
 80045ec:	e002      	b.n	80045f4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80045ee:	4b0a      	ldr	r3, [pc, #40]	; (8004618 <HAL_RCC_GetSysClockFreq+0xd4>)
 80045f0:	623b      	str	r3, [r7, #32]
      break;
 80045f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045f4:	6a3b      	ldr	r3, [r7, #32]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	372c      	adds	r7, #44	; 0x2c
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	40021000 	.word	0x40021000
 8004608:	00f42400 	.word	0x00f42400
 800460c:	08006b18 	.word	0x08006b18
 8004610:	08006b28 	.word	0x08006b28
 8004614:	003d0900 	.word	0x003d0900
 8004618:	007a1200 	.word	0x007a1200

0800461c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004620:	4b03      	ldr	r3, [pc, #12]	; (8004630 <HAL_RCC_GetHCLKFreq+0x14>)
 8004622:	681b      	ldr	r3, [r3, #0]
}
 8004624:	4618      	mov	r0, r3
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	20000004 	.word	0x20000004

08004634 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800463a:	f7ff ffef 	bl	800461c <HAL_RCC_GetHCLKFreq>
 800463e:	4601      	mov	r1, r0
 8004640:	4b0b      	ldr	r3, [pc, #44]	; (8004670 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004648:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800464c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	fa92 f2a2 	rbit	r2, r2
 8004654:	603a      	str	r2, [r7, #0]
  return result;
 8004656:	683a      	ldr	r2, [r7, #0]
 8004658:	fab2 f282 	clz	r2, r2
 800465c:	b2d2      	uxtb	r2, r2
 800465e:	40d3      	lsrs	r3, r2
 8004660:	4a04      	ldr	r2, [pc, #16]	; (8004674 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004662:	5cd3      	ldrb	r3, [r2, r3]
 8004664:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004668:	4618      	mov	r0, r3
 800466a:	3708      	adds	r7, #8
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	40021000 	.word	0x40021000
 8004674:	08006b10 	.word	0x08006b10

08004678 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800467e:	f7ff ffcd 	bl	800461c <HAL_RCC_GetHCLKFreq>
 8004682:	4601      	mov	r1, r0
 8004684:	4b0b      	ldr	r3, [pc, #44]	; (80046b4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800468c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004690:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	fa92 f2a2 	rbit	r2, r2
 8004698:	603a      	str	r2, [r7, #0]
  return result;
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	fab2 f282 	clz	r2, r2
 80046a0:	b2d2      	uxtb	r2, r2
 80046a2:	40d3      	lsrs	r3, r2
 80046a4:	4a04      	ldr	r2, [pc, #16]	; (80046b8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80046a6:	5cd3      	ldrb	r3, [r2, r3]
 80046a8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80046ac:	4618      	mov	r0, r3
 80046ae:	3708      	adds	r7, #8
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	40021000 	.word	0x40021000
 80046b8:	08006b10 	.word	0x08006b10

080046bc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b092      	sub	sp, #72	; 0x48
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046c4:	2300      	movs	r3, #0
 80046c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80046cc:	2300      	movs	r3, #0
 80046ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 80d4 	beq.w	8004888 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046e0:	4b4e      	ldr	r3, [pc, #312]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046e2:	69db      	ldr	r3, [r3, #28]
 80046e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d10e      	bne.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046ec:	4b4b      	ldr	r3, [pc, #300]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ee:	69db      	ldr	r3, [r3, #28]
 80046f0:	4a4a      	ldr	r2, [pc, #296]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046f6:	61d3      	str	r3, [r2, #28]
 80046f8:	4b48      	ldr	r3, [pc, #288]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046fa:	69db      	ldr	r3, [r3, #28]
 80046fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004700:	60bb      	str	r3, [r7, #8]
 8004702:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004704:	2301      	movs	r3, #1
 8004706:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800470a:	4b45      	ldr	r3, [pc, #276]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004712:	2b00      	cmp	r3, #0
 8004714:	d118      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004716:	4b42      	ldr	r3, [pc, #264]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a41      	ldr	r2, [pc, #260]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800471c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004720:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004722:	f7fd fbc7 	bl	8001eb4 <HAL_GetTick>
 8004726:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004728:	e008      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800472a:	f7fd fbc3 	bl	8001eb4 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b64      	cmp	r3, #100	; 0x64
 8004736:	d901      	bls.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e12d      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800473c:	4b38      	ldr	r3, [pc, #224]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004744:	2b00      	cmp	r3, #0
 8004746:	d0f0      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004748:	4b34      	ldr	r3, [pc, #208]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004750:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004754:	2b00      	cmp	r3, #0
 8004756:	f000 8084 	beq.w	8004862 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004762:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004764:	429a      	cmp	r2, r3
 8004766:	d07c      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004768:	4b2c      	ldr	r3, [pc, #176]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004770:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004772:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004776:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477a:	fa93 f3a3 	rbit	r3, r3
 800477e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004782:	fab3 f383 	clz	r3, r3
 8004786:	b2db      	uxtb	r3, r3
 8004788:	461a      	mov	r2, r3
 800478a:	4b26      	ldr	r3, [pc, #152]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800478c:	4413      	add	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	461a      	mov	r2, r3
 8004792:	2301      	movs	r3, #1
 8004794:	6013      	str	r3, [r2, #0]
 8004796:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800479a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800479c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800479e:	fa93 f3a3 	rbit	r3, r3
 80047a2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80047a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047a6:	fab3 f383 	clz	r3, r3
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	461a      	mov	r2, r3
 80047ae:	4b1d      	ldr	r3, [pc, #116]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047b0:	4413      	add	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	461a      	mov	r2, r3
 80047b6:	2300      	movs	r3, #0
 80047b8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80047ba:	4a18      	ldr	r2, [pc, #96]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047be:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80047c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d04b      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ca:	f7fd fb73 	bl	8001eb4 <HAL_GetTick>
 80047ce:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047d0:	e00a      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047d2:	f7fd fb6f 	bl	8001eb4 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d901      	bls.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e0d7      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80047e8:	2302      	movs	r3, #2
 80047ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ee:	fa93 f3a3 	rbit	r3, r3
 80047f2:	627b      	str	r3, [r7, #36]	; 0x24
 80047f4:	2302      	movs	r3, #2
 80047f6:	623b      	str	r3, [r7, #32]
 80047f8:	6a3b      	ldr	r3, [r7, #32]
 80047fa:	fa93 f3a3 	rbit	r3, r3
 80047fe:	61fb      	str	r3, [r7, #28]
  return result;
 8004800:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004802:	fab3 f383 	clz	r3, r3
 8004806:	b2db      	uxtb	r3, r3
 8004808:	095b      	lsrs	r3, r3, #5
 800480a:	b2db      	uxtb	r3, r3
 800480c:	f043 0302 	orr.w	r3, r3, #2
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b02      	cmp	r3, #2
 8004814:	d108      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004816:	4b01      	ldr	r3, [pc, #4]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	e00d      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800481c:	40021000 	.word	0x40021000
 8004820:	40007000 	.word	0x40007000
 8004824:	10908100 	.word	0x10908100
 8004828:	2302      	movs	r3, #2
 800482a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	fa93 f3a3 	rbit	r3, r3
 8004832:	617b      	str	r3, [r7, #20]
 8004834:	4b5a      	ldr	r3, [pc, #360]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004838:	2202      	movs	r2, #2
 800483a:	613a      	str	r2, [r7, #16]
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	fa92 f2a2 	rbit	r2, r2
 8004842:	60fa      	str	r2, [r7, #12]
  return result;
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	fab2 f282 	clz	r2, r2
 800484a:	b2d2      	uxtb	r2, r2
 800484c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004850:	b2d2      	uxtb	r2, r2
 8004852:	f002 021f 	and.w	r2, r2, #31
 8004856:	2101      	movs	r1, #1
 8004858:	fa01 f202 	lsl.w	r2, r1, r2
 800485c:	4013      	ands	r3, r2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d0b7      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004862:	4b4f      	ldr	r3, [pc, #316]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	494c      	ldr	r1, [pc, #304]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004870:	4313      	orrs	r3, r2
 8004872:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004874:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004878:	2b01      	cmp	r3, #1
 800487a:	d105      	bne.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800487c:	4b48      	ldr	r3, [pc, #288]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800487e:	69db      	ldr	r3, [r3, #28]
 8004880:	4a47      	ldr	r2, [pc, #284]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004882:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004886:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	2b00      	cmp	r3, #0
 8004892:	d008      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004894:	4b42      	ldr	r3, [pc, #264]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004898:	f023 0203 	bic.w	r2, r3, #3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	493f      	ldr	r1, [pc, #252]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d008      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048b2:	4b3b      	ldr	r3, [pc, #236]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80048b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	4938      	ldr	r1, [pc, #224]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0304 	and.w	r3, r3, #4
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d008      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048d0:	4b33      	ldr	r3, [pc, #204]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80048d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	4930      	ldr	r1, [pc, #192]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0320 	and.w	r3, r3, #32
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d008      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048ee:	4b2c      	ldr	r3, [pc, #176]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80048f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f2:	f023 0210 	bic.w	r2, r3, #16
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	4929      	ldr	r1, [pc, #164]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d008      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800490c:	4b24      	ldr	r3, [pc, #144]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004918:	4921      	ldr	r1, [pc, #132]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800491a:	4313      	orrs	r3, r2
 800491c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004926:	2b00      	cmp	r3, #0
 8004928:	d008      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800492a:	4b1d      	ldr	r3, [pc, #116]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800492c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492e:	f023 0220 	bic.w	r2, r3, #32
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	491a      	ldr	r1, [pc, #104]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004938:	4313      	orrs	r3, r2
 800493a:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004944:	2b00      	cmp	r3, #0
 8004946:	d008      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8004948:	4b15      	ldr	r3, [pc, #84]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	69db      	ldr	r3, [r3, #28]
 8004954:	4912      	ldr	r1, [pc, #72]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004956:	4313      	orrs	r3, r2
 8004958:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004962:	2b00      	cmp	r3, #0
 8004964:	d008      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 8004966:	4b0e      	ldr	r3, [pc, #56]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	490b      	ldr	r1, [pc, #44]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004974:	4313      	orrs	r3, r2
 8004976:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004980:	2b00      	cmp	r3, #0
 8004982:	d008      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004984:	4b06      	ldr	r3, [pc, #24]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004988:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004990:	4903      	ldr	r1, [pc, #12]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004992:	4313      	orrs	r3, r2
 8004994:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3748      	adds	r7, #72	; 0x48
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	40021000 	.word	0x40021000

080049a4 <HAL_SDADC_Init>:
  *         the common reference voltage.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_SDADC_Init(SDADC_HandleTypeDef* hsdadc)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  /* Check SDADC handle */
  if(hsdadc == NULL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <HAL_SDADC_Init+0x12>
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e073      	b.n	8004a9e <HAL_SDADC_Init+0xfa>
  assert_param(IS_SDADC_FAST_CONV_MODE(hsdadc->Init.FastConversionMode));
  assert_param(IS_SDADC_SLOW_CLOCK_MODE(hsdadc->Init.SlowClockMode));
  assert_param(IS_SDADC_VREF(hsdadc->Init.ReferenceVoltage));
  
  /* Initialize SDADC variables with default values */
  hsdadc->RegularContMode     = SDADC_CONTINUOUS_CONV_OFF;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	619a      	str	r2, [r3, #24]
  hsdadc->InjectedContMode    = SDADC_CONTINUOUS_CONV_OFF;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	61da      	str	r2, [r3, #28]
  hsdadc->InjectedChannelsNbr = 1U;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	621a      	str	r2, [r3, #32]
  hsdadc->InjConvRemaining    = 1U;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	625a      	str	r2, [r3, #36]	; 0x24
  hsdadc->RegularTrigger      = SDADC_SOFTWARE_TRIGGER;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	629a      	str	r2, [r3, #40]	; 0x28
  hsdadc->InjectedTrigger     = SDADC_SOFTWARE_TRIGGER;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsdadc->ExtTriggerEdge      = SDADC_EXT_TRIG_RISING_EDGE;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80049e0:	631a      	str	r2, [r3, #48]	; 0x30
  hsdadc->RegularMultimode    = SDADC_MULTIMODE_SDADC1_SDADC2;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	635a      	str	r2, [r3, #52]	; 0x34
  hsdadc->InjectedMultimode   = SDADC_MULTIMODE_SDADC1_SDADC2;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	639a      	str	r2, [r3, #56]	; 0x38
  hsdadc->ErrorCode           = SDADC_ERROR_NONE;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Init the low level hardware */
  hsdadc->MspInitCallback(hsdadc);
#else
  /* Init the low level hardware */
  HAL_SDADC_MspInit(hsdadc);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f7fc ff0f 	bl	8001818 <HAL_SDADC_MspInit>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */
  
  /* Set idle low power and slow clock modes */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_SBI|SDADC_CR1_PDI|SDADC_CR1_SLOWCK);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8004a08:	601a      	str	r2, [r3, #0]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	6819      	ldr	r1, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685a      	ldr	r2, [r3, #4]
                            hsdadc->Init.SlowClockMode);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68db      	ldr	r3, [r3, #12]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 8004a18:	431a      	orrs	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	601a      	str	r2, [r3, #0]

  /* Set fast conversion mode */
  hsdadc->Instance->CR2 &= ~(SDADC_CR2_FAST);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004a30:	605a      	str	r2, [r3, #4]
  hsdadc->Instance->CR2 |= hsdadc->Init.FastConversionMode;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	6859      	ldr	r1, [r3, #4]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689a      	ldr	r2, [r3, #8]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	430a      	orrs	r2, r1
 8004a42:	605a      	str	r2, [r3, #4]

  /* Set reference voltage common to all SDADC instances */
  /* Update this parameter only if needed to avoid unnecessary settling time */
  if((SDADC1->CR1 & SDADC_CR1_REFV) != hsdadc->Init.ReferenceVoltage)
 8004a44:	4b18      	ldr	r3, [pc, #96]	; (8004aa8 <HAL_SDADC_Init+0x104>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d00f      	beq.n	8004a74 <HAL_SDADC_Init+0xd0>
  {
    /* Voltage reference bits are common to all SADC instances but are        */
    /* present in SDADC1 register.                                            */
    SDADC1->CR1 &= ~(SDADC_CR1_REFV);
 8004a54:	4b14      	ldr	r3, [pc, #80]	; (8004aa8 <HAL_SDADC_Init+0x104>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a13      	ldr	r2, [pc, #76]	; (8004aa8 <HAL_SDADC_Init+0x104>)
 8004a5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a5e:	6013      	str	r3, [r2, #0]
    SDADC1->CR1 |= hsdadc->Init.ReferenceVoltage;
 8004a60:	4b11      	ldr	r3, [pc, #68]	; (8004aa8 <HAL_SDADC_Init+0x104>)
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	490f      	ldr	r1, [pc, #60]	; (8004aa8 <HAL_SDADC_Init+0x104>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	600b      	str	r3, [r1, #0]
    
    /* Wait at least 2ms before setting ADON */
    HAL_Delay(2U);
 8004a6e:	2002      	movs	r0, #2
 8004a70:	f7fd fa2c 	bl	8001ecc <HAL_Delay>
  }
  
  /* Enable SDADC */
  hsdadc->Instance->CR2 |= SDADC_CR2_ADON;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f042 0201 	orr.w	r2, r2, #1
 8004a82:	605a      	str	r2, [r3, #4]

  /* Wait end of stabilization */
  while((hsdadc->Instance->ISR & SDADC_ISR_STABIP) != 0UL)
 8004a84:	bf00      	nop
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1f8      	bne.n	8004a86 <HAL_SDADC_Init+0xe2>
  {
  }
  
  /* Set SDADC to ready state */
  hsdadc->State = HAL_SDADC_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return HAL status */
  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3708      	adds	r7, #8
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	40016000 	.word	0x40016000

08004aac <HAL_SDADC_PrepareChannelConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_PrepareChannelConfig(SDADC_HandleTypeDef *hsdadc, 
                                                 uint32_t ConfIndex,
                                                 SDADC_ConfParamTypeDef* ConfParamStruct)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_GAIN(ConfParamStruct->Gain));
  assert_param(IS_SDADC_COMMON_MODE(ConfParamStruct->CommonMode));
  assert_param(IS_SDADC_OFFSET_VALUE(ConfParamStruct->Offset));

  /* Check SDADC state is ready */
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d002      	beq.n	8004acc <HAL_SDADC_PrepareChannelConfig+0x20>
  {
    status = HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	75fb      	strb	r3, [r7, #23]
 8004aca:	e025      	b.n	8004b18 <HAL_SDADC_PrepareChannelConfig+0x6c>
  }
  else
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f000 fb12 	bl	80050f6 <SDADC_EnterInitMode>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d006      	beq.n	8004ae6 <HAL_SDADC_PrepareChannelConfig+0x3a>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	22ff      	movs	r2, #255	; 0xff
 8004adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	75fb      	strb	r3, [r7, #23]
 8004ae4:	e018      	b.n	8004b18 <HAL_SDADC_PrepareChannelConfig+0x6c>
    }
    else
    {
      /* Program configuration register with parameters */
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	461a      	mov	r2, r3
                       SDADC_CONFREG_OFFSET + \
                       (uint32_t)(ConfIndex << 2UL));
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	009b      	lsls	r3, r3, #2
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 8004af0:	4413      	add	r3, r2
 8004af2:	3320      	adds	r3, #32
 8004af4:	613b      	str	r3, [r7, #16]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681a      	ldr	r2, [r3, #0]
                                             ConfParamStruct->Gain | \
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8004afe:	431a      	orrs	r2, r3
                                             ConfParamStruct->CommonMode | \
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
                                             ConfParamStruct->Gain | \
 8004b04:	ea42 0103 	orr.w	r1, r2, r3
                                             ConfParamStruct->Offset);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	68da      	ldr	r2, [r3, #12]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8004b0c:	693b      	ldr	r3, [r7, #16]
                                             ConfParamStruct->CommonMode | \
 8004b0e:	430a      	orrs	r2, r1
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8004b10:	601a      	str	r2, [r3, #0]
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	f000 fb12 	bl	800513c <SDADC_ExitInitMode>
    }
  }
  /* Return function status */
  return status;
 8004b18:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3718      	adds	r7, #24
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
	...

08004b24 <HAL_SDADC_AssociateChannelConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_AssociateChannelConfig(SDADC_HandleTypeDef *hsdadc,
                                                   uint32_t Channel,
                                                   uint32_t ConfIndex)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b30:	2300      	movs	r3, #0
 8004b32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_REGULAR_CHANNEL(Channel));
  assert_param(IS_SDADC_CONF_INDEX(ConfIndex));

  /* Check SDADC state is ready */
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d002      	beq.n	8004b44 <HAL_SDADC_AssociateChannelConfig+0x20>
  {
    status = HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	75fb      	strb	r3, [r7, #23]
 8004b42:	e037      	b.n	8004bb4 <HAL_SDADC_AssociateChannelConfig+0x90>
  }
  else
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f000 fad6 	bl	80050f6 <SDADC_EnterInitMode>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d006      	beq.n	8004b5e <HAL_SDADC_AssociateChannelConfig+0x3a>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	22ff      	movs	r2, #255	; 0xff
 8004b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	75fb      	strb	r3, [r7, #23]
 8004b5c:	e02a      	b.n	8004bb4 <HAL_SDADC_AssociateChannelConfig+0x90>
    }
    else
    {
      /* Program channel configuration register according parameters */
      if(Channel != SDADC_CHANNEL_8)
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	4a17      	ldr	r2, [pc, #92]	; (8004bc0 <HAL_SDADC_AssociateChannelConfig+0x9c>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d01f      	beq.n	8004ba6 <HAL_SDADC_AssociateChannelConfig+0x82>
      {
        /* Get channel number */
        channelnum = (uint32_t)(Channel>>16UL);
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	0c1b      	lsrs	r3, r3, #16
 8004b6a:	613b      	str	r3, [r7, #16]

        /* Set the channel configuration */
        hsdadc->Instance->CONFCHR1 &= (uint32_t) ~((uint32_t)SDADC_CONFCHR1_CONFCH0 << ((channelnum << 2UL) & 0x1FUL));
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	f003 031f 	and.w	r3, r3, #31
 8004b7a:	2203      	movs	r2, #3
 8004b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b80:	43da      	mvns	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	400a      	ands	r2, r1
 8004b88:	641a      	str	r2, [r3, #64]	; 0x40
        hsdadc->Instance->CONFCHR1 |= (uint32_t) (ConfIndex << ((channelnum << 2UL) & 0x1FUL));
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	f003 031f 	and.w	r3, r3, #31
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	409a      	lsls	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	641a      	str	r2, [r3, #64]	; 0x40
 8004ba4:	e003      	b.n	8004bae <HAL_SDADC_AssociateChannelConfig+0x8a>
      }
      else
      {
        hsdadc->Instance->CONFCHR2 = (uint32_t) (ConfIndex);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	645a      	str	r2, [r3, #68]	; 0x44
      }      
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	f000 fac4 	bl	800513c <SDADC_ExitInitMode>
    }
  }
  /* Return function status */
  return status;
 8004bb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3718      	adds	r7, #24
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	00080100 	.word	0x00080100

08004bc4 <HAL_SDADC_InjectedConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_InjectedConfigChannel(SDADC_HandleTypeDef *hsdadc,
                                                  uint32_t Channel,
                                                  uint32_t ContinuousMode)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b086      	sub	sp, #24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_INJECTED_CHANNEL(Channel));
  assert_param(IS_SDADC_CONTINUOUS_MODE(ContinuousMode));
  
  /* Check SDADC state */
  if((hsdadc->State != HAL_SDADC_STATE_RESET) && (hsdadc->State != HAL_SDADC_STATE_ERROR))
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d027      	beq.n	8004c2e <HAL_SDADC_InjectedConfigChannel+0x6a>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004be4:	2bff      	cmp	r3, #255	; 0xff
 8004be6:	d022      	beq.n	8004c2e <HAL_SDADC_InjectedConfigChannel+0x6a>
  {
    /* Set JCHG[8:0] bits in SDADC_JCHG */
    hsdadc->Instance->JCHGR = (uint32_t) (Channel & SDADC_LSB_MASK);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	b292      	uxth	r2, r2
 8004bf0:	615a      	str	r2, [r3, #20]
    /* Set or clear JCONT bit in SDADC_CR2 */
    if(ContinuousMode == SDADC_CONTINUOUS_CONV_ON)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d108      	bne.n	8004c0a <HAL_SDADC_InjectedConfigChannel+0x46>
    {
      hsdadc->Instance->CR2 |= SDADC_CR2_JCONT;    
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685a      	ldr	r2, [r3, #4]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f042 0220 	orr.w	r2, r2, #32
 8004c06:	605a      	str	r2, [r3, #4]
 8004c08:	e007      	b.n	8004c1a <HAL_SDADC_InjectedConfigChannel+0x56>
    }
    else
    {
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_JCONT);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 0220 	bic.w	r2, r2, #32
 8004c18:	605a      	str	r2, [r3, #4]
    }
    /* Store continuous mode information */
    hsdadc->InjectedContMode = ContinuousMode;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	61da      	str	r2, [r3, #28]
    /* Store number of injected channels */
    hsdadc->InjectedChannelsNbr = SDADC_GetInjChannelsNbr(Channel);
 8004c20:	68b8      	ldr	r0, [r7, #8]
 8004c22:	f000 fa9d 	bl	8005160 <SDADC_GetInjChannelsNbr>
 8004c26:	4602      	mov	r2, r0
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	621a      	str	r2, [r3, #32]
 8004c2c:	e001      	b.n	8004c32 <HAL_SDADC_InjectedConfigChannel+0x6e>
  }
  else
  {
    status = HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8004c32:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3718      	adds	r7, #24
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <HAL_SDADC_SelectInjectedTrigger>:
  *            @arg SDADC_SYNCHRONOUS_TRIGGER : Synchronous with SDADC1 (only for SDADC2 and SDADC3).
  *            @arg SDADC_EXTERNAL_TRIGGER : External trigger.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_SelectInjectedTrigger(SDADC_HandleTypeDef *hsdadc, uint32_t Trigger)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c46:	2300      	movs	r3, #0
 8004c48:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_INJECTED_TRIGGER(Trigger));

  /* Check parameters compatibility */
  if((hsdadc->Instance == SDADC1) && (Trigger == SDADC_SYNCHRONOUS_TRIGGER))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a12      	ldr	r2, [pc, #72]	; (8004c98 <HAL_SDADC_SelectInjectedTrigger+0x5c>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d105      	bne.n	8004c60 <HAL_SDADC_SelectInjectedTrigger+0x24>
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d102      	bne.n	8004c60 <HAL_SDADC_SelectInjectedTrigger+0x24>
  {
    status = HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	73fb      	strb	r3, [r7, #15]
 8004c5e:	e014      	b.n	8004c8a <HAL_SDADC_SelectInjectedTrigger+0x4e>
  }
  /* Check SDADC state */
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d009      	beq.n	8004c7e <HAL_SDADC_SelectInjectedTrigger+0x42>
          (hsdadc->State == HAL_SDADC_STATE_CALIB) || \
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d004      	beq.n	8004c7e <HAL_SDADC_SelectInjectedTrigger+0x42>
          (hsdadc->State == HAL_SDADC_STATE_REG))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
          (hsdadc->State == HAL_SDADC_STATE_CALIB) || \
 8004c7a:	2b03      	cmp	r3, #3
 8004c7c:	d103      	bne.n	8004c86 <HAL_SDADC_SelectInjectedTrigger+0x4a>
  {
    /* Store regular trigger information */
    hsdadc->InjectedTrigger = Trigger;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	683a      	ldr	r2, [r7, #0]
 8004c82:	62da      	str	r2, [r3, #44]	; 0x2c
 8004c84:	e001      	b.n	8004c8a <HAL_SDADC_SelectInjectedTrigger+0x4e>
  }
  else
  {
    status = HAL_ERROR;    
 8004c86:	2301      	movs	r3, #1
 8004c88:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8004c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3714      	adds	r7, #20
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr
 8004c98:	40016000 	.word	0x40016000

08004c9c <HAL_SDADC_SelectInjectedDelay>:
  *         This parameter can be a value of @ref SDADC_InjectedDelay.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_SelectInjectedDelay(SDADC_HandleTypeDef *hsdadc,
                                                uint32_t InjectedDelay)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_INJECTED_DELAY(InjectedDelay));

  /* Check SDADC state */
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d120      	bne.n	8004cf6 <HAL_SDADC_SelectInjectedDelay+0x5a>
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 fa1e 	bl	80050f6 <SDADC_EnterInitMode>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d006      	beq.n	8004cce <HAL_SDADC_SelectInjectedDelay+0x32>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	22ff      	movs	r2, #255	; 0xff
 8004cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	73fb      	strb	r3, [r7, #15]
 8004ccc:	e015      	b.n	8004cfa <HAL_SDADC_SelectInjectedDelay+0x5e>
    }
    else
    {
      /* Set JDS bit in SDADC_CR2 register */
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_JDS);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cdc:	605a      	str	r2, [r3, #4]
      hsdadc->Instance->CR2 |= InjectedDelay;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	6859      	ldr	r1, [r3, #4]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	683a      	ldr	r2, [r7, #0]
 8004cea:	430a      	orrs	r2, r1
 8004cec:	605a      	str	r2, [r3, #4]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 fa24 	bl	800513c <SDADC_ExitInitMode>
 8004cf4:	e001      	b.n	8004cfa <HAL_SDADC_SelectInjectedDelay+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8004cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3710      	adds	r7, #16
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <HAL_SDADC_InjectedMultiModeConfigChannel>:
  *         This parameter can be a value of @ref SDADC_MultimodeType.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_InjectedMultiModeConfigChannel(SDADC_HandleTypeDef* hsdadc,
                                                           uint32_t MultimodeType)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_MULTIMODE_TYPE(MultimodeType));

  /* Check instance is SDADC1 */
  if(hsdadc->Instance != SDADC1)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a11      	ldr	r2, [pc, #68]	; (8004d5c <HAL_SDADC_InjectedMultiModeConfigChannel+0x58>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d002      	beq.n	8004d22 <HAL_SDADC_InjectedMultiModeConfigChannel+0x1e>
  {
    status = HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	73fb      	strb	r3, [r7, #15]
 8004d20:	e014      	b.n	8004d4c <HAL_SDADC_InjectedMultiModeConfigChannel+0x48>
  }
  /* Check SDADC state */
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d009      	beq.n	8004d40 <HAL_SDADC_InjectedMultiModeConfigChannel+0x3c>
          (hsdadc->State == HAL_SDADC_STATE_CALIB) || \
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d004      	beq.n	8004d40 <HAL_SDADC_InjectedMultiModeConfigChannel+0x3c>
          (hsdadc->State == HAL_SDADC_STATE_REG))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
          (hsdadc->State == HAL_SDADC_STATE_CALIB) || \
 8004d3c:	2b03      	cmp	r3, #3
 8004d3e:	d103      	bne.n	8004d48 <HAL_SDADC_InjectedMultiModeConfigChannel+0x44>
  {
    /* Store regular trigger information */
    hsdadc->InjectedMultimode = MultimodeType;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	639a      	str	r2, [r3, #56]	; 0x38
 8004d46:	e001      	b.n	8004d4c <HAL_SDADC_InjectedMultiModeConfigChannel+0x48>
  }
  else
  {
    status = HAL_ERROR;    
 8004d48:	2301      	movs	r3, #1
 8004d4a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8004d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	40016000 	.word	0x40016000

08004d60 <HAL_SDADC_CalibrationStart>:
  *         This parameter can be a value of @ref SDADC_CalibrationSequence.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_CalibrationStart(SDADC_HandleTypeDef *hsdadc,
                                             uint32_t CalibrationSequence)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_CALIB_SEQUENCE(CalibrationSequence));

  /* Check SDADC state */
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d12c      	bne.n	8004dd2 <HAL_SDADC_CalibrationStart+0x72>
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 f9bc 	bl	80050f6 <SDADC_EnterInitMode>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d006      	beq.n	8004d92 <HAL_SDADC_CalibrationStart+0x32>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	22ff      	movs	r2, #255	; 0xff
 8004d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	73fb      	strb	r3, [r7, #15]
 8004d90:	e021      	b.n	8004dd6 <HAL_SDADC_CalibrationStart+0x76>
    }
    else
    {
      /* Set CALIBCNT[1:0] bits in SDADC_CR2 register */
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_CALIBCNT);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f022 0206 	bic.w	r2, r2, #6
 8004da0:	605a      	str	r2, [r3, #4]
      hsdadc->Instance->CR2 |= CalibrationSequence;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	6859      	ldr	r1, [r3, #4]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	605a      	str	r2, [r3, #4]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 f9c2 	bl	800513c <SDADC_ExitInitMode>

      /* Set STARTCALIB in SDADC_CR2 */
      hsdadc->Instance->CR2 |= SDADC_CR2_STARTCALIB;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f042 0210 	orr.w	r2, r2, #16
 8004dc6:	605a      	str	r2, [r3, #4]

      /* Set SDADC in calibration state */
      hsdadc->State = HAL_SDADC_STATE_CALIB;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004dd0:	e001      	b.n	8004dd6 <HAL_SDADC_CalibrationStart+0x76>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8004dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <HAL_SDADC_PollForCalibEvent>:
  * @param  hsdadc SDADC handle.
  * @param  Timeout Timeout value in milliseconds.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_PollForCalibEvent(SDADC_HandleTypeDef* hsdadc, uint32_t Timeout)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if(hsdadc->State != HAL_SDADC_STATE_CALIB)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d001      	beq.n	8004df8 <HAL_SDADC_PollForCalibEvent+0x18>
  {
    /* Return error status */
    return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e028      	b.n	8004e4a <HAL_SDADC_PollForCalibEvent+0x6a>
  }
  else
  {
    /* Get timeout */
    tickstart = HAL_GetTick();  
 8004df8:	f7fd f85c 	bl	8001eb4 <HAL_GetTick>
 8004dfc:	60f8      	str	r0, [r7, #12]

    /* Wait EOCALF bit in SDADC_ISR register */
    while((hsdadc->Instance->ISR & SDADC_ISR_EOCALF) != SDADC_ISR_EOCALF)
 8004dfe:	e010      	b.n	8004e22 <HAL_SDADC_PollForCalibEvent+0x42>
    {
      /* Check the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e06:	d00c      	beq.n	8004e22 <HAL_SDADC_PollForCalibEvent+0x42>
      {
        if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0UL))
 8004e08:	f7fd f854 	bl	8001eb4 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d302      	bcc.n	8004e1e <HAL_SDADC_PollForCalibEvent+0x3e>
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_SDADC_PollForCalibEvent+0x42>
        {
          /* Return timeout status */
          return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e013      	b.n	8004e4a <HAL_SDADC_PollForCalibEvent+0x6a>
    while((hsdadc->Instance->ISR & SDADC_ISR_EOCALF) != SDADC_ISR_EOCALF)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f003 0301 	and.w	r3, r3, #1
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d1e7      	bne.n	8004e00 <HAL_SDADC_PollForCalibEvent+0x20>
        }
      }
    }
    /* Set CLREOCALF bit in SDADC_CLRISR register */
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLREOCALF;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f042 0201 	orr.w	r2, r2, #1
 8004e3e:	60da      	str	r2, [r3, #12]

    /* Set SDADC in ready state */
    hsdadc->State = HAL_SDADC_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return function status */
    return HAL_OK;
 8004e48:	2300      	movs	r3, #0
  }
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <HAL_SDADC_Start_IT>:
  *         or if injected conversion is ongoing.
  * @param  hsdadc SDADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_Start_IT(SDADC_HandleTypeDef *hsdadc)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b084      	sub	sp, #16
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d004      	beq.n	8004e6e <HAL_SDADC_Start_IT+0x1c>
     (hsdadc->State == HAL_SDADC_STATE_INJ))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8004e6a:	2b04      	cmp	r3, #4
 8004e6c:	d10d      	bne.n	8004e8a <HAL_SDADC_Start_IT+0x38>
  {
    /* Set REOCIE and ROVRIE bits in SDADC_CR1 register */
    hsdadc->Instance->CR1 |= (uint32_t) (SDADC_CR1_REOCIE | SDADC_CR1_ROVRIE);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f042 0218 	orr.w	r2, r2, #24
 8004e7c:	601a      	str	r2, [r3, #0]

    /* Start regular conversion */
    status = SDADC_RegConvStart(hsdadc);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f992 	bl	80051a8 <SDADC_RegConvStart>
 8004e84:	4603      	mov	r3, r0
 8004e86:	73fb      	strb	r3, [r7, #15]
 8004e88:	e001      	b.n	8004e8e <HAL_SDADC_Start_IT+0x3c>
  }
  else
  {
    status = HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8004e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <HAL_SDADC_InjectedStart_IT>:
  *         or if regular conversion is ongoing.
  * @param  hsdadc SDADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_InjectedStart_IT(SDADC_HandleTypeDef *hsdadc)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d004      	beq.n	8004eb4 <HAL_SDADC_InjectedStart_IT+0x1c>
     (hsdadc->State == HAL_SDADC_STATE_REG))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8004eb0:	2b03      	cmp	r3, #3
 8004eb2:	d10d      	bne.n	8004ed0 <HAL_SDADC_InjectedStart_IT+0x38>
  {
    /* Set JEOCIE and JOVRIE bits in SDADC_CR1 register */
    hsdadc->Instance->CR1 |= (uint32_t) (SDADC_CR1_JEOCIE | SDADC_CR1_JOVRIE);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f042 0206 	orr.w	r2, r2, #6
 8004ec2:	601a      	str	r2, [r3, #0]

    /* Start injected conversion */
    status = SDADC_InjConvStart(hsdadc);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 f9ad 	bl	8005224 <SDADC_InjConvStart>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	73fb      	strb	r3, [r7, #15]
 8004ece:	e001      	b.n	8004ed4 <HAL_SDADC_InjectedStart_IT+0x3c>
  }
  else
  {
    status = HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8004ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <HAL_SDADC_InjectedGetValue>:
  * @param  hsdadc SDADC handle.
  * @param  Channel Corresponding channel of injected conversion.
  * @retval Injected conversion value
  */
uint32_t HAL_SDADC_InjectedGetValue(SDADC_HandleTypeDef *hsdadc, uint32_t* Channel)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b085      	sub	sp, #20
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
 8004ee6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(Channel != ((void*) 0));

  /* Read SDADC_JDATAR register and extract channel and conversion value */
  value = hsdadc->Instance->JDATAR;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eee:	60fb      	str	r3, [r7, #12]
  *Channel = ((value & SDADC_JDATAR_JDATACH) >> SDADC_JDATAR_CH_OFFSET);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	0e1b      	lsrs	r3, r3, #24
 8004ef4:	f003 020f 	and.w	r2, r3, #15
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	601a      	str	r2, [r3, #0]
  value &= SDADC_JDATAR_JDATA;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	60fb      	str	r3, [r7, #12]
  
  /* Return injected conversion value */
  return value;
 8004f02:	68fb      	ldr	r3, [r7, #12]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3714      	adds	r7, #20
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <HAL_SDADC_IRQHandler>:
  * @brief  This function handles the SDADC interrupts.
  * @param  hsdadc SDADC handle.
  * @retval None
  */
void HAL_SDADC_IRQHandler(SDADC_HandleTypeDef* hsdadc)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hsdadc->Instance->ISR;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	60fb      	str	r3, [r7, #12]
    
  /* Check if end of regular conversion */
  if(((hsdadc->Instance->CR1 & SDADC_CR1_REOCIE) == SDADC_CR1_REOCIE) &&
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0308 	and.w	r3, r3, #8
 8004f2a:	2b08      	cmp	r3, #8
 8004f2c:	d125      	bne.n	8004f7a <HAL_SDADC_IRQHandler+0x6a>
     ((tmp_isr & SDADC_ISR_REOCF) == SDADC_ISR_REOCF))
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f003 0308 	and.w	r3, r3, #8
  if(((hsdadc->Instance->CR1 & SDADC_CR1_REOCIE) == SDADC_CR1_REOCIE) &&
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d020      	beq.n	8004f7a <HAL_SDADC_IRQHandler+0x6a>
  {
    /* Call regular conversion complete callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
    hsdadc->ConvCpltCallback(hsdadc);
#else
    HAL_SDADC_ConvCpltCallback(hsdadc);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 f8c8 	bl	80050ce <HAL_SDADC_ConvCpltCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

    /* End of conversion if mode is not continuous and software trigger */
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f040 80b1 	bne.w	80050aa <HAL_SDADC_IRQHandler+0x19a>
       (hsdadc->RegularTrigger == SDADC_SOFTWARE_TRIGGER))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f040 80ac 	bne.w	80050aa <HAL_SDADC_IRQHandler+0x19a>
    {
      /* Clear REOCIE and ROVRIE bits in SDADC_CR1 register */
      hsdadc->Instance->CR1 &= ~(SDADC_CR1_REOCIE | SDADC_CR1_ROVRIE);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f022 0218 	bic.w	r2, r2, #24
 8004f60:	601a      	str	r2, [r3, #0]

      /* Update SDADC state */
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                      HAL_SDADC_STATE_READY : HAL_SDADC_STATE_INJ;
 8004f68:	2b03      	cmp	r3, #3
 8004f6a:	d101      	bne.n	8004f70 <HAL_SDADC_IRQHandler+0x60>
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	e000      	b.n	8004f72 <HAL_SDADC_IRQHandler+0x62>
 8004f70:	2204      	movs	r2, #4
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8004f78:	e097      	b.n	80050aa <HAL_SDADC_IRQHandler+0x19a>
    }
  }
  /* Check if end of injected conversion */
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_JEOCIE) == SDADC_CR1_JEOCIE) &&
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0302 	and.w	r3, r3, #2
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d136      	bne.n	8004ff6 <HAL_SDADC_IRQHandler+0xe6>
          ((tmp_isr & SDADC_ISR_JEOCF) == SDADC_ISR_JEOCF))
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f003 0302 	and.w	r3, r3, #2
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_JEOCIE) == SDADC_CR1_JEOCIE) &&
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d031      	beq.n	8004ff6 <HAL_SDADC_IRQHandler+0xe6>
  {
    /* Call injected conversion complete callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
    hsdadc->InjectedConvCpltCallback(hsdadc);
#else
    HAL_SDADC_InjectedConvCpltCallback(hsdadc);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f7fc f990 	bl	80012b8 <HAL_SDADC_InjectedConvCpltCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

    /* Update remaining injected conversions */
    hsdadc->InjConvRemaining--;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9c:	1e5a      	subs	r2, r3, #1
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	625a      	str	r2, [r3, #36]	; 0x24
    if(hsdadc->InjConvRemaining ==0UL)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d103      	bne.n	8004fb2 <HAL_SDADC_IRQHandler+0xa2>
    {
      /* end of injected sequence, reset the value */
      hsdadc->InjConvRemaining = hsdadc->InjectedChannelsNbr;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a1a      	ldr	r2, [r3, #32]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	625a      	str	r2, [r3, #36]	; 0x24
    }
    /* End of conversion if mode is not continuous, software trigger */
    /* and end of injected sequence */
    if((hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d179      	bne.n	80050ae <HAL_SDADC_IRQHandler+0x19e>
       (hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER) && \
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    if((hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d175      	bne.n	80050ae <HAL_SDADC_IRQHandler+0x19e>
       (hsdadc->InjConvRemaining == hsdadc->InjectedChannelsNbr))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
       (hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER) && \
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d16f      	bne.n	80050ae <HAL_SDADC_IRQHandler+0x19e>
    {
      /* Clear JEOCIE and JOVRIE bits in SDADC_CR1 register */
      hsdadc->Instance->CR1 &= ~(SDADC_CR1_JEOCIE | SDADC_CR1_JOVRIE);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f022 0206 	bic.w	r2, r2, #6
 8004fdc:	601a      	str	r2, [r3, #0]

      /* Update SDADC state */
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_INJ) ? \
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                      HAL_SDADC_STATE_READY : HAL_SDADC_STATE_REG;
 8004fe4:	2b04      	cmp	r3, #4
 8004fe6:	d101      	bne.n	8004fec <HAL_SDADC_IRQHandler+0xdc>
 8004fe8:	2201      	movs	r2, #1
 8004fea:	e000      	b.n	8004fee <HAL_SDADC_IRQHandler+0xde>
 8004fec:	2203      	movs	r2, #3
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_INJ) ? \
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    if((hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8004ff4:	e05b      	b.n	80050ae <HAL_SDADC_IRQHandler+0x19e>
    }
  }
  /* Check if end of calibration */
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_EOCALIE) == SDADC_CR1_EOCALIE) &&
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0301 	and.w	r3, r3, #1
 8005000:	2b01      	cmp	r3, #1
 8005002:	d11c      	bne.n	800503e <HAL_SDADC_IRQHandler+0x12e>
          ((tmp_isr & SDADC_ISR_EOCALF) == SDADC_ISR_EOCALF))
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f003 0301 	and.w	r3, r3, #1
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_EOCALIE) == SDADC_CR1_EOCALIE) &&
 800500a:	2b00      	cmp	r3, #0
 800500c:	d017      	beq.n	800503e <HAL_SDADC_IRQHandler+0x12e>
  {
    /* Clear EOCALIE bit in SDADC_CR1 register */
    hsdadc->Instance->CR1 &= ~(SDADC_CR1_EOCALIE);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f022 0201 	bic.w	r2, r2, #1
 800501c:	601a      	str	r2, [r3, #0]

    /* Set CLREOCALF bit in SDADC_CLRISR register */
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLREOCALF;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68da      	ldr	r2, [r3, #12]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f042 0201 	orr.w	r2, r2, #1
 800502c:	60da      	str	r2, [r3, #12]

    /* Call calibration callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
    hsdadc->CalibrationCpltCallback(hsdadc);
#else
    HAL_SDADC_CalibrationCpltCallback(hsdadc);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f843 	bl	80050ba <HAL_SDADC_CalibrationCpltCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

    /* Update SDADC state */
    hsdadc->State = HAL_SDADC_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800503c:	e038      	b.n	80050b0 <HAL_SDADC_IRQHandler+0x1a0>
  }
  /* Check if overrun occurs during regular conversion */
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_ROVRIE) == SDADC_CR1_ROVRIE) &&
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0310 	and.w	r3, r3, #16
 8005048:	2b10      	cmp	r3, #16
 800504a:	d113      	bne.n	8005074 <HAL_SDADC_IRQHandler+0x164>
          ((tmp_isr & SDADC_ISR_ROVRF) == SDADC_ISR_ROVRF))
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f003 0310 	and.w	r3, r3, #16
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_ROVRIE) == SDADC_CR1_ROVRIE) &&
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00e      	beq.n	8005074 <HAL_SDADC_IRQHandler+0x164>
  {
    /* Set CLRROVRF bit in SDADC_CLRISR register */
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLRROVRF;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68da      	ldr	r2, [r3, #12]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f042 0210 	orr.w	r2, r2, #16
 8005064:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hsdadc->ErrorCode = SDADC_ERROR_REGULAR_OVERRUN;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2201      	movs	r2, #1
 800506a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call error callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
    hsdadc->ErrorCallback(hsdadc);
#else
    HAL_SDADC_ErrorCallback(hsdadc);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f838 	bl	80050e2 <HAL_SDADC_ErrorCallback>
 8005072:	e01d      	b.n	80050b0 <HAL_SDADC_IRQHandler+0x1a0>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */
  }
  /* Check if overrun occurs during injected conversion */
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_JOVRIE) == SDADC_CR1_JOVRIE) &&
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0304 	and.w	r3, r3, #4
 800507e:	2b04      	cmp	r3, #4
 8005080:	d117      	bne.n	80050b2 <HAL_SDADC_IRQHandler+0x1a2>
          ((tmp_isr & SDADC_ISR_JOVRF) == SDADC_ISR_JOVRF))
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f003 0304 	and.w	r3, r3, #4
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_JOVRIE) == SDADC_CR1_JOVRIE) &&
 8005088:	2b00      	cmp	r3, #0
 800508a:	d012      	beq.n	80050b2 <HAL_SDADC_IRQHandler+0x1a2>
  {
    /* Set CLRJOVRF bit in SDADC_CLRISR register */
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLRJOVRF;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68da      	ldr	r2, [r3, #12]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f042 0204 	orr.w	r2, r2, #4
 800509a:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hsdadc->ErrorCode = SDADC_ERROR_INJECTED_OVERRUN;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2202      	movs	r2, #2
 80050a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call error callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
    hsdadc->ErrorCallback(hsdadc);
#else
    HAL_SDADC_ErrorCallback(hsdadc);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 f81d 	bl	80050e2 <HAL_SDADC_ErrorCallback>
  else
  {
    /* No additional IRQ source */
  }
  
  return;
 80050a8:	e002      	b.n	80050b0 <HAL_SDADC_IRQHandler+0x1a0>
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 80050aa:	bf00      	nop
 80050ac:	e000      	b.n	80050b0 <HAL_SDADC_IRQHandler+0x1a0>
    if((hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 80050ae:	bf00      	nop
  return;
 80050b0:	bf00      	nop
 80050b2:	bf00      	nop
}
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <HAL_SDADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback. 
  * @param  hsdadc SDADC handle.
  * @retval None
  */
__weak void HAL_SDADC_CalibrationCpltCallback(SDADC_HandleTypeDef* hsdadc)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b083      	sub	sp, #12
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  UNUSED(hsdadc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDADC_CalibrationCpltCallback could be implemented in the user file
   */
}
 80050c2:	bf00      	nop
 80050c4:	370c      	adds	r7, #12
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <HAL_SDADC_ConvCpltCallback>:
            using HAL_SDADC_GetValue or HAL_SDADC_MultiModeGetValue.
  * @param  hsdadc SDADC handle.
  * @retval None
  */
__weak void HAL_SDADC_ConvCpltCallback(SDADC_HandleTypeDef* hsdadc)
{
 80050ce:	b480      	push	{r7}
 80050d0:	b083      	sub	sp, #12
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  UNUSED(hsdadc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDADC_ConvCpltCallback could be implemented in the user file.
   */
}
 80050d6:	bf00      	nop
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <HAL_SDADC_ErrorCallback>:
  * @brief  Error callback. 
  * @param  hsdadc SDADC handle.
  * @retval None
  */
__weak void HAL_SDADC_ErrorCallback(SDADC_HandleTypeDef* hsdadc)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b083      	sub	sp, #12
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  UNUSED(hsdadc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDADC_ErrorCallback could be implemented in the user file.
   */
}
 80050ea:	bf00      	nop
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <SDADC_EnterInitMode>:
  * @brief  This function allows to enter in init mode for SDADC instance.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_EnterInitMode(SDADC_HandleTypeDef* hsdadc)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b084      	sub	sp, #16
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  
  /* Set INIT bit on SDADC_CR1 register */
  hsdadc->Instance->CR1 |= SDADC_CR1_INIT;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800510c:	601a      	str	r2, [r3, #0]

  /* Wait INITRDY bit on SDADC_ISR */
  tickstart = HAL_GetTick();
 800510e:	f7fc fed1 	bl	8001eb4 <HAL_GetTick>
 8005112:	60f8      	str	r0, [r7, #12]
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 8005114:	e008      	b.n	8005128 <SDADC_EnterInitMode+0x32>
  {
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 8005116:	f7fc fecd 	bl	8001eb4 <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	2bc8      	cmp	r3, #200	; 0xc8
 8005122:	d901      	bls.n	8005128 <SDADC_EnterInitMode+0x32>
    {       
      return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e005      	b.n	8005134 <SDADC_EnterInitMode+0x3e>
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	2b00      	cmp	r3, #0
 8005130:	daf1      	bge.n	8005116 <SDADC_EnterInitMode+0x20>
    } 
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3710      	adds	r7, #16
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <SDADC_ExitInitMode>:
  * @brief  This function allows to exit from init mode for SDADC instance.
  * @param  hsdadc SDADC handle.
  * @retval None.
  */
static void SDADC_ExitInitMode(SDADC_HandleTypeDef* hsdadc)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  /* Reset INIT bit in SDADC_CR1 register */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_INIT);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005152:	601a      	str	r2, [r3, #0]
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <SDADC_GetInjChannelsNbr>:
  * @brief  This function allows to get the number of injected channels.
  * @param  Channels bitfield of injected channels.
  * @retval Number of injected channels.
  */
static uint32_t SDADC_GetInjChannelsNbr(uint32_t Channels)
{
 8005160:	b480      	push	{r7}
 8005162:	b087      	sub	sp, #28
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  uint32_t nbChannels = 0UL;
 8005168:	2300      	movs	r3, #0
 800516a:	617b      	str	r3, [r7, #20]
  uint32_t tmp,i;
  
  /* Get the number of channels from bitfield */
  tmp = (uint32_t) (Channels & SDADC_LSB_MASK);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	b29b      	uxth	r3, r3
 8005170:	613b      	str	r3, [r7, #16]
  for(i = 0UL ; i < 9UL ; i++)
 8005172:	2300      	movs	r3, #0
 8005174:	60fb      	str	r3, [r7, #12]
 8005176:	e00d      	b.n	8005194 <SDADC_GetInjChannelsNbr+0x34>
  {
    if((tmp & 0x00000001UL) != 0UL)
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b00      	cmp	r3, #0
 8005180:	d002      	beq.n	8005188 <SDADC_GetInjChannelsNbr+0x28>
    {
      nbChannels++;
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	3301      	adds	r3, #1
 8005186:	617b      	str	r3, [r7, #20]
    }
    tmp = (uint32_t) (tmp >> 1UL);
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	085b      	lsrs	r3, r3, #1
 800518c:	613b      	str	r3, [r7, #16]
  for(i = 0UL ; i < 9UL ; i++)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	3301      	adds	r3, #1
 8005192:	60fb      	str	r3, [r7, #12]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2b08      	cmp	r3, #8
 8005198:	d9ee      	bls.n	8005178 <SDADC_GetInjChannelsNbr+0x18>
  }
  return nbChannels;
 800519a:	697b      	ldr	r3, [r7, #20]
}
 800519c:	4618      	mov	r0, r3
 800519e:	371c      	adds	r7, #28
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <SDADC_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_RegConvStart(SDADC_HandleTypeDef* hsdadc)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051b0:	2300      	movs	r3, #0
 80051b2:	73fb      	strb	r3, [r7, #15]

  /* Check regular trigger */
  if(hsdadc->RegularTrigger == SDADC_SOFTWARE_TRIGGER)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d108      	bne.n	80051ce <SDADC_RegConvStart+0x26>
  {
    /* Set RSWSTART bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 |= SDADC_CR2_RSWSTART;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	685a      	ldr	r2, [r3, #4]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80051ca:	605a      	str	r2, [r3, #4]
 80051cc:	e017      	b.n	80051fe <SDADC_RegConvStart+0x56>
  }
  else /* synchronuous trigger */
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f7ff ff91 	bl	80050f6 <SDADC_EnterInitMode>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d006      	beq.n	80051e8 <SDADC_RegConvStart+0x40>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	22ff      	movs	r2, #255	; 0xff
 80051de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	73fb      	strb	r3, [r7, #15]
 80051e6:	e00a      	b.n	80051fe <SDADC_RegConvStart+0x56>
    }
    else
    {
      /* Set RSYNC bit in SDADC_CR1 register */
      hsdadc->Instance->CR1 |= SDADC_CR1_RSYNC;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051f6:	601a      	str	r2, [r3, #0]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f7ff ff9f 	bl	800513c <SDADC_ExitInitMode>
    }
  }
  /* Update SDADC state only if status is OK */
  if(status == HAL_OK)
 80051fe:	7bfb      	ldrb	r3, [r7, #15]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d10a      	bne.n	800521a <SDADC_RegConvStart+0x72>
  {
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                    HAL_SDADC_STATE_REG : HAL_SDADC_STATE_REG_INJ;
 800520a:	2b01      	cmp	r3, #1
 800520c:	d101      	bne.n	8005212 <SDADC_RegConvStart+0x6a>
 800520e:	2203      	movs	r2, #3
 8005210:	e000      	b.n	8005214 <SDADC_RegConvStart+0x6c>
 8005212:	2205      	movs	r2, #5
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  /* Return function status */
  return status;
 800521a:	7bfb      	ldrb	r3, [r7, #15]
}
 800521c:	4618      	mov	r0, r3
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <SDADC_InjConvStart>:
  * @brief  This function allows to really start injected conversion.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_InjConvStart(SDADC_HandleTypeDef* hsdadc)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800522c:	2300      	movs	r3, #0
 800522e:	73fb      	strb	r3, [r7, #15]

  /* Initialize number of injected conversions remaining */
  hsdadc->InjConvRemaining = hsdadc->InjectedChannelsNbr;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a1a      	ldr	r2, [r3, #32]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check injected trigger */
  if(hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523c:	2b00      	cmp	r3, #0
 800523e:	d108      	bne.n	8005252 <SDADC_InjConvStart+0x2e>
  {
    /* Set JSWSTART bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 |= SDADC_CR2_JSWSTART;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	685a      	ldr	r2, [r3, #4]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800524e:	605a      	str	r2, [r3, #4]
 8005250:	e025      	b.n	800529e <SDADC_InjConvStart+0x7a>
  }
  else /* external or synchronuous trigger */
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7ff ff4f 	bl	80050f6 <SDADC_EnterInitMode>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d006      	beq.n	800526c <SDADC_InjConvStart+0x48>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	22ff      	movs	r2, #255	; 0xff
 8005262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	73fb      	strb	r3, [r7, #15]
 800526a:	e018      	b.n	800529e <SDADC_InjConvStart+0x7a>
    }
    else
    {
      if(hsdadc->InjectedTrigger == SDADC_SYNCHRONOUS_TRIGGER)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005270:	2b01      	cmp	r3, #1
 8005272:	d108      	bne.n	8005286 <SDADC_InjConvStart+0x62>
      {
        /* Set JSYNC bit in SDADC_CR1 register */
        hsdadc->Instance->CR1 |= SDADC_CR1_JSYNC;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	e008      	b.n	8005298 <SDADC_InjConvStart+0x74>
      }
      else /* external trigger */
      {
        /* Set JEXTEN[1:0] bits in SDADC_CR2 register */
        hsdadc->Instance->CR2 |= hsdadc->ExtTriggerEdge;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	6859      	ldr	r1, [r3, #4]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	430a      	orrs	r2, r1
 8005296:	605a      	str	r2, [r3, #4]
      }
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f7ff ff4f 	bl	800513c <SDADC_ExitInitMode>
    }
  }
  /* Update SDADC state only if status is OK */
  if(status == HAL_OK)
 800529e:	7bfb      	ldrb	r3, [r7, #15]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10a      	bne.n	80052ba <SDADC_InjConvStart+0x96>
  {
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                    HAL_SDADC_STATE_INJ : HAL_SDADC_STATE_REG_INJ;
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d101      	bne.n	80052b2 <SDADC_InjConvStart+0x8e>
 80052ae:	2204      	movs	r2, #4
 80052b0:	e000      	b.n	80052b4 <SDADC_InjConvStart+0x90>
 80052b2:	2205      	movs	r2, #5
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  /* Return function status */
  return status;
 80052ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e041      	b.n	800535a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d106      	bne.n	80052f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f7fc fb46 	bl	800197c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2202      	movs	r2, #2
 80052f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	3304      	adds	r3, #4
 8005300:	4619      	mov	r1, r3
 8005302:	4610      	mov	r0, r2
 8005304:	f000 fb28 	bl	8005958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3708      	adds	r7, #8
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
	...

08005364 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005372:	b2db      	uxtb	r3, r3
 8005374:	2b01      	cmp	r3, #1
 8005376:	d001      	beq.n	800537c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e041      	b.n	8005400 <HAL_TIM_Base_Start+0x9c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2202      	movs	r2, #2
 8005380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800538c:	d01d      	beq.n	80053ca <HAL_TIM_Base_Start+0x66>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a1e      	ldr	r2, [pc, #120]	; (800540c <HAL_TIM_Base_Start+0xa8>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d018      	beq.n	80053ca <HAL_TIM_Base_Start+0x66>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a1c      	ldr	r2, [pc, #112]	; (8005410 <HAL_TIM_Base_Start+0xac>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d013      	beq.n	80053ca <HAL_TIM_Base_Start+0x66>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a1b      	ldr	r2, [pc, #108]	; (8005414 <HAL_TIM_Base_Start+0xb0>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d00e      	beq.n	80053ca <HAL_TIM_Base_Start+0x66>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a19      	ldr	r2, [pc, #100]	; (8005418 <HAL_TIM_Base_Start+0xb4>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d009      	beq.n	80053ca <HAL_TIM_Base_Start+0x66>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a18      	ldr	r2, [pc, #96]	; (800541c <HAL_TIM_Base_Start+0xb8>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d004      	beq.n	80053ca <HAL_TIM_Base_Start+0x66>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a16      	ldr	r2, [pc, #88]	; (8005420 <HAL_TIM_Base_Start+0xbc>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d111      	bne.n	80053ee <HAL_TIM_Base_Start+0x8a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f003 0307 	and.w	r3, r3, #7
 80053d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2b06      	cmp	r3, #6
 80053da:	d010      	beq.n	80053fe <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f042 0201 	orr.w	r2, r2, #1
 80053ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ec:	e007      	b.n	80053fe <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f042 0201 	orr.w	r2, r2, #1
 80053fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3714      	adds	r7, #20
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr
 800540c:	40000400 	.word	0x40000400
 8005410:	40000800 	.word	0x40000800
 8005414:	40000c00 	.word	0x40000c00
 8005418:	40001800 	.word	0x40001800
 800541c:	40014000 	.word	0x40014000
 8005420:	40015c00 	.word	0x40015c00

08005424 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e041      	b.n	80054ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d106      	bne.n	8005450 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f839 	bl	80054c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2202      	movs	r2, #2
 8005454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	3304      	adds	r3, #4
 8005460:	4619      	mov	r1, r3
 8005462:	4610      	mov	r0, r2
 8005464:	f000 fa78 	bl	8005958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3708      	adds	r7, #8
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b083      	sub	sp, #12
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80054ca:	bf00      	nop
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
	...

080054d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d109      	bne.n	80054fc <HAL_TIM_PWM_Start+0x24>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	bf14      	ite	ne
 80054f4:	2301      	movne	r3, #1
 80054f6:	2300      	moveq	r3, #0
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	e022      	b.n	8005542 <HAL_TIM_PWM_Start+0x6a>
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	2b04      	cmp	r3, #4
 8005500:	d109      	bne.n	8005516 <HAL_TIM_PWM_Start+0x3e>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b01      	cmp	r3, #1
 800550c:	bf14      	ite	ne
 800550e:	2301      	movne	r3, #1
 8005510:	2300      	moveq	r3, #0
 8005512:	b2db      	uxtb	r3, r3
 8005514:	e015      	b.n	8005542 <HAL_TIM_PWM_Start+0x6a>
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	2b08      	cmp	r3, #8
 800551a:	d109      	bne.n	8005530 <HAL_TIM_PWM_Start+0x58>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005522:	b2db      	uxtb	r3, r3
 8005524:	2b01      	cmp	r3, #1
 8005526:	bf14      	ite	ne
 8005528:	2301      	movne	r3, #1
 800552a:	2300      	moveq	r3, #0
 800552c:	b2db      	uxtb	r3, r3
 800552e:	e008      	b.n	8005542 <HAL_TIM_PWM_Start+0x6a>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005536:	b2db      	uxtb	r3, r3
 8005538:	2b01      	cmp	r3, #1
 800553a:	bf14      	ite	ne
 800553c:	2301      	movne	r3, #1
 800553e:	2300      	moveq	r3, #0
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e07c      	b.n	8005644 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d104      	bne.n	800555a <HAL_TIM_PWM_Start+0x82>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005558:	e013      	b.n	8005582 <HAL_TIM_PWM_Start+0xaa>
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	2b04      	cmp	r3, #4
 800555e:	d104      	bne.n	800556a <HAL_TIM_PWM_Start+0x92>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2202      	movs	r2, #2
 8005564:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005568:	e00b      	b.n	8005582 <HAL_TIM_PWM_Start+0xaa>
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b08      	cmp	r3, #8
 800556e:	d104      	bne.n	800557a <HAL_TIM_PWM_Start+0xa2>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2202      	movs	r2, #2
 8005574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005578:	e003      	b.n	8005582 <HAL_TIM_PWM_Start+0xaa>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2202      	movs	r2, #2
 800557e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2201      	movs	r2, #1
 8005588:	6839      	ldr	r1, [r7, #0]
 800558a:	4618      	mov	r0, r3
 800558c:	f000 fc71 	bl	8005e72 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a2d      	ldr	r2, [pc, #180]	; (800564c <HAL_TIM_PWM_Start+0x174>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d009      	beq.n	80055ae <HAL_TIM_PWM_Start+0xd6>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a2c      	ldr	r2, [pc, #176]	; (8005650 <HAL_TIM_PWM_Start+0x178>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d004      	beq.n	80055ae <HAL_TIM_PWM_Start+0xd6>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a2a      	ldr	r2, [pc, #168]	; (8005654 <HAL_TIM_PWM_Start+0x17c>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d101      	bne.n	80055b2 <HAL_TIM_PWM_Start+0xda>
 80055ae:	2301      	movs	r3, #1
 80055b0:	e000      	b.n	80055b4 <HAL_TIM_PWM_Start+0xdc>
 80055b2:	2300      	movs	r3, #0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d007      	beq.n	80055c8 <HAL_TIM_PWM_Start+0xf0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055c6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055d0:	d01d      	beq.n	800560e <HAL_TIM_PWM_Start+0x136>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a20      	ldr	r2, [pc, #128]	; (8005658 <HAL_TIM_PWM_Start+0x180>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d018      	beq.n	800560e <HAL_TIM_PWM_Start+0x136>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a1e      	ldr	r2, [pc, #120]	; (800565c <HAL_TIM_PWM_Start+0x184>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d013      	beq.n	800560e <HAL_TIM_PWM_Start+0x136>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a1d      	ldr	r2, [pc, #116]	; (8005660 <HAL_TIM_PWM_Start+0x188>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d00e      	beq.n	800560e <HAL_TIM_PWM_Start+0x136>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a1b      	ldr	r2, [pc, #108]	; (8005664 <HAL_TIM_PWM_Start+0x18c>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d009      	beq.n	800560e <HAL_TIM_PWM_Start+0x136>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a13      	ldr	r2, [pc, #76]	; (800564c <HAL_TIM_PWM_Start+0x174>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d004      	beq.n	800560e <HAL_TIM_PWM_Start+0x136>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a17      	ldr	r2, [pc, #92]	; (8005668 <HAL_TIM_PWM_Start+0x190>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d111      	bne.n	8005632 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	f003 0307 	and.w	r3, r3, #7
 8005618:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2b06      	cmp	r3, #6
 800561e:	d010      	beq.n	8005642 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f042 0201 	orr.w	r2, r2, #1
 800562e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005630:	e007      	b.n	8005642 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f042 0201 	orr.w	r2, r2, #1
 8005640:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	40014000 	.word	0x40014000
 8005650:	40014400 	.word	0x40014400
 8005654:	40014800 	.word	0x40014800
 8005658:	40000400 	.word	0x40000400
 800565c:	40000800 	.word	0x40000800
 8005660:	40000c00 	.word	0x40000c00
 8005664:	40001800 	.word	0x40001800
 8005668:	40015c00 	.word	0x40015c00

0800566c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800567e:	2b01      	cmp	r3, #1
 8005680:	d101      	bne.n	8005686 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005682:	2302      	movs	r3, #2
 8005684:	e0ac      	b.n	80057e0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2201      	movs	r2, #1
 800568a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b0c      	cmp	r3, #12
 8005692:	f200 809f 	bhi.w	80057d4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005696:	a201      	add	r2, pc, #4	; (adr r2, 800569c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569c:	080056d1 	.word	0x080056d1
 80056a0:	080057d5 	.word	0x080057d5
 80056a4:	080057d5 	.word	0x080057d5
 80056a8:	080057d5 	.word	0x080057d5
 80056ac:	08005711 	.word	0x08005711
 80056b0:	080057d5 	.word	0x080057d5
 80056b4:	080057d5 	.word	0x080057d5
 80056b8:	080057d5 	.word	0x080057d5
 80056bc:	08005753 	.word	0x08005753
 80056c0:	080057d5 	.word	0x080057d5
 80056c4:	080057d5 	.word	0x080057d5
 80056c8:	080057d5 	.word	0x080057d5
 80056cc:	08005793 	.word	0x08005793
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68b9      	ldr	r1, [r7, #8]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 f9d8 	bl	8005a8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	699a      	ldr	r2, [r3, #24]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f042 0208 	orr.w	r2, r2, #8
 80056ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	699a      	ldr	r2, [r3, #24]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f022 0204 	bic.w	r2, r2, #4
 80056fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6999      	ldr	r1, [r3, #24]
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	691a      	ldr	r2, [r3, #16]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	430a      	orrs	r2, r1
 800570c:	619a      	str	r2, [r3, #24]
      break;
 800570e:	e062      	b.n	80057d6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68b9      	ldr	r1, [r7, #8]
 8005716:	4618      	mov	r0, r3
 8005718:	f000 fa32 	bl	8005b80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	699a      	ldr	r2, [r3, #24]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800572a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	699a      	ldr	r2, [r3, #24]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800573a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6999      	ldr	r1, [r3, #24]
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	021a      	lsls	r2, r3, #8
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	430a      	orrs	r2, r1
 800574e:	619a      	str	r2, [r3, #24]
      break;
 8005750:	e041      	b.n	80057d6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68b9      	ldr	r1, [r7, #8]
 8005758:	4618      	mov	r0, r3
 800575a:	f000 fa73 	bl	8005c44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	69da      	ldr	r2, [r3, #28]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f042 0208 	orr.w	r2, r2, #8
 800576c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	69da      	ldr	r2, [r3, #28]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f022 0204 	bic.w	r2, r2, #4
 800577c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	69d9      	ldr	r1, [r3, #28]
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	691a      	ldr	r2, [r3, #16]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	430a      	orrs	r2, r1
 800578e:	61da      	str	r2, [r3, #28]
      break;
 8005790:	e021      	b.n	80057d6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68b9      	ldr	r1, [r7, #8]
 8005798:	4618      	mov	r0, r3
 800579a:	f000 fa91 	bl	8005cc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	69da      	ldr	r2, [r3, #28]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	69da      	ldr	r2, [r3, #28]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	69d9      	ldr	r1, [r3, #28]
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	021a      	lsls	r2, r3, #8
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	430a      	orrs	r2, r1
 80057d0:	61da      	str	r2, [r3, #28]
      break;
 80057d2:	e000      	b.n	80057d6 <HAL_TIM_PWM_ConfigChannel+0x16a>
      break;
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 80057d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3710      	adds	r7, #16
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d101      	bne.n	8005800 <HAL_TIM_ConfigClockSource+0x18>
 80057fc:	2302      	movs	r3, #2
 80057fe:	e0a6      	b.n	800594e <HAL_TIM_ConfigClockSource+0x166>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2202      	movs	r2, #2
 800580c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800581e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005826:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2b40      	cmp	r3, #64	; 0x40
 8005836:	d067      	beq.n	8005908 <HAL_TIM_ConfigClockSource+0x120>
 8005838:	2b40      	cmp	r3, #64	; 0x40
 800583a:	d80b      	bhi.n	8005854 <HAL_TIM_ConfigClockSource+0x6c>
 800583c:	2b10      	cmp	r3, #16
 800583e:	d073      	beq.n	8005928 <HAL_TIM_ConfigClockSource+0x140>
 8005840:	2b10      	cmp	r3, #16
 8005842:	d802      	bhi.n	800584a <HAL_TIM_ConfigClockSource+0x62>
 8005844:	2b00      	cmp	r3, #0
 8005846:	d06f      	beq.n	8005928 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005848:	e078      	b.n	800593c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800584a:	2b20      	cmp	r3, #32
 800584c:	d06c      	beq.n	8005928 <HAL_TIM_ConfigClockSource+0x140>
 800584e:	2b30      	cmp	r3, #48	; 0x30
 8005850:	d06a      	beq.n	8005928 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005852:	e073      	b.n	800593c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005854:	2b70      	cmp	r3, #112	; 0x70
 8005856:	d00d      	beq.n	8005874 <HAL_TIM_ConfigClockSource+0x8c>
 8005858:	2b70      	cmp	r3, #112	; 0x70
 800585a:	d804      	bhi.n	8005866 <HAL_TIM_ConfigClockSource+0x7e>
 800585c:	2b50      	cmp	r3, #80	; 0x50
 800585e:	d033      	beq.n	80058c8 <HAL_TIM_ConfigClockSource+0xe0>
 8005860:	2b60      	cmp	r3, #96	; 0x60
 8005862:	d041      	beq.n	80058e8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005864:	e06a      	b.n	800593c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800586a:	d066      	beq.n	800593a <HAL_TIM_ConfigClockSource+0x152>
 800586c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005870:	d017      	beq.n	80058a2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005872:	e063      	b.n	800593c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6818      	ldr	r0, [r3, #0]
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	6899      	ldr	r1, [r3, #8]
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	f000 fad5 	bl	8005e32 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005896:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	609a      	str	r2, [r3, #8]
      break;
 80058a0:	e04c      	b.n	800593c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6818      	ldr	r0, [r3, #0]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	6899      	ldr	r1, [r3, #8]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	685a      	ldr	r2, [r3, #4]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	f000 fabe 	bl	8005e32 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	689a      	ldr	r2, [r3, #8]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058c4:	609a      	str	r2, [r3, #8]
      break;
 80058c6:	e039      	b.n	800593c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6818      	ldr	r0, [r3, #0]
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	6859      	ldr	r1, [r3, #4]
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	461a      	mov	r2, r3
 80058d6:	f000 fa32 	bl	8005d3e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2150      	movs	r1, #80	; 0x50
 80058e0:	4618      	mov	r0, r3
 80058e2:	f000 fa8b 	bl	8005dfc <TIM_ITRx_SetConfig>
      break;
 80058e6:	e029      	b.n	800593c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6818      	ldr	r0, [r3, #0]
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	6859      	ldr	r1, [r3, #4]
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	461a      	mov	r2, r3
 80058f6:	f000 fa51 	bl	8005d9c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2160      	movs	r1, #96	; 0x60
 8005900:	4618      	mov	r0, r3
 8005902:	f000 fa7b 	bl	8005dfc <TIM_ITRx_SetConfig>
      break;
 8005906:	e019      	b.n	800593c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6818      	ldr	r0, [r3, #0]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	6859      	ldr	r1, [r3, #4]
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	461a      	mov	r2, r3
 8005916:	f000 fa12 	bl	8005d3e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2140      	movs	r1, #64	; 0x40
 8005920:	4618      	mov	r0, r3
 8005922:	f000 fa6b 	bl	8005dfc <TIM_ITRx_SetConfig>
      break;
 8005926:	e009      	b.n	800593c <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4619      	mov	r1, r3
 8005932:	4610      	mov	r0, r2
 8005934:	f000 fa62 	bl	8005dfc <TIM_ITRx_SetConfig>
        break;
 8005938:	e000      	b.n	800593c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800593a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3710      	adds	r7, #16
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
	...

08005958 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800596e:	d00f      	beq.n	8005990 <TIM_Base_SetConfig+0x38>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a3c      	ldr	r2, [pc, #240]	; (8005a64 <TIM_Base_SetConfig+0x10c>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d00b      	beq.n	8005990 <TIM_Base_SetConfig+0x38>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a3b      	ldr	r2, [pc, #236]	; (8005a68 <TIM_Base_SetConfig+0x110>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d007      	beq.n	8005990 <TIM_Base_SetConfig+0x38>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a3a      	ldr	r2, [pc, #232]	; (8005a6c <TIM_Base_SetConfig+0x114>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d003      	beq.n	8005990 <TIM_Base_SetConfig+0x38>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a39      	ldr	r2, [pc, #228]	; (8005a70 <TIM_Base_SetConfig+0x118>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d108      	bne.n	80059a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005996:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	4313      	orrs	r3, r2
 80059a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059a8:	d027      	beq.n	80059fa <TIM_Base_SetConfig+0xa2>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a2d      	ldr	r2, [pc, #180]	; (8005a64 <TIM_Base_SetConfig+0x10c>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d023      	beq.n	80059fa <TIM_Base_SetConfig+0xa2>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a2c      	ldr	r2, [pc, #176]	; (8005a68 <TIM_Base_SetConfig+0x110>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d01f      	beq.n	80059fa <TIM_Base_SetConfig+0xa2>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a2b      	ldr	r2, [pc, #172]	; (8005a6c <TIM_Base_SetConfig+0x114>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d01b      	beq.n	80059fa <TIM_Base_SetConfig+0xa2>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a2b      	ldr	r2, [pc, #172]	; (8005a74 <TIM_Base_SetConfig+0x11c>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d017      	beq.n	80059fa <TIM_Base_SetConfig+0xa2>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a2a      	ldr	r2, [pc, #168]	; (8005a78 <TIM_Base_SetConfig+0x120>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d013      	beq.n	80059fa <TIM_Base_SetConfig+0xa2>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a29      	ldr	r2, [pc, #164]	; (8005a7c <TIM_Base_SetConfig+0x124>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d00f      	beq.n	80059fa <TIM_Base_SetConfig+0xa2>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a28      	ldr	r2, [pc, #160]	; (8005a80 <TIM_Base_SetConfig+0x128>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d00b      	beq.n	80059fa <TIM_Base_SetConfig+0xa2>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a27      	ldr	r2, [pc, #156]	; (8005a84 <TIM_Base_SetConfig+0x12c>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d007      	beq.n	80059fa <TIM_Base_SetConfig+0xa2>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a26      	ldr	r2, [pc, #152]	; (8005a88 <TIM_Base_SetConfig+0x130>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d003      	beq.n	80059fa <TIM_Base_SetConfig+0xa2>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a1e      	ldr	r2, [pc, #120]	; (8005a70 <TIM_Base_SetConfig+0x118>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d108      	bne.n	8005a0c <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	689a      	ldr	r2, [r3, #8]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a13      	ldr	r2, [pc, #76]	; (8005a80 <TIM_Base_SetConfig+0x128>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d007      	beq.n	8005a48 <TIM_Base_SetConfig+0xf0>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a12      	ldr	r2, [pc, #72]	; (8005a84 <TIM_Base_SetConfig+0x12c>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d003      	beq.n	8005a48 <TIM_Base_SetConfig+0xf0>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a11      	ldr	r2, [pc, #68]	; (8005a88 <TIM_Base_SetConfig+0x130>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d103      	bne.n	8005a50 <TIM_Base_SetConfig+0xf8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	691a      	ldr	r2, [r3, #16]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	615a      	str	r2, [r3, #20]
}
 8005a56:	bf00      	nop
 8005a58:	3714      	adds	r7, #20
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	40000400 	.word	0x40000400
 8005a68:	40000800 	.word	0x40000800
 8005a6c:	40000c00 	.word	0x40000c00
 8005a70:	40015c00 	.word	0x40015c00
 8005a74:	40001800 	.word	0x40001800
 8005a78:	40001c00 	.word	0x40001c00
 8005a7c:	40002000 	.word	0x40002000
 8005a80:	40014000 	.word	0x40014000
 8005a84:	40014400 	.word	0x40014400
 8005a88:	40014800 	.word	0x40014800

08005a8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b087      	sub	sp, #28
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	f023 0201 	bic.w	r2, r3, #1
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f023 0303 	bic.w	r3, r3, #3
 8005ac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	f023 0302 	bic.w	r3, r3, #2
 8005ad4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a24      	ldr	r2, [pc, #144]	; (8005b74 <TIM_OC1_SetConfig+0xe8>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d007      	beq.n	8005af8 <TIM_OC1_SetConfig+0x6c>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a23      	ldr	r2, [pc, #140]	; (8005b78 <TIM_OC1_SetConfig+0xec>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d003      	beq.n	8005af8 <TIM_OC1_SetConfig+0x6c>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a22      	ldr	r2, [pc, #136]	; (8005b7c <TIM_OC1_SetConfig+0xf0>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d10c      	bne.n	8005b12 <TIM_OC1_SetConfig+0x86>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	f023 0308 	bic.w	r3, r3, #8
 8005afe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	697a      	ldr	r2, [r7, #20]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f023 0304 	bic.w	r3, r3, #4
 8005b10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a17      	ldr	r2, [pc, #92]	; (8005b74 <TIM_OC1_SetConfig+0xe8>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d007      	beq.n	8005b2a <TIM_OC1_SetConfig+0x9e>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a16      	ldr	r2, [pc, #88]	; (8005b78 <TIM_OC1_SetConfig+0xec>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d003      	beq.n	8005b2a <TIM_OC1_SetConfig+0x9e>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a15      	ldr	r2, [pc, #84]	; (8005b7c <TIM_OC1_SetConfig+0xf0>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d111      	bne.n	8005b4e <TIM_OC1_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	693a      	ldr	r2, [r7, #16]
 8005b52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	685a      	ldr	r2, [r3, #4]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	621a      	str	r2, [r3, #32]
}
 8005b68:	bf00      	nop
 8005b6a:	371c      	adds	r7, #28
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr
 8005b74:	40014000 	.word	0x40014000
 8005b78:	40014400 	.word	0x40014400
 8005b7c:	40014800 	.word	0x40014800

08005b80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b087      	sub	sp, #28
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	f023 0210 	bic.w	r2, r3, #16
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	021b      	lsls	r3, r3, #8
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	f023 0320 	bic.w	r3, r3, #32
 8005bca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	011b      	lsls	r3, r3, #4
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	613b      	str	r3, [r7, #16]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a17      	ldr	r2, [pc, #92]	; (8005c38 <TIM_OC2_SetConfig+0xb8>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d007      	beq.n	8005bf0 <TIM_OC2_SetConfig+0x70>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a16      	ldr	r2, [pc, #88]	; (8005c3c <TIM_OC2_SetConfig+0xbc>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d003      	beq.n	8005bf0 <TIM_OC2_SetConfig+0x70>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a15      	ldr	r2, [pc, #84]	; (8005c40 <TIM_OC2_SetConfig+0xc0>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d10f      	bne.n	8005c10 <TIM_OC2_SetConfig+0x90>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bf6:	617b      	str	r3, [r7, #20]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	695b      	ldr	r3, [r3, #20]
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	621a      	str	r2, [r3, #32]
}
 8005c2a:	bf00      	nop
 8005c2c:	371c      	adds	r7, #28
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	40014000 	.word	0x40014000
 8005c3c:	40014400 	.word	0x40014400
 8005c40:	40014800 	.word	0x40014800

08005c44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b087      	sub	sp, #28
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	69db      	ldr	r3, [r3, #28]
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f023 0303 	bic.w	r3, r3, #3
 8005c7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	021b      	lsls	r3, r3, #8
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	617b      	str	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	685a      	ldr	r2, [r3, #4]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	621a      	str	r2, [r3, #32]
}
 8005cb4:	bf00      	nop
 8005cb6:	371c      	adds	r7, #28
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b087      	sub	sp, #28
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
 8005cda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	021b      	lsls	r3, r3, #8
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	031b      	lsls	r3, r3, #12
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	617b      	str	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	685a      	ldr	r2, [r3, #4]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	621a      	str	r2, [r3, #32]
}
 8005d32:	bf00      	nop
 8005d34:	371c      	adds	r7, #28
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr

08005d3e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b087      	sub	sp, #28
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	60f8      	str	r0, [r7, #12]
 8005d46:	60b9      	str	r1, [r7, #8]
 8005d48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	f023 0201 	bic.w	r2, r3, #1
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	011b      	lsls	r3, r3, #4
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	f023 030a 	bic.w	r3, r3, #10
 8005d7a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d7c:	697a      	ldr	r2, [r7, #20]
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	621a      	str	r2, [r3, #32]
}
 8005d90:	bf00      	nop
 8005d92:	371c      	adds	r7, #28
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b087      	sub	sp, #28
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6a1b      	ldr	r3, [r3, #32]
 8005dac:	f023 0210 	bic.w	r2, r3, #16
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005dc6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	031b      	lsls	r3, r3, #12
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dd8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	011b      	lsls	r3, r3, #4
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	621a      	str	r2, [r3, #32]
}
 8005df0:	bf00      	nop
 8005df2:	371c      	adds	r7, #28
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e12:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e14:	683a      	ldr	r2, [r7, #0]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	f043 0307 	orr.w	r3, r3, #7
 8005e1e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	609a      	str	r2, [r3, #8]
}
 8005e26:	bf00      	nop
 8005e28:	3714      	adds	r7, #20
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr

08005e32 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e32:	b480      	push	{r7}
 8005e34:	b087      	sub	sp, #28
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	60f8      	str	r0, [r7, #12]
 8005e3a:	60b9      	str	r1, [r7, #8]
 8005e3c:	607a      	str	r2, [r7, #4]
 8005e3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e4c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	021a      	lsls	r2, r3, #8
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	431a      	orrs	r2, r3
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	609a      	str	r2, [r3, #8]
}
 8005e66:	bf00      	nop
 8005e68:	371c      	adds	r7, #28
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr

08005e72 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e72:	b480      	push	{r7}
 8005e74:	b087      	sub	sp, #28
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	60f8      	str	r0, [r7, #12]
 8005e7a:	60b9      	str	r1, [r7, #8]
 8005e7c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	f003 031f 	and.w	r3, r3, #31
 8005e84:	2201      	movs	r2, #1
 8005e86:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6a1a      	ldr	r2, [r3, #32]
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	43db      	mvns	r3, r3
 8005e94:	401a      	ands	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6a1a      	ldr	r2, [r3, #32]
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	f003 031f 	and.w	r3, r3, #31
 8005ea4:	6879      	ldr	r1, [r7, #4]
 8005ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8005eaa:	431a      	orrs	r2, r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	621a      	str	r2, [r3, #32]
}
 8005eb0:	bf00      	nop
 8005eb2:	371c      	adds	r7, #28
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b085      	sub	sp, #20
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d101      	bne.n	8005ed4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ed0:	2302      	movs	r3, #2
 8005ed2:	e055      	b.n	8005f80 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2202      	movs	r2, #2
 8005ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	60bb      	str	r3, [r7, #8]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005efa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f16:	d01d      	beq.n	8005f54 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a1b      	ldr	r2, [pc, #108]	; (8005f8c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d018      	beq.n	8005f54 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a1a      	ldr	r2, [pc, #104]	; (8005f90 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d013      	beq.n	8005f54 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a18      	ldr	r2, [pc, #96]	; (8005f94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d00e      	beq.n	8005f54 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a17      	ldr	r2, [pc, #92]	; (8005f98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d009      	beq.n	8005f54 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a15      	ldr	r2, [pc, #84]	; (8005f9c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d004      	beq.n	8005f54 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a14      	ldr	r2, [pc, #80]	; (8005fa0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d10c      	bne.n	8005f6e <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f7e:	2300      	movs	r3, #0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3714      	adds	r7, #20
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr
 8005f8c:	40000400 	.word	0x40000400
 8005f90:	40000800 	.word	0x40000800
 8005f94:	40000c00 	.word	0x40000c00
 8005f98:	40001800 	.word	0x40001800
 8005f9c:	40014000 	.word	0x40014000
 8005fa0:	40015c00 	.word	0x40015c00

08005fa4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d101      	bne.n	8005fb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e040      	b.n	8006038 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d106      	bne.n	8005fcc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f7fb fe1e 	bl	8001c08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2224      	movs	r2, #36	; 0x24
 8005fd0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f022 0201 	bic.w	r2, r2, #1
 8005fe0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f91e 	bl	8006224 <UART_SetConfig>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d101      	bne.n	8005ff2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e022      	b.n	8006038 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d002      	beq.n	8006000 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 fa8c 	bl	8006518 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	685a      	ldr	r2, [r3, #4]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800600e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689a      	ldr	r2, [r3, #8]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800601e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f042 0201 	orr.w	r2, r2, #1
 800602e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 fb13 	bl	800665c <UART_CheckIdleState>
 8006036:	4603      	mov	r3, r0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3708      	adds	r7, #8
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b08a      	sub	sp, #40	; 0x28
 8006044:	af02      	add	r7, sp, #8
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	603b      	str	r3, [r7, #0]
 800604c:	4613      	mov	r3, r2
 800604e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006054:	2b20      	cmp	r3, #32
 8006056:	f040 8082 	bne.w	800615e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d002      	beq.n	8006066 <HAL_UART_Transmit+0x26>
 8006060:	88fb      	ldrh	r3, [r7, #6]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d101      	bne.n	800606a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e07a      	b.n	8006160 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006070:	2b01      	cmp	r3, #1
 8006072:	d101      	bne.n	8006078 <HAL_UART_Transmit+0x38>
 8006074:	2302      	movs	r3, #2
 8006076:	e073      	b.n	8006160 <HAL_UART_Transmit+0x120>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2221      	movs	r2, #33	; 0x21
 800608c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800608e:	f7fb ff11 	bl	8001eb4 <HAL_GetTick>
 8006092:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	88fa      	ldrh	r2, [r7, #6]
 8006098:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	88fa      	ldrh	r2, [r7, #6]
 80060a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ac:	d108      	bne.n	80060c0 <HAL_UART_Transmit+0x80>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d104      	bne.n	80060c0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80060b6:	2300      	movs	r3, #0
 80060b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	61bb      	str	r3, [r7, #24]
 80060be:	e003      	b.n	80060c8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060c4:	2300      	movs	r3, #0
 80060c6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80060d0:	e02d      	b.n	800612e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	9300      	str	r3, [sp, #0]
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	2200      	movs	r2, #0
 80060da:	2180      	movs	r1, #128	; 0x80
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f000 fb06 	bl	80066ee <UART_WaitOnFlagUntilTimeout>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e039      	b.n	8006160 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10b      	bne.n	800610a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	881a      	ldrh	r2, [r3, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060fe:	b292      	uxth	r2, r2
 8006100:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	3302      	adds	r3, #2
 8006106:	61bb      	str	r3, [r7, #24]
 8006108:	e008      	b.n	800611c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	781a      	ldrb	r2, [r3, #0]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	b292      	uxth	r2, r2
 8006114:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	3301      	adds	r3, #1
 800611a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006122:	b29b      	uxth	r3, r3
 8006124:	3b01      	subs	r3, #1
 8006126:	b29a      	uxth	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006134:	b29b      	uxth	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1cb      	bne.n	80060d2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	9300      	str	r3, [sp, #0]
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	2200      	movs	r2, #0
 8006142:	2140      	movs	r1, #64	; 0x40
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f000 fad2 	bl	80066ee <UART_WaitOnFlagUntilTimeout>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d001      	beq.n	8006154 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	e005      	b.n	8006160 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2220      	movs	r2, #32
 8006158:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800615a:	2300      	movs	r3, #0
 800615c:	e000      	b.n	8006160 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800615e:	2302      	movs	r3, #2
  }
}
 8006160:	4618      	mov	r0, r3
 8006162:	3720      	adds	r7, #32
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	4613      	mov	r3, r2
 8006174:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800617a:	2b20      	cmp	r3, #32
 800617c:	d12c      	bne.n	80061d8 <HAL_UART_Receive_DMA+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d002      	beq.n	800618a <HAL_UART_Receive_DMA+0x22>
 8006184:	88fb      	ldrh	r3, [r7, #6]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d101      	bne.n	800618e <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e025      	b.n	80061da <HAL_UART_Receive_DMA+0x72>
    }

    __HAL_LOCK(huart);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006194:	2b01      	cmp	r3, #1
 8006196:	d101      	bne.n	800619c <HAL_UART_Receive_DMA+0x34>
 8006198:	2302      	movs	r3, #2
 800619a:	e01e      	b.n	80061da <HAL_UART_Receive_DMA+0x72>
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2200      	movs	r2, #0
 80061a8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d007      	beq.n	80061c8 <HAL_UART_Receive_DMA+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80061c6:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80061c8:	88fb      	ldrh	r3, [r7, #6]
 80061ca:	461a      	mov	r2, r3
 80061cc:	68b9      	ldr	r1, [r7, #8]
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f000 fb0a 	bl	80067e8 <UART_Start_Receive_DMA>
 80061d4:	4603      	mov	r3, r0
 80061d6:	e000      	b.n	80061da <HAL_UART_Receive_DMA+0x72>
  }
  else
  {
    return HAL_BUSY;
 80061d8:	2302      	movs	r3, #2
  }
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80061e2:	b480      	push	{r7}
 80061e4:	b083      	sub	sp, #12
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80061ea:	bf00      	nop
 80061ec:	370c      	adds	r7, #12
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr

080061f6 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80061f6:	b480      	push	{r7}
 80061f8:	b083      	sub	sp, #12
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80061fe:	bf00      	nop
 8006200:	370c      	adds	r7, #12
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr

0800620a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800620a:	b480      	push	{r7}
 800620c:	b083      	sub	sp, #12
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
 8006212:	460b      	mov	r3, r1
 8006214:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006216:	bf00      	nop
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
	...

08006224 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b088      	sub	sp, #32
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800622c:	2300      	movs	r3, #0
 800622e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	689a      	ldr	r2, [r3, #8]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	431a      	orrs	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	431a      	orrs	r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	69db      	ldr	r3, [r3, #28]
 8006244:	4313      	orrs	r3, r2
 8006246:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006252:	f023 030c 	bic.w	r3, r3, #12
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	6812      	ldr	r2, [r2, #0]
 800625a:	6979      	ldr	r1, [r7, #20]
 800625c:	430b      	orrs	r3, r1
 800625e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	68da      	ldr	r2, [r3, #12]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	430a      	orrs	r2, r1
 8006274:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a1b      	ldr	r3, [r3, #32]
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	4313      	orrs	r3, r2
 8006284:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	697a      	ldr	r2, [r7, #20]
 8006296:	430a      	orrs	r2, r1
 8006298:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a99      	ldr	r2, [pc, #612]	; (8006504 <UART_SetConfig+0x2e0>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d121      	bne.n	80062e8 <UART_SetConfig+0xc4>
 80062a4:	4b98      	ldr	r3, [pc, #608]	; (8006508 <UART_SetConfig+0x2e4>)
 80062a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a8:	f003 0303 	and.w	r3, r3, #3
 80062ac:	2b03      	cmp	r3, #3
 80062ae:	d817      	bhi.n	80062e0 <UART_SetConfig+0xbc>
 80062b0:	a201      	add	r2, pc, #4	; (adr r2, 80062b8 <UART_SetConfig+0x94>)
 80062b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b6:	bf00      	nop
 80062b8:	080062c9 	.word	0x080062c9
 80062bc:	080062d5 	.word	0x080062d5
 80062c0:	080062db 	.word	0x080062db
 80062c4:	080062cf 	.word	0x080062cf
 80062c8:	2301      	movs	r3, #1
 80062ca:	77fb      	strb	r3, [r7, #31]
 80062cc:	e060      	b.n	8006390 <UART_SetConfig+0x16c>
 80062ce:	2302      	movs	r3, #2
 80062d0:	77fb      	strb	r3, [r7, #31]
 80062d2:	e05d      	b.n	8006390 <UART_SetConfig+0x16c>
 80062d4:	2304      	movs	r3, #4
 80062d6:	77fb      	strb	r3, [r7, #31]
 80062d8:	e05a      	b.n	8006390 <UART_SetConfig+0x16c>
 80062da:	2308      	movs	r3, #8
 80062dc:	77fb      	strb	r3, [r7, #31]
 80062de:	e057      	b.n	8006390 <UART_SetConfig+0x16c>
 80062e0:	2310      	movs	r3, #16
 80062e2:	77fb      	strb	r3, [r7, #31]
 80062e4:	bf00      	nop
 80062e6:	e053      	b.n	8006390 <UART_SetConfig+0x16c>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a87      	ldr	r2, [pc, #540]	; (800650c <UART_SetConfig+0x2e8>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d123      	bne.n	800633a <UART_SetConfig+0x116>
 80062f2:	4b85      	ldr	r3, [pc, #532]	; (8006508 <UART_SetConfig+0x2e4>)
 80062f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80062fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062fe:	d012      	beq.n	8006326 <UART_SetConfig+0x102>
 8006300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006304:	d802      	bhi.n	800630c <UART_SetConfig+0xe8>
 8006306:	2b00      	cmp	r3, #0
 8006308:	d007      	beq.n	800631a <UART_SetConfig+0xf6>
 800630a:	e012      	b.n	8006332 <UART_SetConfig+0x10e>
 800630c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006310:	d00c      	beq.n	800632c <UART_SetConfig+0x108>
 8006312:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006316:	d003      	beq.n	8006320 <UART_SetConfig+0xfc>
 8006318:	e00b      	b.n	8006332 <UART_SetConfig+0x10e>
 800631a:	2300      	movs	r3, #0
 800631c:	77fb      	strb	r3, [r7, #31]
 800631e:	e037      	b.n	8006390 <UART_SetConfig+0x16c>
 8006320:	2302      	movs	r3, #2
 8006322:	77fb      	strb	r3, [r7, #31]
 8006324:	e034      	b.n	8006390 <UART_SetConfig+0x16c>
 8006326:	2304      	movs	r3, #4
 8006328:	77fb      	strb	r3, [r7, #31]
 800632a:	e031      	b.n	8006390 <UART_SetConfig+0x16c>
 800632c:	2308      	movs	r3, #8
 800632e:	77fb      	strb	r3, [r7, #31]
 8006330:	e02e      	b.n	8006390 <UART_SetConfig+0x16c>
 8006332:	2310      	movs	r3, #16
 8006334:	77fb      	strb	r3, [r7, #31]
 8006336:	bf00      	nop
 8006338:	e02a      	b.n	8006390 <UART_SetConfig+0x16c>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a74      	ldr	r2, [pc, #464]	; (8006510 <UART_SetConfig+0x2ec>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d123      	bne.n	800638c <UART_SetConfig+0x168>
 8006344:	4b70      	ldr	r3, [pc, #448]	; (8006508 <UART_SetConfig+0x2e4>)
 8006346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006348:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800634c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006350:	d012      	beq.n	8006378 <UART_SetConfig+0x154>
 8006352:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006356:	d802      	bhi.n	800635e <UART_SetConfig+0x13a>
 8006358:	2b00      	cmp	r3, #0
 800635a:	d007      	beq.n	800636c <UART_SetConfig+0x148>
 800635c:	e012      	b.n	8006384 <UART_SetConfig+0x160>
 800635e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006362:	d00c      	beq.n	800637e <UART_SetConfig+0x15a>
 8006364:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006368:	d003      	beq.n	8006372 <UART_SetConfig+0x14e>
 800636a:	e00b      	b.n	8006384 <UART_SetConfig+0x160>
 800636c:	2300      	movs	r3, #0
 800636e:	77fb      	strb	r3, [r7, #31]
 8006370:	e00e      	b.n	8006390 <UART_SetConfig+0x16c>
 8006372:	2302      	movs	r3, #2
 8006374:	77fb      	strb	r3, [r7, #31]
 8006376:	e00b      	b.n	8006390 <UART_SetConfig+0x16c>
 8006378:	2304      	movs	r3, #4
 800637a:	77fb      	strb	r3, [r7, #31]
 800637c:	e008      	b.n	8006390 <UART_SetConfig+0x16c>
 800637e:	2308      	movs	r3, #8
 8006380:	77fb      	strb	r3, [r7, #31]
 8006382:	e005      	b.n	8006390 <UART_SetConfig+0x16c>
 8006384:	2310      	movs	r3, #16
 8006386:	77fb      	strb	r3, [r7, #31]
 8006388:	bf00      	nop
 800638a:	e001      	b.n	8006390 <UART_SetConfig+0x16c>
 800638c:	2310      	movs	r3, #16
 800638e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	69db      	ldr	r3, [r3, #28]
 8006394:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006398:	d15c      	bne.n	8006454 <UART_SetConfig+0x230>
  {
    switch (clocksource)
 800639a:	7ffb      	ldrb	r3, [r7, #31]
 800639c:	2b08      	cmp	r3, #8
 800639e:	d828      	bhi.n	80063f2 <UART_SetConfig+0x1ce>
 80063a0:	a201      	add	r2, pc, #4	; (adr r2, 80063a8 <UART_SetConfig+0x184>)
 80063a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a6:	bf00      	nop
 80063a8:	080063cd 	.word	0x080063cd
 80063ac:	080063d5 	.word	0x080063d5
 80063b0:	080063dd 	.word	0x080063dd
 80063b4:	080063f3 	.word	0x080063f3
 80063b8:	080063e3 	.word	0x080063e3
 80063bc:	080063f3 	.word	0x080063f3
 80063c0:	080063f3 	.word	0x080063f3
 80063c4:	080063f3 	.word	0x080063f3
 80063c8:	080063eb 	.word	0x080063eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063cc:	f7fe f932 	bl	8004634 <HAL_RCC_GetPCLK1Freq>
 80063d0:	61b8      	str	r0, [r7, #24]
        break;
 80063d2:	e013      	b.n	80063fc <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063d4:	f7fe f950 	bl	8004678 <HAL_RCC_GetPCLK2Freq>
 80063d8:	61b8      	str	r0, [r7, #24]
        break;
 80063da:	e00f      	b.n	80063fc <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063dc:	4b4d      	ldr	r3, [pc, #308]	; (8006514 <UART_SetConfig+0x2f0>)
 80063de:	61bb      	str	r3, [r7, #24]
        break;
 80063e0:	e00c      	b.n	80063fc <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063e2:	f7fe f8af 	bl	8004544 <HAL_RCC_GetSysClockFreq>
 80063e6:	61b8      	str	r0, [r7, #24]
        break;
 80063e8:	e008      	b.n	80063fc <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063ee:	61bb      	str	r3, [r7, #24]
        break;
 80063f0:	e004      	b.n	80063fc <UART_SetConfig+0x1d8>
      default:
        pclk = 0U;
 80063f2:	2300      	movs	r3, #0
 80063f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	77bb      	strb	r3, [r7, #30]
        break;
 80063fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d074      	beq.n	80064ec <UART_SetConfig+0x2c8>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	005a      	lsls	r2, r3, #1
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	085b      	lsrs	r3, r3, #1
 800640c:	441a      	add	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	fbb2 f3f3 	udiv	r3, r2, r3
 8006416:	b29b      	uxth	r3, r3
 8006418:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	2b0f      	cmp	r3, #15
 800641e:	d916      	bls.n	800644e <UART_SetConfig+0x22a>
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006426:	d212      	bcs.n	800644e <UART_SetConfig+0x22a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	b29b      	uxth	r3, r3
 800642c:	f023 030f 	bic.w	r3, r3, #15
 8006430:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	085b      	lsrs	r3, r3, #1
 8006436:	b29b      	uxth	r3, r3
 8006438:	f003 0307 	and.w	r3, r3, #7
 800643c:	b29a      	uxth	r2, r3
 800643e:	89fb      	ldrh	r3, [r7, #14]
 8006440:	4313      	orrs	r3, r2
 8006442:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	89fa      	ldrh	r2, [r7, #14]
 800644a:	60da      	str	r2, [r3, #12]
 800644c:	e04e      	b.n	80064ec <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	77bb      	strb	r3, [r7, #30]
 8006452:	e04b      	b.n	80064ec <UART_SetConfig+0x2c8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006454:	7ffb      	ldrb	r3, [r7, #31]
 8006456:	2b08      	cmp	r3, #8
 8006458:	d827      	bhi.n	80064aa <UART_SetConfig+0x286>
 800645a:	a201      	add	r2, pc, #4	; (adr r2, 8006460 <UART_SetConfig+0x23c>)
 800645c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006460:	08006485 	.word	0x08006485
 8006464:	0800648d 	.word	0x0800648d
 8006468:	08006495 	.word	0x08006495
 800646c:	080064ab 	.word	0x080064ab
 8006470:	0800649b 	.word	0x0800649b
 8006474:	080064ab 	.word	0x080064ab
 8006478:	080064ab 	.word	0x080064ab
 800647c:	080064ab 	.word	0x080064ab
 8006480:	080064a3 	.word	0x080064a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006484:	f7fe f8d6 	bl	8004634 <HAL_RCC_GetPCLK1Freq>
 8006488:	61b8      	str	r0, [r7, #24]
        break;
 800648a:	e013      	b.n	80064b4 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800648c:	f7fe f8f4 	bl	8004678 <HAL_RCC_GetPCLK2Freq>
 8006490:	61b8      	str	r0, [r7, #24]
        break;
 8006492:	e00f      	b.n	80064b4 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006494:	4b1f      	ldr	r3, [pc, #124]	; (8006514 <UART_SetConfig+0x2f0>)
 8006496:	61bb      	str	r3, [r7, #24]
        break;
 8006498:	e00c      	b.n	80064b4 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800649a:	f7fe f853 	bl	8004544 <HAL_RCC_GetSysClockFreq>
 800649e:	61b8      	str	r0, [r7, #24]
        break;
 80064a0:	e008      	b.n	80064b4 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064a6:	61bb      	str	r3, [r7, #24]
        break;
 80064a8:	e004      	b.n	80064b4 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 80064aa:	2300      	movs	r3, #0
 80064ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	77bb      	strb	r3, [r7, #30]
        break;
 80064b2:	bf00      	nop
    }

    if (pclk != 0U)
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d018      	beq.n	80064ec <UART_SetConfig+0x2c8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	085a      	lsrs	r2, r3, #1
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	441a      	add	r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	2b0f      	cmp	r3, #15
 80064d4:	d908      	bls.n	80064e8 <UART_SetConfig+0x2c4>
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064dc:	d204      	bcs.n	80064e8 <UART_SetConfig+0x2c4>
      {
        huart->Instance->BRR = usartdiv;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	60da      	str	r2, [r3, #12]
 80064e6:	e001      	b.n	80064ec <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80064f8:	7fbb      	ldrb	r3, [r7, #30]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3720      	adds	r7, #32
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	40013800 	.word	0x40013800
 8006508:	40021000 	.word	0x40021000
 800650c:	40004400 	.word	0x40004400
 8006510:	40004800 	.word	0x40004800
 8006514:	007a1200 	.word	0x007a1200

08006518 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006524:	f003 0301 	and.w	r3, r3, #1
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00a      	beq.n	8006542 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	430a      	orrs	r2, r1
 8006540:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006546:	f003 0302 	and.w	r3, r3, #2
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00a      	beq.n	8006564 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	430a      	orrs	r2, r1
 8006562:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006568:	f003 0304 	and.w	r3, r3, #4
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00a      	beq.n	8006586 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	430a      	orrs	r2, r1
 8006584:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658a:	f003 0308 	and.w	r3, r3, #8
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00a      	beq.n	80065a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	430a      	orrs	r2, r1
 80065a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ac:	f003 0310 	and.w	r3, r3, #16
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00a      	beq.n	80065ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ce:	f003 0320 	and.w	r3, r3, #32
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00a      	beq.n	80065ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	430a      	orrs	r2, r1
 80065ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d01a      	beq.n	800662e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	430a      	orrs	r2, r1
 800660c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006612:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006616:	d10a      	bne.n	800662e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	430a      	orrs	r2, r1
 800662c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00a      	beq.n	8006650 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	430a      	orrs	r2, r1
 800664e:	605a      	str	r2, [r3, #4]
  }
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b086      	sub	sp, #24
 8006660:	af02      	add	r7, sp, #8
 8006662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800666c:	f7fb fc22 	bl	8001eb4 <HAL_GetTick>
 8006670:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0308 	and.w	r3, r3, #8
 800667c:	2b08      	cmp	r3, #8
 800667e:	d10e      	bne.n	800669e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006680:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006684:	9300      	str	r3, [sp, #0]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 f82d 	bl	80066ee <UART_WaitOnFlagUntilTimeout>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d001      	beq.n	800669e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800669a:	2303      	movs	r3, #3
 800669c:	e023      	b.n	80066e6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0304 	and.w	r3, r3, #4
 80066a8:	2b04      	cmp	r3, #4
 80066aa:	d10e      	bne.n	80066ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066b0:	9300      	str	r3, [sp, #0]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 f817 	bl	80066ee <UART_WaitOnFlagUntilTimeout>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d001      	beq.n	80066ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066c6:	2303      	movs	r3, #3
 80066c8:	e00d      	b.n	80066e6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2220      	movs	r2, #32
 80066ce:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2220      	movs	r2, #32
 80066d4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3710      	adds	r7, #16
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}

080066ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066ee:	b580      	push	{r7, lr}
 80066f0:	b084      	sub	sp, #16
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	60f8      	str	r0, [r7, #12]
 80066f6:	60b9      	str	r1, [r7, #8]
 80066f8:	603b      	str	r3, [r7, #0]
 80066fa:	4613      	mov	r3, r2
 80066fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066fe:	e05e      	b.n	80067be <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006706:	d05a      	beq.n	80067be <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006708:	f7fb fbd4 	bl	8001eb4 <HAL_GetTick>
 800670c:	4602      	mov	r2, r0
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	69ba      	ldr	r2, [r7, #24]
 8006714:	429a      	cmp	r2, r3
 8006716:	d302      	bcc.n	800671e <UART_WaitOnFlagUntilTimeout+0x30>
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d11b      	bne.n	8006756 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800672c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	689a      	ldr	r2, [r3, #8]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f022 0201 	bic.w	r2, r2, #1
 800673c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2220      	movs	r2, #32
 8006742:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2220      	movs	r2, #32
 8006748:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	e043      	b.n	80067de <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 0304 	and.w	r3, r3, #4
 8006760:	2b00      	cmp	r3, #0
 8006762:	d02c      	beq.n	80067be <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	69db      	ldr	r3, [r3, #28]
 800676a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800676e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006772:	d124      	bne.n	80067be <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800677c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800678c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	689a      	ldr	r2, [r3, #8]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f022 0201 	bic.w	r2, r2, #1
 800679c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2220      	movs	r2, #32
 80067a2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2220      	movs	r2, #32
 80067a8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2220      	movs	r2, #32
 80067ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e00f      	b.n	80067de <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	69da      	ldr	r2, [r3, #28]
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	4013      	ands	r3, r2
 80067c8:	68ba      	ldr	r2, [r7, #8]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	bf0c      	ite	eq
 80067ce:	2301      	moveq	r3, #1
 80067d0:	2300      	movne	r3, #0
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	461a      	mov	r2, r3
 80067d6:	79fb      	ldrb	r3, [r7, #7]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d091      	beq.n	8006700 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
	...

080067e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	4613      	mov	r3, r2
 80067f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	88fa      	ldrh	r2, [r7, #6]
 8006800:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2200      	movs	r2, #0
 8006808:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2222      	movs	r2, #34	; 0x22
 8006810:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006816:	2b00      	cmp	r3, #0
 8006818:	d02b      	beq.n	8006872 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800681e:	4a25      	ldr	r2, [pc, #148]	; (80068b4 <UART_Start_Receive_DMA+0xcc>)
 8006820:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006826:	4a24      	ldr	r2, [pc, #144]	; (80068b8 <UART_Start_Receive_DMA+0xd0>)
 8006828:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800682e:	4a23      	ldr	r2, [pc, #140]	; (80068bc <UART_Start_Receive_DMA+0xd4>)
 8006830:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006836:	2200      	movs	r2, #0
 8006838:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	3324      	adds	r3, #36	; 0x24
 8006844:	4619      	mov	r1, r3
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800684a:	461a      	mov	r2, r3
 800684c:	88fb      	ldrh	r3, [r7, #6]
 800684e:	f7fc f8fe 	bl	8002a4e <HAL_DMA_Start_IT>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00c      	beq.n	8006872 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2210      	movs	r2, #16
 800685c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2200      	movs	r2, #0
 8006864:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2220      	movs	r2, #32
 800686c:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e01c      	b.n	80068ac <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006888:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	689a      	ldr	r2, [r3, #8]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f042 0201 	orr.w	r2, r2, #1
 8006898:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	689a      	ldr	r2, [r3, #8]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068a8:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3710      	adds	r7, #16
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	08006949 	.word	0x08006949
 80068b8:	080069db 	.word	0x080069db
 80068bc:	08006a13 	.word	0x08006a13

080068c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80068d6:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2220      	movs	r2, #32
 80068dc:	679a      	str	r2, [r3, #120]	; 0x78
}
 80068de:	bf00      	nop
 80068e0:	370c      	adds	r7, #12
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr

080068ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068ea:	b480      	push	{r7}
 80068ec:	b083      	sub	sp, #12
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006900:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	689a      	ldr	r2, [r3, #8]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f022 0201 	bic.w	r2, r2, #1
 8006910:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006916:	2b01      	cmp	r3, #1
 8006918:	d107      	bne.n	800692a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f022 0210 	bic.w	r2, r2, #16
 8006928:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2220      	movs	r2, #32
 800692e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800693c:	bf00      	nop
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006954:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	2b20      	cmp	r3, #32
 800695c:	d02a      	beq.n	80069b4 <UART_DMAReceiveCplt+0x6c>
  {
    huart->RxXferCount = 0U;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2200      	movs	r2, #0
 8006962:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006974:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	689a      	ldr	r2, [r3, #8]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f022 0201 	bic.w	r2, r2, #1
 8006984:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	689a      	ldr	r2, [r3, #8]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006994:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2220      	movs	r2, #32
 800699a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d107      	bne.n	80069b4 <UART_DMAReceiveCplt+0x6c>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f022 0210 	bic.w	r2, r2, #16
 80069b2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d107      	bne.n	80069cc <UART_DMAReceiveCplt+0x84>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80069c2:	4619      	mov	r1, r3
 80069c4:	68f8      	ldr	r0, [r7, #12]
 80069c6:	f7ff fc20 	bl	800620a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80069ca:	e002      	b.n	80069d2 <UART_DMAReceiveCplt+0x8a>
    HAL_UART_RxCpltCallback(huart);
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f7fa fc59 	bl	8001284 <HAL_UART_RxCpltCallback>
}
 80069d2:	bf00      	nop
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80069da:	b580      	push	{r7, lr}
 80069dc:	b084      	sub	sp, #16
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d109      	bne.n	8006a04 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80069f6:	085b      	lsrs	r3, r3, #1
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	4619      	mov	r1, r3
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	f7ff fc04 	bl	800620a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006a02:	e002      	b.n	8006a0a <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	f7ff fbec 	bl	80061e2 <HAL_UART_RxHalfCpltCallback>
}
 8006a0a:	bf00      	nop
 8006a0c:	3710      	adds	r7, #16
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}

08006a12 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a12:	b580      	push	{r7, lr}
 8006a14:	b086      	sub	sp, #24
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a24:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a2a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a36:	2b80      	cmp	r3, #128	; 0x80
 8006a38:	d109      	bne.n	8006a4e <UART_DMAError+0x3c>
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	2b21      	cmp	r3, #33	; 0x21
 8006a3e:	d106      	bne.n	8006a4e <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8006a48:	6978      	ldr	r0, [r7, #20]
 8006a4a:	f7ff ff39 	bl	80068c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a58:	2b40      	cmp	r3, #64	; 0x40
 8006a5a:	d109      	bne.n	8006a70 <UART_DMAError+0x5e>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2b22      	cmp	r3, #34	; 0x22
 8006a60:	d106      	bne.n	8006a70 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006a6a:	6978      	ldr	r0, [r7, #20]
 8006a6c:	f7ff ff3d 	bl	80068ea <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a76:	f043 0210 	orr.w	r2, r3, #16
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a80:	6978      	ldr	r0, [r7, #20]
 8006a82:	f7ff fbb8 	bl	80061f6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a86:	bf00      	nop
 8006a88:	3718      	adds	r7, #24
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
	...

08006a90 <__libc_init_array>:
 8006a90:	b570      	push	{r4, r5, r6, lr}
 8006a92:	4e0d      	ldr	r6, [pc, #52]	; (8006ac8 <__libc_init_array+0x38>)
 8006a94:	4c0d      	ldr	r4, [pc, #52]	; (8006acc <__libc_init_array+0x3c>)
 8006a96:	1ba4      	subs	r4, r4, r6
 8006a98:	10a4      	asrs	r4, r4, #2
 8006a9a:	2500      	movs	r5, #0
 8006a9c:	42a5      	cmp	r5, r4
 8006a9e:	d109      	bne.n	8006ab4 <__libc_init_array+0x24>
 8006aa0:	4e0b      	ldr	r6, [pc, #44]	; (8006ad0 <__libc_init_array+0x40>)
 8006aa2:	4c0c      	ldr	r4, [pc, #48]	; (8006ad4 <__libc_init_array+0x44>)
 8006aa4:	f000 f820 	bl	8006ae8 <_init>
 8006aa8:	1ba4      	subs	r4, r4, r6
 8006aaa:	10a4      	asrs	r4, r4, #2
 8006aac:	2500      	movs	r5, #0
 8006aae:	42a5      	cmp	r5, r4
 8006ab0:	d105      	bne.n	8006abe <__libc_init_array+0x2e>
 8006ab2:	bd70      	pop	{r4, r5, r6, pc}
 8006ab4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ab8:	4798      	blx	r3
 8006aba:	3501      	adds	r5, #1
 8006abc:	e7ee      	b.n	8006a9c <__libc_init_array+0xc>
 8006abe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ac2:	4798      	blx	r3
 8006ac4:	3501      	adds	r5, #1
 8006ac6:	e7f2      	b.n	8006aae <__libc_init_array+0x1e>
 8006ac8:	08006b38 	.word	0x08006b38
 8006acc:	08006b38 	.word	0x08006b38
 8006ad0:	08006b38 	.word	0x08006b38
 8006ad4:	08006b3c 	.word	0x08006b3c

08006ad8 <memset>:
 8006ad8:	4402      	add	r2, r0
 8006ada:	4603      	mov	r3, r0
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d100      	bne.n	8006ae2 <memset+0xa>
 8006ae0:	4770      	bx	lr
 8006ae2:	f803 1b01 	strb.w	r1, [r3], #1
 8006ae6:	e7f9      	b.n	8006adc <memset+0x4>

08006ae8 <_init>:
 8006ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aea:	bf00      	nop
 8006aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aee:	bc08      	pop	{r3}
 8006af0:	469e      	mov	lr, r3
 8006af2:	4770      	bx	lr

08006af4 <_fini>:
 8006af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006af6:	bf00      	nop
 8006af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006afa:	bc08      	pop	{r3}
 8006afc:	469e      	mov	lr, r3
 8006afe:	4770      	bx	lr
